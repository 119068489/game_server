// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: h5_wish.proto

package h5_wish

import (
	fmt "fmt"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//import "game_server/pb/share_message/table_struct_wish.proto";
// 推送小助手
type WishNoticeAssistantReq struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	WishPlayerId         *int64   `protobuf:"varint,3,opt,name=WishPlayerId" json:"WishPlayerId,omitempty" bson:"WishPlayerId,omitempty"`
	ProductName          *string  `protobuf:"bytes,2,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishNoticeAssistantReq) Reset()         { *m = WishNoticeAssistantReq{} }
func (m *WishNoticeAssistantReq) String() string { return proto.CompactTextString(m) }
func (*WishNoticeAssistantReq) ProtoMessage()    {}
func (*WishNoticeAssistantReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{0}
}
func (m *WishNoticeAssistantReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishNoticeAssistantReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishNoticeAssistantReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishNoticeAssistantReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishNoticeAssistantReq.Merge(m, src)
}
func (m *WishNoticeAssistantReq) XXX_Size() int {
	return m.Size()
}
func (m *WishNoticeAssistantReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WishNoticeAssistantReq.DiscardUnknown(m)
}

var xxx_messageInfo_WishNoticeAssistantReq proto.InternalMessageInfo

func (m *WishNoticeAssistantReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishNoticeAssistantReq) GetWishPlayerId() int64 {
	if m != nil && m.WishPlayerId != nil {
		return *m.WishPlayerId
	}
	return 0
}

func (m *WishNoticeAssistantReq) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

// 推送小助手
type WishNoticeAssistantResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishNoticeAssistantResp) Reset()         { *m = WishNoticeAssistantResp{} }
func (m *WishNoticeAssistantResp) String() string { return proto.CompactTextString(m) }
func (*WishNoticeAssistantResp) ProtoMessage()    {}
func (*WishNoticeAssistantResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{1}
}
func (m *WishNoticeAssistantResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishNoticeAssistantResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishNoticeAssistantResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishNoticeAssistantResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishNoticeAssistantResp.Merge(m, src)
}
func (m *WishNoticeAssistantResp) XXX_Size() int {
	return m.Size()
}
func (m *WishNoticeAssistantResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WishNoticeAssistantResp.DiscardUnknown(m)
}

var xxx_messageInfo_WishNoticeAssistantResp proto.InternalMessageInfo

func (m *WishNoticeAssistantResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 许愿池首页查询
type QueryBoxReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *QueryBoxReq) Reset()         { *m = QueryBoxReq{} }
func (m *QueryBoxReq) String() string { return proto.CompactTextString(m) }
func (*QueryBoxReq) ProtoMessage()    {}
func (*QueryBoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{2}
}
func (m *QueryBoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBoxReq.Merge(m, src)
}
func (m *QueryBoxReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryBoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBoxReq proto.InternalMessageInfo

func (m *QueryBoxReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *QueryBoxReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type BoxProductName struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BoxProductName) Reset()         { *m = BoxProductName{} }
func (m *BoxProductName) String() string { return proto.CompactTextString(m) }
func (*BoxProductName) ProtoMessage()    {}
func (*BoxProductName) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{3}
}
func (m *BoxProductName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxProductName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxProductName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxProductName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxProductName.Merge(m, src)
}
func (m *BoxProductName) XXX_Size() int {
	return m.Size()
}
func (m *BoxProductName) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxProductName.DiscardUnknown(m)
}

var xxx_messageInfo_BoxProductName proto.InternalMessageInfo

func (m *BoxProductName) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BoxProductName) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BoxProductName) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type BoxProductNameResp struct {
	BoxProductNames      []*BoxProductName `protobuf:"bytes,1,rep,name=BoxProductNames" json:"BoxProductNames,omitempty" bson:"BoxProductNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *BoxProductNameResp) Reset()         { *m = BoxProductNameResp{} }
func (m *BoxProductNameResp) String() string { return proto.CompactTextString(m) }
func (*BoxProductNameResp) ProtoMessage()    {}
func (*BoxProductNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{4}
}
func (m *BoxProductNameResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxProductNameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxProductNameResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxProductNameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxProductNameResp.Merge(m, src)
}
func (m *BoxProductNameResp) XXX_Size() int {
	return m.Size()
}
func (m *BoxProductNameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxProductNameResp.DiscardUnknown(m)
}

var xxx_messageInfo_BoxProductNameResp proto.InternalMessageInfo

func (m *BoxProductNameResp) GetBoxProductNames() []*BoxProductName {
	if m != nil {
		return m.BoxProductNames
	}
	return nil
}

// 类型
type WishItemType struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	IsRecommend          *bool    `protobuf:"varint,4,opt,name=IsRecommend" json:"IsRecommend,omitempty" bson:"IsRecommend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishItemType) Reset()         { *m = WishItemType{} }
func (m *WishItemType) String() string { return proto.CompactTextString(m) }
func (*WishItemType) ProtoMessage()    {}
func (*WishItemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{5}
}
func (m *WishItemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishItemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishItemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishItemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishItemType.Merge(m, src)
}
func (m *WishItemType) XXX_Size() int {
	return m.Size()
}
func (m *WishItemType) XXX_DiscardUnknown() {
	xxx_messageInfo_WishItemType.DiscardUnknown(m)
}

var xxx_messageInfo_WishItemType proto.InternalMessageInfo

func (m *WishItemType) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishItemType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishItemType) GetIsRecommend() bool {
	if m != nil && m.IsRecommend != nil {
		return *m.IsRecommend
	}
	return false
}

type SearchFoundResp struct {
	WishItemTypes        []*WishItemType `protobuf:"bytes,1,rep,name=WishItemTypes" json:"WishItemTypes,omitempty" bson:"WishItemTypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *SearchFoundResp) Reset()         { *m = SearchFoundResp{} }
func (m *SearchFoundResp) String() string { return proto.CompactTextString(m) }
func (*SearchFoundResp) ProtoMessage()    {}
func (*SearchFoundResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{6}
}
func (m *SearchFoundResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchFoundResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchFoundResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchFoundResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchFoundResp.Merge(m, src)
}
func (m *SearchFoundResp) XXX_Size() int {
	return m.Size()
}
func (m *SearchFoundResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchFoundResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchFoundResp proto.InternalMessageInfo

func (m *SearchFoundResp) GetWishItemTypes() []*WishItemType {
	if m != nil {
		return m.WishItemTypes
	}
	return nil
}

type CollectBox struct {
	XId                  *int64   `protobuf:"varint,1,opt,name=_id" json:"_id,omitempty" bson:"_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Desc                 *string  `protobuf:"bytes,4,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	TotalNum             *int32   `protobuf:"varint,5,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	RareNum              *int32   `protobuf:"varint,6,opt,name=RareNum" json:"RareNum,omitempty" bson:"RareNum,omitempty"`
	Price                *int64   `protobuf:"varint,7,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	WishBoxItemId        *int64   `protobuf:"varint,8,opt,name=WishBoxItemId" json:"WishBoxItemId,omitempty" bson:"WishBoxItemId,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,9,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsPreSale            *bool    `protobuf:"varint,11,opt,name=IsPreSale" json:"IsPreSale,omitempty" bson:"IsPreSale,omitempty"`
	Match                *int32   `protobuf:"varint,12,opt,name=Match" json:"Match,omitempty" bson:"Match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CollectBox) Reset()         { *m = CollectBox{} }
func (m *CollectBox) String() string { return proto.CompactTextString(m) }
func (*CollectBox) ProtoMessage()    {}
func (*CollectBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{7}
}
func (m *CollectBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectBox.Merge(m, src)
}
func (m *CollectBox) XXX_Size() int {
	return m.Size()
}
func (m *CollectBox) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectBox.DiscardUnknown(m)
}

var xxx_messageInfo_CollectBox proto.InternalMessageInfo

func (m *CollectBox) GetXId() int64 {
	if m != nil && m.XId != nil {
		return *m.XId
	}
	return 0
}

func (m *CollectBox) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CollectBox) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *CollectBox) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *CollectBox) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *CollectBox) GetRareNum() int32 {
	if m != nil && m.RareNum != nil {
		return *m.RareNum
	}
	return 0
}

func (m *CollectBox) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *CollectBox) GetWishBoxItemId() int64 {
	if m != nil && m.WishBoxItemId != nil {
		return *m.WishBoxItemId
	}
	return 0
}

func (m *CollectBox) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *CollectBox) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *CollectBox) GetIsPreSale() bool {
	if m != nil && m.IsPreSale != nil {
		return *m.IsPreSale
	}
	return false
}

func (m *CollectBox) GetMatch() int32 {
	if m != nil && m.Match != nil {
		return *m.Match
	}
	return 0
}

type QueryBox struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Image                *string  `protobuf:"bytes,3,opt,name=Image" json:"Image,omitempty" bson:"Image,omitempty"`
	Desc                 *string  `protobuf:"bytes,4,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	Items                []int64  `protobuf:"varint,5,rep,name=Items" json:"Items,omitempty" bson:"Items,omitempty"`
	Price                *int64   `protobuf:"varint,6,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	WishFishCount        *int64   `protobuf:"varint,7,opt,name=WishFishCount" json:"WishFishCount,omitempty" bson:"WishFishCount,omitempty"`
	Label                *int32   `protobuf:"varint,8,opt,name=label" json:"label,omitempty" bson:"label,omitempty"`
	ProductType          *int32   `protobuf:"varint,9,opt,name=ProductType" json:"ProductType,omitempty" bson:"ProductType,omitempty"`
	ProductStatus        *int32   `protobuf:"varint,10,opt,name=ProductStatus" json:"ProductStatus,omitempty" bson:"ProductStatus,omitempty"`
	ArrivalTime          *int64   `protobuf:"varint,11,opt,name=ArrivalTime" json:"ArrivalTime,omitempty" bson:"ArrivalTime,omitempty"`
	BoxType              *int32   `protobuf:"varint,12,opt,name=BoxType" json:"BoxType,omitempty" bson:"BoxType,omitempty"`
	Protector            *string  `protobuf:"bytes,13,opt,name=Protector" json:"Protector,omitempty" bson:"Protector,omitempty"`
	ProtectorHeadUrl     *string  `protobuf:"bytes,14,opt,name=ProtectorHeadUrl" json:"ProtectorHeadUrl,omitempty" bson:"ProtectorHeadUrl,omitempty"`
	ProtectorTime        *int64   `protobuf:"varint,15,opt,name=ProtectorTime" json:"ProtectorTime,omitempty" bson:"ProtectorTime,omitempty"`
	GetCoin              *int64   `protobuf:"varint,16,opt,name=GetCoin" json:"GetCoin,omitempty" bson:"GetCoin,omitempty"`
	TotalNum             *int32   `protobuf:"varint,17,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	RareNum              *int32   `protobuf:"varint,18,opt,name=RareNum" json:"RareNum,omitempty" bson:"RareNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *QueryBox) Reset()         { *m = QueryBox{} }
func (m *QueryBox) String() string { return proto.CompactTextString(m) }
func (*QueryBox) ProtoMessage()    {}
func (*QueryBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{8}
}
func (m *QueryBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBox.Merge(m, src)
}
func (m *QueryBox) XXX_Size() int {
	return m.Size()
}
func (m *QueryBox) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBox.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBox proto.InternalMessageInfo

func (m *QueryBox) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *QueryBox) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *QueryBox) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *QueryBox) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *QueryBox) GetItems() []int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *QueryBox) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *QueryBox) GetWishFishCount() int64 {
	if m != nil && m.WishFishCount != nil {
		return *m.WishFishCount
	}
	return 0
}

func (m *QueryBox) GetLabel() int32 {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return 0
}

func (m *QueryBox) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *QueryBox) GetProductStatus() int32 {
	if m != nil && m.ProductStatus != nil {
		return *m.ProductStatus
	}
	return 0
}

func (m *QueryBox) GetArrivalTime() int64 {
	if m != nil && m.ArrivalTime != nil {
		return *m.ArrivalTime
	}
	return 0
}

func (m *QueryBox) GetBoxType() int32 {
	if m != nil && m.BoxType != nil {
		return *m.BoxType
	}
	return 0
}

func (m *QueryBox) GetProtector() string {
	if m != nil && m.Protector != nil {
		return *m.Protector
	}
	return ""
}

func (m *QueryBox) GetProtectorHeadUrl() string {
	if m != nil && m.ProtectorHeadUrl != nil {
		return *m.ProtectorHeadUrl
	}
	return ""
}

func (m *QueryBox) GetProtectorTime() int64 {
	if m != nil && m.ProtectorTime != nil {
		return *m.ProtectorTime
	}
	return 0
}

func (m *QueryBox) GetGetCoin() int64 {
	if m != nil && m.GetCoin != nil {
		return *m.GetCoin
	}
	return 0
}

func (m *QueryBox) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *QueryBox) GetRareNum() int32 {
	if m != nil && m.RareNum != nil {
		return *m.RareNum
	}
	return 0
}

//响应数据
type QueryBoxResp struct {
	Boxes                []*QueryBox `protobuf:"bytes,1,rep,name=Boxes" json:"Boxes,omitempty" bson:"Boxes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *QueryBoxResp) Reset()         { *m = QueryBoxResp{} }
func (m *QueryBoxResp) String() string { return proto.CompactTextString(m) }
func (*QueryBoxResp) ProtoMessage()    {}
func (*QueryBoxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{9}
}
func (m *QueryBoxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBoxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBoxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBoxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBoxResp.Merge(m, src)
}
func (m *QueryBoxResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryBoxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBoxResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBoxResp proto.InternalMessageInfo

func (m *QueryBoxResp) GetBoxes() []*QueryBox {
	if m != nil {
		return m.Boxes
	}
	return nil
}

// 我的愿望盒子请求
type MyWishReq struct {
	Page                 *int32   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MyWishReq) Reset()         { *m = MyWishReq{} }
func (m *MyWishReq) String() string { return proto.CompactTextString(m) }
func (*MyWishReq) ProtoMessage()    {}
func (*MyWishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{10}
}
func (m *MyWishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyWishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyWishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyWishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyWishReq.Merge(m, src)
}
func (m *MyWishReq) XXX_Size() int {
	return m.Size()
}
func (m *MyWishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MyWishReq.DiscardUnknown(m)
}

var xxx_messageInfo_MyWishReq proto.InternalMessageInfo

func (m *MyWishReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *MyWishReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *MyWishReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

// 我的愿望盒子响应
type MyWishResp struct {
	Boxes                []*QueryBox `protobuf:"bytes,1,rep,name=Boxes" json:"Boxes,omitempty" bson:"Boxes,omitempty"`
	Count                *int32      `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *MyWishResp) Reset()         { *m = MyWishResp{} }
func (m *MyWishResp) String() string { return proto.CompactTextString(m) }
func (*MyWishResp) ProtoMessage()    {}
func (*MyWishResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{11}
}
func (m *MyWishResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyWishResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyWishResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyWishResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyWishResp.Merge(m, src)
}
func (m *MyWishResp) XXX_Size() int {
	return m.Size()
}
func (m *MyWishResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MyWishResp.DiscardUnknown(m)
}

var xxx_messageInfo_MyWishResp proto.InternalMessageInfo

func (m *MyWishResp) GetBoxes() []*QueryBox {
	if m != nil {
		return m.Boxes
	}
	return nil
}

func (m *MyWishResp) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 商品展示区列表
type Product struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	ProductType          *int32   `protobuf:"varint,2,opt,name=ProductType" json:"ProductType,omitempty" bson:"ProductType,omitempty"`
	Icon                 *string  `protobuf:"bytes,3,opt,name=Icon" json:"Icon,omitempty" bson:"Icon,omitempty"`
	Name                 *string  `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	BoxId                *int64   `protobuf:"varint,5,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	Price                *int64   `protobuf:"varint,6,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	ProductId            *int64   `protobuf:"varint,8,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	PreHaveTime          *int64   `protobuf:"varint,9,opt,name=PreHaveTime" json:"PreHaveTime,omitempty" bson:"PreHaveTime,omitempty"`
	IsPreSale            *bool    `protobuf:"varint,10,opt,name=IsPreSale" json:"IsPreSale,omitempty" bson:"IsPreSale,omitempty"`
	BoxName              *string  `protobuf:"bytes,11,opt,name=BoxName" json:"BoxName,omitempty" bson:"BoxName,omitempty"`
	PlayerWishItemId     *int64   `protobuf:"varint,12,opt,name=PlayerWishItemId" json:"PlayerWishItemId,omitempty" bson:"PlayerWishItemId,omitempty"`
	IsWish               *bool    `protobuf:"varint,13,opt,name=IsWish" json:"IsWish,omitempty" bson:"IsWish,omitempty"`
	ExpireTime           *int64   `protobuf:"varint,14,opt,name=ExpireTime" json:"ExpireTime,omitempty" bson:"ExpireTime,omitempty"`
	IsSaleOut            *bool    `protobuf:"varint,15,opt,name=IsSaleOut" json:"IsSaleOut,omitempty" bson:"IsSaleOut,omitempty"`
	IsMakeWish           *bool    `protobuf:"varint,31,opt,name=IsMakeWish" json:"IsMakeWish,omitempty" bson:"IsMakeWish,omitempty"`
	Match                *int32   `protobuf:"varint,16,opt,name=Match" json:"Match,omitempty" bson:"Match,omitempty"`
	RecyclePrice         *int64   `protobuf:"varint,17,opt,name=RecyclePrice" json:"RecyclePrice,omitempty" bson:"RecyclePrice,omitempty"`
	CtrlStatus           *int32   `protobuf:"varint,18,opt,name=CtrlStatus" json:"CtrlStatus,omitempty" bson:"CtrlStatus,omitempty"`
	Diamond              *int64   `protobuf:"varint,19,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	RecycleType          *int32   `protobuf:"varint,20,opt,name=RecycleType" json:"RecycleType,omitempty" bson:"RecycleType,omitempty"`
	GiveType             *int64   `protobuf:"varint,21,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{12}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Product) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *Product) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Product) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *Product) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *Product) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *Product) GetPreHaveTime() int64 {
	if m != nil && m.PreHaveTime != nil {
		return *m.PreHaveTime
	}
	return 0
}

func (m *Product) GetIsPreSale() bool {
	if m != nil && m.IsPreSale != nil {
		return *m.IsPreSale
	}
	return false
}

func (m *Product) GetBoxName() string {
	if m != nil && m.BoxName != nil {
		return *m.BoxName
	}
	return ""
}

func (m *Product) GetPlayerWishItemId() int64 {
	if m != nil && m.PlayerWishItemId != nil {
		return *m.PlayerWishItemId
	}
	return 0
}

func (m *Product) GetIsWish() bool {
	if m != nil && m.IsWish != nil {
		return *m.IsWish
	}
	return false
}

func (m *Product) GetExpireTime() int64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

func (m *Product) GetIsSaleOut() bool {
	if m != nil && m.IsSaleOut != nil {
		return *m.IsSaleOut
	}
	return false
}

func (m *Product) GetIsMakeWish() bool {
	if m != nil && m.IsMakeWish != nil {
		return *m.IsMakeWish
	}
	return false
}

func (m *Product) GetMatch() int32 {
	if m != nil && m.Match != nil {
		return *m.Match
	}
	return 0
}

func (m *Product) GetRecyclePrice() int64 {
	if m != nil && m.RecyclePrice != nil {
		return *m.RecyclePrice
	}
	return 0
}

func (m *Product) GetCtrlStatus() int32 {
	if m != nil && m.CtrlStatus != nil {
		return *m.CtrlStatus
	}
	return 0
}

func (m *Product) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *Product) GetRecycleType() int32 {
	if m != nil && m.RecycleType != nil {
		return *m.RecycleType
	}
	return 0
}

func (m *Product) GetGiveType() int64 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

type ProductShowResp struct {
	Products             []*Product `protobuf:"bytes,1,rep,name=Products" json:"Products,omitempty" bson:"Products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *ProductShowResp) Reset()         { *m = ProductShowResp{} }
func (m *ProductShowResp) String() string { return proto.CompactTextString(m) }
func (*ProductShowResp) ProtoMessage()    {}
func (*ProductShowResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{13}
}
func (m *ProductShowResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductShowResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductShowResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductShowResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductShowResp.Merge(m, src)
}
func (m *ProductShowResp) XXX_Size() int {
	return m.Size()
}
func (m *ProductShowResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductShowResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProductShowResp proto.InternalMessageInfo

func (m *ProductShowResp) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

// 盲盒展示区列表(商品展示列表区)
type BoxShow struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Image                *string  `protobuf:"bytes,3,opt,name=Image" json:"Image,omitempty" bson:"Image,omitempty"`
	Desc                 *string  `protobuf:"bytes,4,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	Price                *int64   `protobuf:"varint,6,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	WishFishCount        *int64   `protobuf:"varint,7,opt,name=WishFishCount" json:"WishFishCount,omitempty" bson:"WishFishCount,omitempty"`
	Label                *int32   `protobuf:"varint,8,opt,name=Label" json:"Label,omitempty" bson:"Label,omitempty"`
	ProductType          *int32   `protobuf:"varint,9,opt,name=ProductType" json:"ProductType,omitempty" bson:"ProductType,omitempty"`
	ProductStatus        *int32   `protobuf:"varint,10,opt,name=ProductStatus" json:"ProductStatus,omitempty" bson:"ProductStatus,omitempty"`
	TotalNum             *int32   `protobuf:"varint,17,opt,name=TotalNum" json:"TotalNum,omitempty" bson:"TotalNum,omitempty"`
	RareNum              *int32   `protobuf:"varint,18,opt,name=RareNum" json:"RareNum,omitempty" bson:"RareNum,omitempty"`
	OccupiedTime         *int64   `protobuf:"varint,19,opt,name=OccupiedTime" json:"OccupiedTime,omitempty" bson:"OccupiedTime,omitempty"`
	CoinNum              *int32   `protobuf:"varint,20,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,21,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	GuardianPlayerId     *int64   `protobuf:"varint,22,opt,name=GuardianPlayerId" json:"GuardianPlayerId,omitempty" bson:"GuardianPlayerId,omitempty"`
	HaveIsWin            *bool    `protobuf:"varint,34,opt,name=HaveIsWin" json:"HaveIsWin,omitempty" bson:"HaveIsWin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BoxShow) Reset()         { *m = BoxShow{} }
func (m *BoxShow) String() string { return proto.CompactTextString(m) }
func (*BoxShow) ProtoMessage()    {}
func (*BoxShow) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{14}
}
func (m *BoxShow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxShow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxShow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxShow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxShow.Merge(m, src)
}
func (m *BoxShow) XXX_Size() int {
	return m.Size()
}
func (m *BoxShow) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxShow.DiscardUnknown(m)
}

var xxx_messageInfo_BoxShow proto.InternalMessageInfo

func (m *BoxShow) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BoxShow) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BoxShow) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *BoxShow) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *BoxShow) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *BoxShow) GetWishFishCount() int64 {
	if m != nil && m.WishFishCount != nil {
		return *m.WishFishCount
	}
	return 0
}

func (m *BoxShow) GetLabel() int32 {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return 0
}

func (m *BoxShow) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *BoxShow) GetProductStatus() int32 {
	if m != nil && m.ProductStatus != nil {
		return *m.ProductStatus
	}
	return 0
}

func (m *BoxShow) GetTotalNum() int32 {
	if m != nil && m.TotalNum != nil {
		return *m.TotalNum
	}
	return 0
}

func (m *BoxShow) GetRareNum() int32 {
	if m != nil && m.RareNum != nil {
		return *m.RareNum
	}
	return 0
}

func (m *BoxShow) GetOccupiedTime() int64 {
	if m != nil && m.OccupiedTime != nil {
		return *m.OccupiedTime
	}
	return 0
}

func (m *BoxShow) GetCoinNum() int32 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

func (m *BoxShow) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *BoxShow) GetGuardianPlayerId() int64 {
	if m != nil && m.GuardianPlayerId != nil {
		return *m.GuardianPlayerId
	}
	return 0
}

func (m *BoxShow) GetHaveIsWin() bool {
	if m != nil && m.HaveIsWin != nil {
		return *m.HaveIsWin
	}
	return false
}

type GetCoin struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	Coin                 *int64   `protobuf:"varint,4,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetCoin) Reset()         { *m = GetCoin{} }
func (m *GetCoin) String() string { return proto.CompactTextString(m) }
func (*GetCoin) ProtoMessage()    {}
func (*GetCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{15}
}
func (m *GetCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoin.Merge(m, src)
}
func (m *GetCoin) XXX_Size() int {
	return m.Size()
}
func (m *GetCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoin.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoin proto.InternalMessageInfo

func (m *GetCoin) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *GetCoin) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *GetCoin) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *GetCoin) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// xxx 已获得8888硬币
type GetCoinResp struct {
	GetCoins             []*GetCoin `protobuf:"bytes,1,rep,name=GetCoins" json:"GetCoins,omitempty" bson:"GetCoins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *GetCoinResp) Reset()         { *m = GetCoinResp{} }
func (m *GetCoinResp) String() string { return proto.CompactTextString(m) }
func (*GetCoinResp) ProtoMessage()    {}
func (*GetCoinResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{16}
}
func (m *GetCoinResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoinResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinResp.Merge(m, src)
}
func (m *GetCoinResp) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinResp proto.InternalMessageInfo

func (m *GetCoinResp) GetGetCoins() []*GetCoin {
	if m != nil {
		return m.GetCoins
	}
	return nil
}

// 挑战成功文案消息
type DareMessage struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DareMessage) Reset()         { *m = DareMessage{} }
func (m *DareMessage) String() string { return proto.CompactTextString(m) }
func (*DareMessage) ProtoMessage()    {}
func (*DareMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{17}
}
func (m *DareMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareMessage.Merge(m, src)
}
func (m *DareMessage) XXX_Size() int {
	return m.Size()
}
func (m *DareMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DareMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DareMessage proto.InternalMessageInfo

func (m *DareMessage) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *DareMessage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DareMessage) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

//用户信息请求
type UserInfoReq struct {
	UserId               *int64   `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UserInfoReq) Reset()         { *m = UserInfoReq{} }
func (m *UserInfoReq) String() string { return proto.CompactTextString(m) }
func (*UserInfoReq) ProtoMessage()    {}
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{18}
}
func (m *UserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoReq.Merge(m, src)
}
func (m *UserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoReq proto.InternalMessageInfo

func (m *UserInfoReq) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

//用户信息请求响应
type UserInfoResp struct {
	UserId               *int64   `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Sex                  *int32   `protobuf:"varint,3,opt,name=Sex" json:"Sex,omitempty" bson:"Sex,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,4,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	Coin                 *int64   `protobuf:"varint,5,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	IsTryOne             *bool    `protobuf:"varint,6,opt,name=IsTryOne" json:"IsTryOne,omitempty" bson:"IsTryOne,omitempty"`
	Diamond              *int64   `protobuf:"varint,7,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	Account              *string  `protobuf:"bytes,8,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	IsFirst              *bool    `protobuf:"varint,13,opt,name=IsFirst" json:"IsFirst,omitempty" bson:"IsFirst,omitempty"`
	Types                *int32   `protobuf:"varint,36,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UserInfoResp) Reset()         { *m = UserInfoResp{} }
func (m *UserInfoResp) String() string { return proto.CompactTextString(m) }
func (*UserInfoResp) ProtoMessage()    {}
func (*UserInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{19}
}
func (m *UserInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoResp.Merge(m, src)
}
func (m *UserInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoResp proto.InternalMessageInfo

func (m *UserInfoResp) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *UserInfoResp) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserInfoResp) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *UserInfoResp) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *UserInfoResp) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *UserInfoResp) GetIsTryOne() bool {
	if m != nil && m.IsTryOne != nil {
		return *m.IsTryOne
	}
	return false
}

func (m *UserInfoResp) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *UserInfoResp) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *UserInfoResp) GetIsFirst() bool {
	if m != nil && m.IsFirst != nil {
		return *m.IsFirst
	}
	return false
}

func (m *UserInfoResp) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

//修改硬币
type AddCoinReq struct {
	UserId               *int64   `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Coin                 *int64   `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	SourceType           *int32   `protobuf:"varint,3,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	Diamond              *int64   `protobuf:"varint,4,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddCoinReq) Reset()         { *m = AddCoinReq{} }
func (m *AddCoinReq) String() string { return proto.CompactTextString(m) }
func (*AddCoinReq) ProtoMessage()    {}
func (*AddCoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{20}
}
func (m *AddCoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddCoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCoinReq.Merge(m, src)
}
func (m *AddCoinReq) XXX_Size() int {
	return m.Size()
}
func (m *AddCoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddCoinReq proto.InternalMessageInfo

func (m *AddCoinReq) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AddCoinReq) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *AddCoinReq) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *AddCoinReq) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

type AddCoinResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Coin                 *int64   `protobuf:"varint,3,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddCoinResp) Reset()         { *m = AddCoinResp{} }
func (m *AddCoinResp) String() string { return proto.CompactTextString(m) }
func (*AddCoinResp) ProtoMessage()    {}
func (*AddCoinResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{21}
}
func (m *AddCoinResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCoinResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCoinResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddCoinResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCoinResp.Merge(m, src)
}
func (m *AddCoinResp) XXX_Size() int {
	return m.Size()
}
func (m *AddCoinResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCoinResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddCoinResp proto.InternalMessageInfo

func (m *AddCoinResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *AddCoinResp) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AddCoinResp) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

//修改零钱
type AddGoldReq struct {
	UserId               *int64   `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Coin                 *int64   `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	SourceType           *int32   `protobuf:"varint,3,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddGoldReq) Reset()         { *m = AddGoldReq{} }
func (m *AddGoldReq) String() string { return proto.CompactTextString(m) }
func (*AddGoldReq) ProtoMessage()    {}
func (*AddGoldReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{22}
}
func (m *AddGoldReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGoldReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGoldReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGoldReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGoldReq.Merge(m, src)
}
func (m *AddGoldReq) XXX_Size() int {
	return m.Size()
}
func (m *AddGoldReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGoldReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddGoldReq proto.InternalMessageInfo

func (m *AddGoldReq) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AddGoldReq) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *AddGoldReq) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

type AddGoldResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	UserId               *int64   `protobuf:"varint,2,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Coin                 *int64   `protobuf:"varint,3,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *AddGoldResp) Reset()         { *m = AddGoldResp{} }
func (m *AddGoldResp) String() string { return proto.CompactTextString(m) }
func (*AddGoldResp) ProtoMessage()    {}
func (*AddGoldResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{23}
}
func (m *AddGoldResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGoldResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGoldResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddGoldResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGoldResp.Merge(m, src)
}
func (m *AddGoldResp) XXX_Size() int {
	return m.Size()
}
func (m *AddGoldResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGoldResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddGoldResp proto.InternalMessageInfo

func (m *AddGoldResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *AddGoldResp) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *AddGoldResp) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// 获得的商品
type GetProduct struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	PlayerName           *string  `protobuf:"bytes,2,opt,name=PlayerName" json:"PlayerName,omitempty" bson:"PlayerName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	ProductId            *int64   `protobuf:"varint,4,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	ProductName          *string  `protobuf:"bytes,5,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	Image                *string  `protobuf:"bytes,6,opt,name=Image" json:"Image,omitempty" bson:"Image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetProduct) Reset()         { *m = GetProduct{} }
func (m *GetProduct) String() string { return proto.CompactTextString(m) }
func (*GetProduct) ProtoMessage()    {}
func (*GetProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{24}
}
func (m *GetProduct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProduct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProduct.Merge(m, src)
}
func (m *GetProduct) XXX_Size() int {
	return m.Size()
}
func (m *GetProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProduct.DiscardUnknown(m)
}

var xxx_messageInfo_GetProduct proto.InternalMessageInfo

func (m *GetProduct) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *GetProduct) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *GetProduct) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *GetProduct) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *GetProduct) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *GetProduct) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

// 首页消息播放区
type HomeMessageResp struct {
	DareMessages         []*DareMessage `protobuf:"bytes,1,rep,name=DareMessages" json:"DareMessages,omitempty" bson:"DareMessages,omitempty"`
	GetProducts          []*GetProduct  `protobuf:"bytes,2,rep,name=GetProducts" json:"GetProducts,omitempty" bson:"GetProducts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *HomeMessageResp) Reset()         { *m = HomeMessageResp{} }
func (m *HomeMessageResp) String() string { return proto.CompactTextString(m) }
func (*HomeMessageResp) ProtoMessage()    {}
func (*HomeMessageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{25}
}
func (m *HomeMessageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HomeMessageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HomeMessageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HomeMessageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeMessageResp.Merge(m, src)
}
func (m *HomeMessageResp) XXX_Size() int {
	return m.Size()
}
func (m *HomeMessageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeMessageResp.DiscardUnknown(m)
}

var xxx_messageInfo_HomeMessageResp proto.InternalMessageInfo

func (m *HomeMessageResp) GetDareMessages() []*DareMessage {
	if m != nil {
		return m.DareMessages
	}
	return nil
}

func (m *HomeMessageResp) GetGetProducts() []*GetProduct {
	if m != nil {
		return m.GetProducts
	}
	return nil
}

//获取随机十条商品信息
type RandProductResp struct {
	GetProducts          []*GetProduct `protobuf:"bytes,1,rep,name=GetProducts" json:"GetProducts,omitempty" bson:"GetProducts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *RandProductResp) Reset()         { *m = RandProductResp{} }
func (m *RandProductResp) String() string { return proto.CompactTextString(m) }
func (*RandProductResp) ProtoMessage()    {}
func (*RandProductResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{26}
}
func (m *RandProductResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandProductResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandProductResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandProductResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandProductResp.Merge(m, src)
}
func (m *RandProductResp) XXX_Size() int {
	return m.Size()
}
func (m *RandProductResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RandProductResp.DiscardUnknown(m)
}

var xxx_messageInfo_RandProductResp proto.InternalMessageInfo

func (m *RandProductResp) GetGetProducts() []*GetProduct {
	if m != nil {
		return m.GetProducts
	}
	return nil
}

//获取十条挑战信息
type DareMessageResp struct {
	DareMessages         []*DareMessage `protobuf:"bytes,1,rep,name=DareMessages" json:"DareMessages,omitempty" bson:"DareMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *DareMessageResp) Reset()         { *m = DareMessageResp{} }
func (m *DareMessageResp) String() string { return proto.CompactTextString(m) }
func (*DareMessageResp) ProtoMessage()    {}
func (*DareMessageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{27}
}
func (m *DareMessageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareMessageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareMessageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareMessageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareMessageResp.Merge(m, src)
}
func (m *DareMessageResp) XXX_Size() int {
	return m.Size()
}
func (m *DareMessageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DareMessageResp.DiscardUnknown(m)
}

var xxx_messageInfo_DareMessageResp proto.InternalMessageInfo

func (m *DareMessageResp) GetDareMessages() []*DareMessage {
	if m != nil {
		return m.DareMessages
	}
	return nil
}

// 挑战守护者快捷入口的轮播展示.
type Protector struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	PlayerName           *string  `protobuf:"bytes,2,opt,name=PlayerName" json:"PlayerName,omitempty" bson:"PlayerName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	BoxIds               []int64  `protobuf:"varint,4,rep,name=BoxIds" json:"BoxIds,omitempty" bson:"BoxIds,omitempty"`
	ProtectorTime        *int64   `protobuf:"varint,5,opt,name=ProtectorTime" json:"ProtectorTime,omitempty" bson:"ProtectorTime,omitempty"`
	Coin                 *int64   `protobuf:"varint,6,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Protector) Reset()         { *m = Protector{} }
func (m *Protector) String() string { return proto.CompactTextString(m) }
func (*Protector) ProtoMessage()    {}
func (*Protector) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{28}
}
func (m *Protector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Protector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Protector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protector.Merge(m, src)
}
func (m *Protector) XXX_Size() int {
	return m.Size()
}
func (m *Protector) XXX_DiscardUnknown() {
	xxx_messageInfo_Protector.DiscardUnknown(m)
}

var xxx_messageInfo_Protector proto.InternalMessageInfo

func (m *Protector) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Protector) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *Protector) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *Protector) GetBoxIds() []int64 {
	if m != nil {
		return m.BoxIds
	}
	return nil
}

func (m *Protector) GetProtectorTime() int64 {
	if m != nil && m.ProtectorTime != nil {
		return *m.ProtectorTime
	}
	return 0
}

func (m *Protector) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

// 挑战守护者快捷入口的轮播展示入口.
type ProtectorResp struct {
	Protectors           []*Protector `protobuf:"bytes,1,rep,name=Protectors" json:"Protectors,omitempty" bson:"Protectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *ProtectorResp) Reset()         { *m = ProtectorResp{} }
func (m *ProtectorResp) String() string { return proto.CompactTextString(m) }
func (*ProtectorResp) ProtoMessage()    {}
func (*ProtectorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{29}
}
func (m *ProtectorResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtectorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtectorResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtectorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectorResp.Merge(m, src)
}
func (m *ProtectorResp) XXX_Size() int {
	return m.Size()
}
func (m *ProtectorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectorResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectorResp proto.InternalMessageInfo

func (m *ProtectorResp) GetProtectors() []*Protector {
	if m != nil {
		return m.Protectors
	}
	return nil
}

// 挑战守护者快捷入口的轮播展示.
type ProtectorData struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ProtectorData) Reset()         { *m = ProtectorData{} }
func (m *ProtectorData) String() string { return proto.CompactTextString(m) }
func (*ProtectorData) ProtoMessage()    {}
func (*ProtectorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{30}
}
func (m *ProtectorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtectorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtectorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtectorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectorData.Merge(m, src)
}
func (m *ProtectorData) XXX_Size() int {
	return m.Size()
}
func (m *ProtectorData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectorData.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectorData proto.InternalMessageInfo

func (m *ProtectorData) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *ProtectorData) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

// 挑战守护者快捷入口的轮播展示入口.
type ProtectorDataResp struct {
	Protectors           []*ProtectorData `protobuf:"bytes,1,rep,name=Protectors" json:"Protectors,omitempty" bson:"Protectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" bson:"-"`
}

func (m *ProtectorDataResp) Reset()         { *m = ProtectorDataResp{} }
func (m *ProtectorDataResp) String() string { return proto.CompactTextString(m) }
func (*ProtectorDataResp) ProtoMessage()    {}
func (*ProtectorDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{31}
}
func (m *ProtectorDataResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtectorDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtectorDataResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtectorDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectorDataResp.Merge(m, src)
}
func (m *ProtectorDataResp) XXX_Size() int {
	return m.Size()
}
func (m *ProtectorDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectorDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectorDataResp proto.InternalMessageInfo

func (m *ProtectorDataResp) GetProtectors() []*ProtectorData {
	if m != nil {
		return m.Protectors
	}
	return nil
}

// 最新上线,人气盲盒,欧气爆棚 菜单栏
type Menu struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Menu) Reset()         { *m = Menu{} }
func (m *Menu) String() string { return proto.CompactTextString(m) }
func (*Menu) ProtoMessage()    {}
func (*Menu) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{32}
}
func (m *Menu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Menu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Menu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Menu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Menu.Merge(m, src)
}
func (m *Menu) XXX_Size() int {
	return m.Size()
}
func (m *Menu) XXX_DiscardUnknown() {
	xxx_messageInfo_Menu.DiscardUnknown(m)
}

var xxx_messageInfo_Menu proto.InternalMessageInfo

func (m *Menu) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Menu) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type MenuResp struct {
	Menus                []*Menu  `protobuf:"bytes,1,rep,name=Menus" json:"Menus,omitempty" bson:"Menus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MenuResp) Reset()         { *m = MenuResp{} }
func (m *MenuResp) String() string { return proto.CompactTextString(m) }
func (*MenuResp) ProtoMessage()    {}
func (*MenuResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{33}
}
func (m *MenuResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuResp.Merge(m, src)
}
func (m *MenuResp) XXX_Size() int {
	return m.Size()
}
func (m *MenuResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuResp.DiscardUnknown(m)
}

var xxx_messageInfo_MenuResp proto.InternalMessageInfo

func (m *MenuResp) GetMenus() []*Menu {
	if m != nil {
		return m.Menus
	}
	return nil
}

// 商品品牌
type ProductBrand struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	IsHot                *bool    `protobuf:"varint,4,opt,name=IsHot" json:"IsHot,omitempty" bson:"IsHot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ProductBrand) Reset()         { *m = ProductBrand{} }
func (m *ProductBrand) String() string { return proto.CompactTextString(m) }
func (*ProductBrand) ProtoMessage()    {}
func (*ProductBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{34}
}
func (m *ProductBrand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductBrand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductBrand.Merge(m, src)
}
func (m *ProductBrand) XXX_Size() int {
	return m.Size()
}
func (m *ProductBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductBrand.DiscardUnknown(m)
}

var xxx_messageInfo_ProductBrand proto.InternalMessageInfo

func (m *ProductBrand) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ProductBrand) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ProductBrand) GetIsHot() bool {
	if m != nil && m.IsHot != nil {
		return *m.IsHot
	}
	return false
}

type ProductBrandListResp struct {
	ProductBrandList     []*ProductBrand `protobuf:"bytes,1,rep,name=ProductBrandList" json:"ProductBrandList,omitempty" bson:"ProductBrandList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *ProductBrandListResp) Reset()         { *m = ProductBrandListResp{} }
func (m *ProductBrandListResp) String() string { return proto.CompactTextString(m) }
func (*ProductBrandListResp) ProtoMessage()    {}
func (*ProductBrandListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{35}
}
func (m *ProductBrandListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductBrandListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductBrandListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductBrandListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductBrandListResp.Merge(m, src)
}
func (m *ProductBrandListResp) XXX_Size() int {
	return m.Size()
}
func (m *ProductBrandListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductBrandListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProductBrandListResp proto.InternalMessageInfo

func (m *ProductBrandListResp) GetProductBrandList() []*ProductBrand {
	if m != nil {
		return m.ProductBrandList
	}
	return nil
}

// 盲盒(商品)筛选区
type SearchBoxReq struct {
	Complex              *int32   `protobuf:"varint,1,opt,name=Complex" json:"Complex,omitempty" bson:"Complex,omitempty"`
	Condition            *int32   `protobuf:"varint,2,opt,name=Condition" json:"Condition,omitempty" bson:"Condition,omitempty"`
	ProductStatus        *int32   `protobuf:"varint,3,opt,name=ProductStatus" json:"ProductStatus,omitempty" bson:"ProductStatus,omitempty"`
	MinPrice             *int64   `protobuf:"varint,4,opt,name=MinPrice" json:"MinPrice,omitempty" bson:"MinPrice,omitempty"`
	MaxPrice             *int64   `protobuf:"varint,5,opt,name=MaxPrice" json:"MaxPrice,omitempty" bson:"MaxPrice,omitempty"`
	WishBrandId          []int64  `protobuf:"varint,6,rep,name=WishBrandId" json:"WishBrandId,omitempty" bson:"WishBrandId,omitempty"`
	WishItemTypeId       []int64  `protobuf:"varint,7,rep,name=WishItemTypeId" json:"WishItemTypeId,omitempty" bson:"WishItemTypeId,omitempty"`
	Label                *int32   `protobuf:"varint,10,opt,name=Label" json:"Label,omitempty" bson:"Label,omitempty"`
	Page                 *int32   `protobuf:"varint,8,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,9,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SearchBoxReq) Reset()         { *m = SearchBoxReq{} }
func (m *SearchBoxReq) String() string { return proto.CompactTextString(m) }
func (*SearchBoxReq) ProtoMessage()    {}
func (*SearchBoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{36}
}
func (m *SearchBoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchBoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchBoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchBoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchBoxReq.Merge(m, src)
}
func (m *SearchBoxReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchBoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchBoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchBoxReq proto.InternalMessageInfo

func (m *SearchBoxReq) GetComplex() int32 {
	if m != nil && m.Complex != nil {
		return *m.Complex
	}
	return 0
}

func (m *SearchBoxReq) GetCondition() int32 {
	if m != nil && m.Condition != nil {
		return *m.Condition
	}
	return 0
}

func (m *SearchBoxReq) GetProductStatus() int32 {
	if m != nil && m.ProductStatus != nil {
		return *m.ProductStatus
	}
	return 0
}

func (m *SearchBoxReq) GetMinPrice() int64 {
	if m != nil && m.MinPrice != nil {
		return *m.MinPrice
	}
	return 0
}

func (m *SearchBoxReq) GetMaxPrice() int64 {
	if m != nil && m.MaxPrice != nil {
		return *m.MaxPrice
	}
	return 0
}

func (m *SearchBoxReq) GetWishBrandId() []int64 {
	if m != nil {
		return m.WishBrandId
	}
	return nil
}

func (m *SearchBoxReq) GetWishItemTypeId() []int64 {
	if m != nil {
		return m.WishItemTypeId
	}
	return nil
}

func (m *SearchBoxReq) GetLabel() int32 {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return 0
}

func (m *SearchBoxReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *SearchBoxReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

// 盲盒区列表
type SearchBoxResp struct {
	BoxShowList          []*BoxShow `protobuf:"bytes,1,rep,name=BoxShowList" json:"BoxShowList,omitempty" bson:"BoxShowList,omitempty"`
	Count                *int32     `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *SearchBoxResp) Reset()         { *m = SearchBoxResp{} }
func (m *SearchBoxResp) String() string { return proto.CompactTextString(m) }
func (*SearchBoxResp) ProtoMessage()    {}
func (*SearchBoxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{37}
}
func (m *SearchBoxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchBoxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchBoxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchBoxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchBoxResp.Merge(m, src)
}
func (m *SearchBoxResp) XXX_Size() int {
	return m.Size()
}
func (m *SearchBoxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchBoxResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchBoxResp proto.InternalMessageInfo

func (m *SearchBoxResp) GetBoxShowList() []*BoxShow {
	if m != nil {
		return m.BoxShowList
	}
	return nil
}

func (m *SearchBoxResp) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 品牌列表返回
type BrandListResp struct {
	BrandList            *string  `protobuf:"bytes,1,opt,name=BrandList" json:"BrandList,omitempty" bson:"BrandList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BrandListResp) Reset()         { *m = BrandListResp{} }
func (m *BrandListResp) String() string { return proto.CompactTextString(m) }
func (*BrandListResp) ProtoMessage()    {}
func (*BrandListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{38}
}
func (m *BrandListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandListResp.Merge(m, src)
}
func (m *BrandListResp) XXX_Size() int {
	return m.Size()
}
func (m *BrandListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandListResp.DiscardUnknown(m)
}

var xxx_messageInfo_BrandListResp proto.InternalMessageInfo

func (m *BrandListResp) GetBrandList() string {
	if m != nil && m.BrandList != nil {
		return *m.BrandList
	}
	return ""
}

// 商品类别
type TypeListResp struct {
	TypeList             *string  `protobuf:"bytes,1,opt,name=TypeList" json:"TypeList,omitempty" bson:"TypeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TypeListResp) Reset()         { *m = TypeListResp{} }
func (m *TypeListResp) String() string { return proto.CompactTextString(m) }
func (*TypeListResp) ProtoMessage()    {}
func (*TypeListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{39}
}
func (m *TypeListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeListResp.Merge(m, src)
}
func (m *TypeListResp) XXX_Size() int {
	return m.Size()
}
func (m *TypeListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeListResp.DiscardUnknown(m)
}

var xxx_messageInfo_TypeListResp proto.InternalMessageInfo

func (m *TypeListResp) GetTypeList() string {
	if m != nil && m.TypeList != nil {
		return *m.TypeList
	}
	return ""
}

// ====================挑战赛主界面==========================
// 挑战赛主界面-消息播放区
type DareRecommendResp struct {
	Protectors           []*Protector `protobuf:"bytes,1,rep,name=Protectors" json:"Protectors,omitempty" bson:"Protectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *DareRecommendResp) Reset()         { *m = DareRecommendResp{} }
func (m *DareRecommendResp) String() string { return proto.CompactTextString(m) }
func (*DareRecommendResp) ProtoMessage()    {}
func (*DareRecommendResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{40}
}
func (m *DareRecommendResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareRecommendResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareRecommendResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareRecommendResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareRecommendResp.Merge(m, src)
}
func (m *DareRecommendResp) XXX_Size() int {
	return m.Size()
}
func (m *DareRecommendResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DareRecommendResp.DiscardUnknown(m)
}

var xxx_messageInfo_DareRecommendResp proto.InternalMessageInfo

func (m *DareRecommendResp) GetProtectors() []*Protector {
	if m != nil {
		return m.Protectors
	}
	return nil
}

// 排行榜数据
type Ranking struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,3,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	ProtectorCount       *int64   `protobuf:"varint,4,opt,name=ProtectorCount" json:"ProtectorCount,omitempty" bson:"ProtectorCount,omitempty"`
	CoinCount            *int64   `protobuf:"varint,5,opt,name=CoinCount" json:"CoinCount,omitempty" bson:"CoinCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *Ranking) Reset()         { *m = Ranking{} }
func (m *Ranking) String() string { return proto.CompactTextString(m) }
func (*Ranking) ProtoMessage()    {}
func (*Ranking) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{41}
}
func (m *Ranking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ranking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ranking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ranking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ranking.Merge(m, src)
}
func (m *Ranking) XXX_Size() int {
	return m.Size()
}
func (m *Ranking) XXX_DiscardUnknown() {
	xxx_messageInfo_Ranking.DiscardUnknown(m)
}

var xxx_messageInfo_Ranking proto.InternalMessageInfo

func (m *Ranking) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Ranking) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Ranking) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *Ranking) GetProtectorCount() int64 {
	if m != nil && m.ProtectorCount != nil {
		return *m.ProtectorCount
	}
	return 0
}

func (m *Ranking) GetCoinCount() int64 {
	if m != nil && m.CoinCount != nil {
		return *m.CoinCount
	}
	return 0
}

// 排行榜列表
type RankingResp struct {
	Rankings             []*Ranking `protobuf:"bytes,1,rep,name=Rankings" json:"Rankings,omitempty" bson:"Rankings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *RankingResp) Reset()         { *m = RankingResp{} }
func (m *RankingResp) String() string { return proto.CompactTextString(m) }
func (*RankingResp) ProtoMessage()    {}
func (*RankingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{42}
}
func (m *RankingResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankingResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankingResp.Merge(m, src)
}
func (m *RankingResp) XXX_Size() int {
	return m.Size()
}
func (m *RankingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RankingResp.DiscardUnknown(m)
}

var xxx_messageInfo_RankingResp proto.InternalMessageInfo

func (m *RankingResp) GetRankings() []*Ranking {
	if m != nil {
		return m.Rankings
	}
	return nil
}

// 我的战绩成功数和获得总硬币数
type MyRecordResp struct {
	DareCount            *int32   `protobuf:"varint,1,opt,name=DareCount" json:"DareCount,omitempty" bson:"DareCount,omitempty"`
	TotalCoinCount       *int64   `protobuf:"varint,2,opt,name=TotalCoinCount" json:"TotalCoinCount,omitempty" bson:"TotalCoinCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MyRecordResp) Reset()         { *m = MyRecordResp{} }
func (m *MyRecordResp) String() string { return proto.CompactTextString(m) }
func (*MyRecordResp) ProtoMessage()    {}
func (*MyRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{43}
}
func (m *MyRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyRecordResp.Merge(m, src)
}
func (m *MyRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *MyRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MyRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_MyRecordResp proto.InternalMessageInfo

func (m *MyRecordResp) GetDareCount() int32 {
	if m != nil && m.DareCount != nil {
		return *m.DareCount
	}
	return 0
}

func (m *MyRecordResp) GetTotalCoinCount() int64 {
	if m != nil && m.TotalCoinCount != nil {
		return *m.TotalCoinCount
	}
	return 0
}

// 我的战绩
type MyDare struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	Image                *string  `protobuf:"bytes,2,opt,name=Image" json:"Image,omitempty" bson:"Image,omitempty"`
	ProtectorTime        *int64   `protobuf:"varint,3,opt,name=ProtectorTime" json:"ProtectorTime,omitempty" bson:"ProtectorTime,omitempty"`
	CoinCount            *int64   `protobuf:"varint,4,opt,name=CoinCount" json:"CoinCount,omitempty" bson:"CoinCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MyDare) Reset()         { *m = MyDare{} }
func (m *MyDare) String() string { return proto.CompactTextString(m) }
func (*MyDare) ProtoMessage()    {}
func (*MyDare) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{44}
}
func (m *MyDare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyDare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyDare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyDare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyDare.Merge(m, src)
}
func (m *MyDare) XXX_Size() int {
	return m.Size()
}
func (m *MyDare) XXX_DiscardUnknown() {
	xxx_messageInfo_MyDare.DiscardUnknown(m)
}

var xxx_messageInfo_MyDare proto.InternalMessageInfo

func (m *MyDare) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *MyDare) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *MyDare) GetProtectorTime() int64 {
	if m != nil && m.ProtectorTime != nil {
		return *m.ProtectorTime
	}
	return 0
}

func (m *MyDare) GetCoinCount() int64 {
	if m != nil && m.CoinCount != nil {
		return *m.CoinCount
	}
	return 0
}

//我的战绩请求
type MyDareReq struct {
	Page                 *int32   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *MyDareReq) Reset()         { *m = MyDareReq{} }
func (m *MyDareReq) String() string { return proto.CompactTextString(m) }
func (*MyDareReq) ProtoMessage()    {}
func (*MyDareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{45}
}
func (m *MyDareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyDareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyDareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyDareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyDareReq.Merge(m, src)
}
func (m *MyDareReq) XXX_Size() int {
	return m.Size()
}
func (m *MyDareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MyDareReq.DiscardUnknown(m)
}

var xxx_messageInfo_MyDareReq proto.InternalMessageInfo

func (m *MyDareReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *MyDareReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//我的战绩响应
type MyDareResp struct {
	Dares                []*MyDare `protobuf:"bytes,1,rep,name=Dares" json:"Dares,omitempty" bson:"Dares,omitempty"`
	Count                *int32    `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" bson:"-"`
	XXX_unrecognized     []byte    `json:"-" bson:"-"`
	XXX_sizecache        int32     `json:"-" bson:"-"`
}

func (m *MyDareResp) Reset()         { *m = MyDareResp{} }
func (m *MyDareResp) String() string { return proto.CompactTextString(m) }
func (*MyDareResp) ProtoMessage()    {}
func (*MyDareResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{46}
}
func (m *MyDareResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyDareResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyDareResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyDareResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyDareResp.Merge(m, src)
}
func (m *MyDareResp) XXX_Size() int {
	return m.Size()
}
func (m *MyDareResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MyDareResp.DiscardUnknown(m)
}

var xxx_messageInfo_MyDareResp proto.InternalMessageInfo

func (m *MyDareResp) GetDares() []*MyDare {
	if m != nil {
		return m.Dares
	}
	return nil
}

func (m *MyDareResp) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// ====================抽奖界面==========================
// 盲盒信息
type BoxReq struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BoxReq) Reset()         { *m = BoxReq{} }
func (m *BoxReq) String() string { return proto.CompactTextString(m) }
func (*BoxReq) ProtoMessage()    {}
func (*BoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{47}
}
func (m *BoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxReq.Merge(m, src)
}
func (m *BoxReq) XXX_Size() int {
	return m.Size()
}
func (m *BoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_BoxReq proto.InternalMessageInfo

func (m *BoxReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *BoxReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type BoxResp struct {
	BoxId                *int64     `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	ProtectorId          *int64     `protobuf:"varint,2,opt,name=ProtectorId" json:"ProtectorId,omitempty" bson:"ProtectorId,omitempty"`
	Protector            *string    `protobuf:"bytes,3,opt,name=Protector" json:"Protector,omitempty" bson:"Protector,omitempty"`
	ProtectorHeadUrl     *string    `protobuf:"bytes,4,opt,name=ProtectorHeadUrl" json:"ProtectorHeadUrl,omitempty" bson:"ProtectorHeadUrl,omitempty"`
	ProtectorTime        *int64     `protobuf:"varint,5,opt,name=ProtectorTime" json:"ProtectorTime,omitempty" bson:"ProtectorTime,omitempty"`
	ProductList          []*Product `protobuf:"bytes,6,rep,name=ProductList" json:"ProductList,omitempty" bson:"ProductList,omitempty"`
	Status               *int32     `protobuf:"varint,12,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	IsCollection         *bool      `protobuf:"varint,13,opt,name=IsCollection" json:"IsCollection,omitempty" bson:"IsCollection,omitempty"`
	BoxPrice             *int64     `protobuf:"varint,14,opt,name=BoxPrice" json:"BoxPrice,omitempty" bson:"BoxPrice,omitempty"`
	BoxIcon              *string    `protobuf:"bytes,15,opt,name=BoxIcon" json:"BoxIcon,omitempty" bson:"BoxIcon,omitempty"`
	ProductStatus        *int32     `protobuf:"varint,16,opt,name=ProductStatus" json:"ProductStatus,omitempty" bson:"ProductStatus,omitempty"`
	CreateTime           *int64     `protobuf:"varint,17,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *BoxResp) Reset()         { *m = BoxResp{} }
func (m *BoxResp) String() string { return proto.CompactTextString(m) }
func (*BoxResp) ProtoMessage()    {}
func (*BoxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{48}
}
func (m *BoxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxResp.Merge(m, src)
}
func (m *BoxResp) XXX_Size() int {
	return m.Size()
}
func (m *BoxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxResp.DiscardUnknown(m)
}

var xxx_messageInfo_BoxResp proto.InternalMessageInfo

func (m *BoxResp) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *BoxResp) GetProtectorId() int64 {
	if m != nil && m.ProtectorId != nil {
		return *m.ProtectorId
	}
	return 0
}

func (m *BoxResp) GetProtector() string {
	if m != nil && m.Protector != nil {
		return *m.Protector
	}
	return ""
}

func (m *BoxResp) GetProtectorHeadUrl() string {
	if m != nil && m.ProtectorHeadUrl != nil {
		return *m.ProtectorHeadUrl
	}
	return ""
}

func (m *BoxResp) GetProtectorTime() int64 {
	if m != nil && m.ProtectorTime != nil {
		return *m.ProtectorTime
	}
	return 0
}

func (m *BoxResp) GetProductList() []*Product {
	if m != nil {
		return m.ProductList
	}
	return nil
}

func (m *BoxResp) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *BoxResp) GetIsCollection() bool {
	if m != nil && m.IsCollection != nil {
		return *m.IsCollection
	}
	return false
}

func (m *BoxResp) GetBoxPrice() int64 {
	if m != nil && m.BoxPrice != nil {
		return *m.BoxPrice
	}
	return 0
}

func (m *BoxResp) GetBoxIcon() string {
	if m != nil && m.BoxIcon != nil {
		return *m.BoxIcon
	}
	return ""
}

func (m *BoxResp) GetProductStatus() int32 {
	if m != nil && m.ProductStatus != nil {
		return *m.ProductStatus
	}
	return 0
}

func (m *BoxResp) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type DareReq struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DareReq) Reset()         { *m = DareReq{} }
func (m *DareReq) String() string { return proto.CompactTextString(m) }
func (*DareReq) ProtoMessage()    {}
func (*DareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{49}
}
func (m *DareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareReq.Merge(m, src)
}
func (m *DareReq) XXX_Size() int {
	return m.Size()
}
func (m *DareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DareReq.DiscardUnknown(m)
}

var xxx_messageInfo_DareReq proto.InternalMessageInfo

func (m *DareReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

// xxx发起了挑战
type WhoDare struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	IsSuccess            *bool    `protobuf:"varint,3,opt,name=IsSuccess" json:"IsSuccess,omitempty" bson:"IsSuccess,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,4,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	ProtectorTime        *int64   `protobuf:"varint,5,opt,name=ProtectorTime" json:"ProtectorTime,omitempty" bson:"ProtectorTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WhoDare) Reset()         { *m = WhoDare{} }
func (m *WhoDare) String() string { return proto.CompactTextString(m) }
func (*WhoDare) ProtoMessage()    {}
func (*WhoDare) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{50}
}
func (m *WhoDare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhoDare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhoDare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhoDare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoDare.Merge(m, src)
}
func (m *WhoDare) XXX_Size() int {
	return m.Size()
}
func (m *WhoDare) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoDare.DiscardUnknown(m)
}

var xxx_messageInfo_WhoDare proto.InternalMessageInfo

func (m *WhoDare) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WhoDare) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WhoDare) GetIsSuccess() bool {
	if m != nil && m.IsSuccess != nil {
		return *m.IsSuccess
	}
	return false
}

func (m *WhoDare) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *WhoDare) GetProtectorTime() int64 {
	if m != nil && m.ProtectorTime != nil {
		return *m.ProtectorTime
	}
	return 0
}

type DareResp struct {
	Dares                []*WhoDare `protobuf:"bytes,1,rep,name=Dares" json:"Dares,omitempty" bson:"Dares,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *DareResp) Reset()         { *m = DareResp{} }
func (m *DareResp) String() string { return proto.CompactTextString(m) }
func (*DareResp) ProtoMessage()    {}
func (*DareResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{51}
}
func (m *DareResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareResp.Merge(m, src)
}
func (m *DareResp) XXX_Size() int {
	return m.Size()
}
func (m *DareResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DareResp.DiscardUnknown(m)
}

var xxx_messageInfo_DareResp proto.InternalMessageInfo

func (m *DareResp) GetDares() []*WhoDare {
	if m != nil {
		return m.Dares
	}
	return nil
}

// 挑战记录
type DareRecordReq struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	Page                 *int32   `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DareRecordReq) Reset()         { *m = DareRecordReq{} }
func (m *DareRecordReq) String() string { return proto.CompactTextString(m) }
func (*DareRecordReq) ProtoMessage()    {}
func (*DareRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{52}
}
func (m *DareRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareRecordReq.Merge(m, src)
}
func (m *DareRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *DareRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DareRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_DareRecordReq proto.InternalMessageInfo

func (m *DareRecordReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *DareRecordReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DareRecordReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *DareRecordReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

//盲盒挑战记录 wish_log
type WishLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	DareId               *int64   `protobuf:"varint,3,opt,name=DareId" json:"DareId,omitempty" bson:"DareId,omitempty"`
	DareName             *string  `protobuf:"bytes,4,opt,name=DareName" json:"DareName,omitempty" bson:"DareName,omitempty"`
	BeDareId             *int64   `protobuf:"varint,5,opt,name=BeDareId" json:"BeDareId,omitempty" bson:"BeDareId,omitempty"`
	BeDareName           *string  `protobuf:"bytes,6,opt,name=BeDareName" json:"BeDareName,omitempty" bson:"BeDareName,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	Result               *bool    `protobuf:"varint,8,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	ChallengeItemId      *int64   `protobuf:"varint,9,opt,name=ChallengeItemId" json:"ChallengeItemId,omitempty" bson:"ChallengeItemId,omitempty"`
	DareHeadIcon         *string  `protobuf:"bytes,10,opt,name=DareHeadIcon" json:"DareHeadIcon,omitempty" bson:"DareHeadIcon,omitempty"`
	DefendTime           *int64   `protobuf:"varint,11,opt,name=DefendTime" json:"DefendTime,omitempty" bson:"DefendTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishLog) Reset()         { *m = WishLog{} }
func (m *WishLog) String() string { return proto.CompactTextString(m) }
func (*WishLog) ProtoMessage()    {}
func (*WishLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{53}
}
func (m *WishLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishLog.Merge(m, src)
}
func (m *WishLog) XXX_Size() int {
	return m.Size()
}
func (m *WishLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishLog proto.InternalMessageInfo

func (m *WishLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishLog) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishLog) GetDareId() int64 {
	if m != nil && m.DareId != nil {
		return *m.DareId
	}
	return 0
}

func (m *WishLog) GetDareName() string {
	if m != nil && m.DareName != nil {
		return *m.DareName
	}
	return ""
}

func (m *WishLog) GetBeDareId() int64 {
	if m != nil && m.BeDareId != nil {
		return *m.BeDareId
	}
	return 0
}

func (m *WishLog) GetBeDareName() string {
	if m != nil && m.BeDareName != nil {
		return *m.BeDareName
	}
	return ""
}

func (m *WishLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishLog) GetResult() bool {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return false
}

func (m *WishLog) GetChallengeItemId() int64 {
	if m != nil && m.ChallengeItemId != nil {
		return *m.ChallengeItemId
	}
	return 0
}

func (m *WishLog) GetDareHeadIcon() string {
	if m != nil && m.DareHeadIcon != nil {
		return *m.DareHeadIcon
	}
	return ""
}

func (m *WishLog) GetDefendTime() int64 {
	if m != nil && m.DefendTime != nil {
		return *m.DefendTime
	}
	return 0
}

//盲盒挑战占领时长表 wish_occupied
type WishOccupied struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,2,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	NickName             *string  `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,5,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,6,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,8,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	OccupiedTime         *int64   `protobuf:"varint,9,opt,name=OccupiedTime" json:"OccupiedTime,omitempty" bson:"OccupiedTime,omitempty"`
	Status               *int32   `protobuf:"varint,10,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CoinNum              *int32   `protobuf:"varint,11,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishOccupied) Reset()         { *m = WishOccupied{} }
func (m *WishOccupied) String() string { return proto.CompactTextString(m) }
func (*WishOccupied) ProtoMessage()    {}
func (*WishOccupied) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{54}
}
func (m *WishOccupied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishOccupied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishOccupied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishOccupied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishOccupied.Merge(m, src)
}
func (m *WishOccupied) XXX_Size() int {
	return m.Size()
}
func (m *WishOccupied) XXX_DiscardUnknown() {
	xxx_messageInfo_WishOccupied.DiscardUnknown(m)
}

var xxx_messageInfo_WishOccupied proto.InternalMessageInfo

func (m *WishOccupied) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishOccupied) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

func (m *WishOccupied) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *WishOccupied) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *WishOccupied) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishOccupied) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *WishOccupied) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *WishOccupied) GetOccupiedTime() int64 {
	if m != nil && m.OccupiedTime != nil {
		return *m.OccupiedTime
	}
	return 0
}

func (m *WishOccupied) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishOccupied) GetCoinNum() int32 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

//盲盒守护者固定区信息
type DefenderMsg struct {
	HeadUrl              *string  `protobuf:"bytes,1,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	OccupiedTime         *int64   `protobuf:"varint,2,opt,name=OccupiedTime" json:"OccupiedTime,omitempty" bson:"OccupiedTime,omitempty"`
	CoinNum              *int32   `protobuf:"varint,3,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	CreateTime           *int64   `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DefenderMsg) Reset()         { *m = DefenderMsg{} }
func (m *DefenderMsg) String() string { return proto.CompactTextString(m) }
func (*DefenderMsg) ProtoMessage()    {}
func (*DefenderMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{55}
}
func (m *DefenderMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefenderMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefenderMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefenderMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefenderMsg.Merge(m, src)
}
func (m *DefenderMsg) XXX_Size() int {
	return m.Size()
}
func (m *DefenderMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DefenderMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DefenderMsg proto.InternalMessageInfo

func (m *DefenderMsg) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *DefenderMsg) GetOccupiedTime() int64 {
	if m != nil && m.OccupiedTime != nil {
		return *m.OccupiedTime
	}
	return 0
}

func (m *DefenderMsg) GetCoinNum() int32 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

func (m *DefenderMsg) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

//盲盒守护者固定区信息响应
type DefenderMsgResp struct {
	Msg                  []*DefenderMsg `protobuf:"bytes,1,rep,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *DefenderMsgResp) Reset()         { *m = DefenderMsgResp{} }
func (m *DefenderMsgResp) String() string { return proto.CompactTextString(m) }
func (*DefenderMsgResp) ProtoMessage()    {}
func (*DefenderMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{56}
}
func (m *DefenderMsgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefenderMsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefenderMsgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefenderMsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefenderMsgResp.Merge(m, src)
}
func (m *DefenderMsgResp) XXX_Size() int {
	return m.Size()
}
func (m *DefenderMsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DefenderMsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_DefenderMsgResp proto.InternalMessageInfo

func (m *DefenderMsgResp) GetMsg() []*DefenderMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

//获取许愿款用户数据
type GotWishPlayer struct {
	HeadUrl              *string  `protobuf:"bytes,1,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	NickName             *string  `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	ProductIcon          *string  `protobuf:"bytes,3,opt,name=ProductIcon" json:"ProductIcon,omitempty" bson:"ProductIcon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GotWishPlayer) Reset()         { *m = GotWishPlayer{} }
func (m *GotWishPlayer) String() string { return proto.CompactTextString(m) }
func (*GotWishPlayer) ProtoMessage()    {}
func (*GotWishPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{57}
}
func (m *GotWishPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GotWishPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GotWishPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GotWishPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GotWishPlayer.Merge(m, src)
}
func (m *GotWishPlayer) XXX_Size() int {
	return m.Size()
}
func (m *GotWishPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_GotWishPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_GotWishPlayer proto.InternalMessageInfo

func (m *GotWishPlayer) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *GotWishPlayer) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *GotWishPlayer) GetProductIcon() string {
	if m != nil && m.ProductIcon != nil {
		return *m.ProductIcon
	}
	return ""
}

//获取许愿款用户响应
type GotWishPlayerResp struct {
	Msg                  []*GotWishPlayer `protobuf:"bytes,1,rep,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" bson:"-"`
}

func (m *GotWishPlayerResp) Reset()         { *m = GotWishPlayerResp{} }
func (m *GotWishPlayerResp) String() string { return proto.CompactTextString(m) }
func (*GotWishPlayerResp) ProtoMessage()    {}
func (*GotWishPlayerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{58}
}
func (m *GotWishPlayerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GotWishPlayerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GotWishPlayerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GotWishPlayerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GotWishPlayerResp.Merge(m, src)
}
func (m *GotWishPlayerResp) XXX_Size() int {
	return m.Size()
}
func (m *GotWishPlayerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GotWishPlayerResp.DiscardUnknown(m)
}

var xxx_messageInfo_GotWishPlayerResp proto.InternalMessageInfo

func (m *GotWishPlayerResp) GetMsg() []*GotWishPlayer {
	if m != nil {
		return m.Msg
	}
	return nil
}

// 挑战记录返回
type DareRecordResp struct {
	WishLogList          []*WishLog      `protobuf:"bytes,1,rep,name=WishLogList" json:"WishLogList,omitempty" bson:"WishLogList,omitempty"`
	WishOccupiedList     []*WishOccupied `protobuf:"bytes,2,rep,name=WishOccupiedList" json:"WishOccupiedList,omitempty" bson:"WishOccupiedList,omitempty"`
	WishLogCount         *int32          `protobuf:"varint,3,opt,name=WishLogCount" json:"WishLogCount,omitempty" bson:"WishLogCount,omitempty"`
	WishOccupiedCount    *int32          `protobuf:"varint,4,opt,name=WishOccupiedCount" json:"WishOccupiedCount,omitempty" bson:"WishOccupiedCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *DareRecordResp) Reset()         { *m = DareRecordResp{} }
func (m *DareRecordResp) String() string { return proto.CompactTextString(m) }
func (*DareRecordResp) ProtoMessage()    {}
func (*DareRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{59}
}
func (m *DareRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DareRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DareRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DareRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DareRecordResp.Merge(m, src)
}
func (m *DareRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *DareRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DareRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_DareRecordResp proto.InternalMessageInfo

func (m *DareRecordResp) GetWishLogList() []*WishLog {
	if m != nil {
		return m.WishLogList
	}
	return nil
}

func (m *DareRecordResp) GetWishOccupiedList() []*WishOccupied {
	if m != nil {
		return m.WishOccupiedList
	}
	return nil
}

func (m *DareRecordResp) GetWishLogCount() int32 {
	if m != nil && m.WishLogCount != nil {
		return *m.WishLogCount
	}
	return 0
}

func (m *DareRecordResp) GetWishOccupiedCount() int32 {
	if m != nil && m.WishOccupiedCount != nil {
		return *m.WishOccupiedCount
	}
	return 0
}

// 商品详情请求
type ProductDetailReq struct {
	ProductId            *int64   `protobuf:"varint,1,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ProductDetailReq) Reset()         { *m = ProductDetailReq{} }
func (m *ProductDetailReq) String() string { return proto.CompactTextString(m) }
func (*ProductDetailReq) ProtoMessage()    {}
func (*ProductDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{60}
}
func (m *ProductDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductDetailReq.Merge(m, src)
}
func (m *ProductDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *ProductDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProductDetailReq proto.InternalMessageInfo

func (m *ProductDetailReq) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

// 商品详情
type ProductDetail struct {
	ProductId            *int64   `protobuf:"varint,1,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	ProductName          *string  `protobuf:"bytes,2,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	Image                *string  `protobuf:"bytes,3,opt,name=Image" json:"Image,omitempty" bson:"Image,omitempty"`
	ProductType          *int32   `protobuf:"varint,4,opt,name=ProductType" json:"ProductType,omitempty" bson:"ProductType,omitempty"`
	Desc                 *string  `protobuf:"bytes,5,opt,name=Desc" json:"Desc,omitempty" bson:"Desc,omitempty"`
	Material             *string  `protobuf:"bytes,6,opt,name=material" json:"material,omitempty" bson:"material,omitempty"`
	Long                 *int64   `protobuf:"varint,7,opt,name=Long" json:"Long,omitempty" bson:"Long,omitempty"`
	Width                *int64   `protobuf:"varint,8,opt,name=Width" json:"Width,omitempty" bson:"Width,omitempty"`
	High                 *int64   `protobuf:"varint,9,opt,name=High" json:"High,omitempty" bson:"High,omitempty"`
	Price                *int64   `protobuf:"varint,10,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ProductDetail) Reset()         { *m = ProductDetail{} }
func (m *ProductDetail) String() string { return proto.CompactTextString(m) }
func (*ProductDetail) ProtoMessage()    {}
func (*ProductDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{61}
}
func (m *ProductDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductDetail.Merge(m, src)
}
func (m *ProductDetail) XXX_Size() int {
	return m.Size()
}
func (m *ProductDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ProductDetail proto.InternalMessageInfo

func (m *ProductDetail) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *ProductDetail) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *ProductDetail) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *ProductDetail) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *ProductDetail) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

func (m *ProductDetail) GetMaterial() string {
	if m != nil && m.Material != nil {
		return *m.Material
	}
	return ""
}

func (m *ProductDetail) GetLong() int64 {
	if m != nil && m.Long != nil {
		return *m.Long
	}
	return 0
}

func (m *ProductDetail) GetWidth() int64 {
	if m != nil && m.Width != nil {
		return *m.Width
	}
	return 0
}

func (m *ProductDetail) GetHigh() int64 {
	if m != nil && m.High != nil {
		return *m.High
	}
	return 0
}

func (m *ProductDetail) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

// 盲盒商品详情响应
type BoxProductResp struct {
	ProductList          []*ProductDetail `protobuf:"bytes,1,rep,name=ProductList" json:"ProductList,omitempty" bson:"ProductList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" bson:"-"`
}

func (m *BoxProductResp) Reset()         { *m = BoxProductResp{} }
func (m *BoxProductResp) String() string { return proto.CompactTextString(m) }
func (*BoxProductResp) ProtoMessage()    {}
func (*BoxProductResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{62}
}
func (m *BoxProductResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxProductResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxProductResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxProductResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxProductResp.Merge(m, src)
}
func (m *BoxProductResp) XXX_Size() int {
	return m.Size()
}
func (m *BoxProductResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxProductResp.DiscardUnknown(m)
}

var xxx_messageInfo_BoxProductResp proto.InternalMessageInfo

func (m *BoxProductResp) GetProductList() []*ProductDetail {
	if m != nil {
		return m.ProductList
	}
	return nil
}

// 许愿/修改愿望
type WishReq struct {
	BoxId                *int64   `protobuf:"varint,1,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	ProductId            *int64   `protobuf:"varint,2,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	OpType               *int32   `protobuf:"varint,3,opt,name=OpType" json:"OpType,omitempty" bson:"OpType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishReq) Reset()         { *m = WishReq{} }
func (m *WishReq) String() string { return proto.CompactTextString(m) }
func (*WishReq) ProtoMessage()    {}
func (*WishReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{63}
}
func (m *WishReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishReq.Merge(m, src)
}
func (m *WishReq) XXX_Size() int {
	return m.Size()
}
func (m *WishReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WishReq.DiscardUnknown(m)
}

var xxx_messageInfo_WishReq proto.InternalMessageInfo

func (m *WishReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *WishReq) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *WishReq) GetOpType() int32 {
	if m != nil && m.OpType != nil {
		return *m.OpType
	}
	return 0
}

type WishResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishResp) Reset()         { *m = WishResp{} }
func (m *WishResp) String() string { return proto.CompactTextString(m) }
func (*WishResp) ProtoMessage()    {}
func (*WishResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{64}
}
func (m *WishResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishResp.Merge(m, src)
}
func (m *WishResp) XXX_Size() int {
	return m.Size()
}
func (m *WishResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WishResp.DiscardUnknown(m)
}

var xxx_messageInfo_WishResp proto.InternalMessageInfo

func (m *WishResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type PostageResp struct {
	Postage1             *int32   `protobuf:"varint,1,opt,name=Postage1" json:"Postage1,omitempty" bson:"Postage1,omitempty"`
	Postage2             *int32   `protobuf:"varint,2,opt,name=Postage2" json:"Postage2,omitempty" bson:"Postage2,omitempty"`
	Postage3             *int32   `protobuf:"varint,3,opt,name=Postage3" json:"Postage3,omitempty" bson:"Postage3,omitempty"`
	RemoteAreaList       []string `protobuf:"bytes,4,rep,name=RemoteAreaList" json:"RemoteAreaList,omitempty" bson:"RemoteAreaList,omitempty"`
	FreeNumber           *int32   `protobuf:"varint,5,opt,name=FreeNumber" json:"FreeNumber,omitempty" bson:"FreeNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PostageResp) Reset()         { *m = PostageResp{} }
func (m *PostageResp) String() string { return proto.CompactTextString(m) }
func (*PostageResp) ProtoMessage()    {}
func (*PostageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{65}
}
func (m *PostageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostageResp.Merge(m, src)
}
func (m *PostageResp) XXX_Size() int {
	return m.Size()
}
func (m *PostageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PostageResp.DiscardUnknown(m)
}

var xxx_messageInfo_PostageResp proto.InternalMessageInfo

func (m *PostageResp) GetPostage1() int32 {
	if m != nil && m.Postage1 != nil {
		return *m.Postage1
	}
	return 0
}

func (m *PostageResp) GetPostage2() int32 {
	if m != nil && m.Postage2 != nil {
		return *m.Postage2
	}
	return 0
}

func (m *PostageResp) GetPostage3() int32 {
	if m != nil && m.Postage3 != nil {
		return *m.Postage3
	}
	return 0
}

func (m *PostageResp) GetRemoteAreaList() []string {
	if m != nil {
		return m.RemoteAreaList
	}
	return nil
}

func (m *PostageResp) GetFreeNumber() int32 {
	if m != nil && m.FreeNumber != nil {
		return *m.FreeNumber
	}
	return 0
}

// 发起挑战
type DoDareReq struct {
	DareType             *int32   `protobuf:"varint,2,opt,name=DareType" json:"DareType,omitempty" bson:"DareType,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,3,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DoDareReq) Reset()         { *m = DoDareReq{} }
func (m *DoDareReq) String() string { return proto.CompactTextString(m) }
func (*DoDareReq) ProtoMessage()    {}
func (*DoDareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{66}
}
func (m *DoDareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoDareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoDareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoDareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoDareReq.Merge(m, src)
}
func (m *DoDareReq) XXX_Size() int {
	return m.Size()
}
func (m *DoDareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoDareReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoDareReq proto.InternalMessageInfo

func (m *DoDareReq) GetDareType() int32 {
	if m != nil && m.DareType != nil {
		return *m.DareType
	}
	return 0
}

func (m *DoDareReq) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

type DoDareResp struct {
	ProductId            *int64   `protobuf:"varint,1,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	ProductName          *string  `protobuf:"bytes,2,opt,name=ProductName" json:"ProductName,omitempty" bson:"ProductName,omitempty"`
	Image                *string  `protobuf:"bytes,3,opt,name=Image" json:"Image,omitempty" bson:"Image,omitempty"`
	ProductType          *int32   `protobuf:"varint,4,opt,name=ProductType" json:"ProductType,omitempty" bson:"ProductType,omitempty"`
	IsLucky              *bool    `protobuf:"varint,5,opt,name=IsLucky" json:"IsLucky,omitempty" bson:"IsLucky,omitempty"`
	IsOnce               *bool    `protobuf:"varint,6,opt,name=IsOnce" json:"IsOnce,omitempty" bson:"IsOnce,omitempty"`
	Status               *int32   `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	ForecastTime         *int64   `protobuf:"varint,8,opt,name=ForecastTime" json:"ForecastTime,omitempty" bson:"ForecastTime,omitempty"`
	PlayerWishItemId     *int64   `protobuf:"varint,9,opt,name=PlayerWishItemId" json:"PlayerWishItemId,omitempty" bson:"PlayerWishItemId,omitempty"`
	ProductPrice         *int64   `protobuf:"varint,10,opt,name=ProductPrice" json:"ProductPrice,omitempty" bson:"ProductPrice,omitempty"`
	ProductDiamond       *int64   `protobuf:"varint,11,opt,name=ProductDiamond" json:"ProductDiamond,omitempty" bson:"ProductDiamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DoDareResp) Reset()         { *m = DoDareResp{} }
func (m *DoDareResp) String() string { return proto.CompactTextString(m) }
func (*DoDareResp) ProtoMessage()    {}
func (*DoDareResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{67}
}
func (m *DoDareResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoDareResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoDareResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoDareResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoDareResp.Merge(m, src)
}
func (m *DoDareResp) XXX_Size() int {
	return m.Size()
}
func (m *DoDareResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DoDareResp.DiscardUnknown(m)
}

var xxx_messageInfo_DoDareResp proto.InternalMessageInfo

func (m *DoDareResp) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *DoDareResp) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *DoDareResp) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *DoDareResp) GetProductType() int32 {
	if m != nil && m.ProductType != nil {
		return *m.ProductType
	}
	return 0
}

func (m *DoDareResp) GetIsLucky() bool {
	if m != nil && m.IsLucky != nil {
		return *m.IsLucky
	}
	return false
}

func (m *DoDareResp) GetIsOnce() bool {
	if m != nil && m.IsOnce != nil {
		return *m.IsOnce
	}
	return false
}

func (m *DoDareResp) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DoDareResp) GetForecastTime() int64 {
	if m != nil && m.ForecastTime != nil {
		return *m.ForecastTime
	}
	return 0
}

func (m *DoDareResp) GetPlayerWishItemId() int64 {
	if m != nil && m.PlayerWishItemId != nil {
		return *m.PlayerWishItemId
	}
	return 0
}

func (m *DoDareResp) GetProductPrice() int64 {
	if m != nil && m.ProductPrice != nil {
		return *m.ProductPrice
	}
	return 0
}

func (m *DoDareResp) GetProductDiamond() int64 {
	if m != nil && m.ProductDiamond != nil {
		return *m.ProductDiamond
	}
	return 0
}

// 更多挑战
type BoxListResp struct {
	BoxList              []*QueryBox `protobuf:"bytes,1,rep,name=BoxList" json:"BoxList,omitempty" bson:"BoxList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" bson:"-"`
}

func (m *BoxListResp) Reset()         { *m = BoxListResp{} }
func (m *BoxListResp) String() string { return proto.CompactTextString(m) }
func (*BoxListResp) ProtoMessage()    {}
func (*BoxListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{68}
}
func (m *BoxListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoxListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoxListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoxListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoxListResp.Merge(m, src)
}
func (m *BoxListResp) XXX_Size() int {
	return m.Size()
}
func (m *BoxListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BoxListResp.DiscardUnknown(m)
}

var xxx_messageInfo_BoxListResp proto.InternalMessageInfo

func (m *BoxListResp) GetBoxList() []*QueryBox {
	if m != nil {
		return m.BoxList
	}
	return nil
}

// ==========================我的愿望盒==========================
// 我的盒子请求请求
type DataPageReq struct {
	Page                 *int32   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	ReqType              *int32   `protobuf:"varint,3,opt,name=ReqType" json:"ReqType,omitempty" bson:"ReqType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DataPageReq) Reset()         { *m = DataPageReq{} }
func (m *DataPageReq) String() string { return proto.CompactTextString(m) }
func (*DataPageReq) ProtoMessage()    {}
func (*DataPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{69}
}
func (m *DataPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPageReq.Merge(m, src)
}
func (m *DataPageReq) XXX_Size() int {
	return m.Size()
}
func (m *DataPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_DataPageReq proto.InternalMessageInfo

func (m *DataPageReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *DataPageReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *DataPageReq) GetReqType() int32 {
	if m != nil && m.ReqType != nil {
		return *m.ReqType
	}
	return 0
}

//收藏盲盒数据
type CollectionBox struct {
	Box                  *QueryBox `protobuf:"bytes,1,opt,name=Box" json:"Box,omitempty" bson:"Box,omitempty"`
	CollectionTime       *int64    `protobuf:"varint,2,opt,name=CollectionTime" json:"CollectionTime,omitempty" bson:"CollectionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" bson:"-"`
	XXX_unrecognized     []byte    `json:"-" bson:"-"`
	XXX_sizecache        int32     `json:"-" bson:"-"`
}

func (m *CollectionBox) Reset()         { *m = CollectionBox{} }
func (m *CollectionBox) String() string { return proto.CompactTextString(m) }
func (*CollectionBox) ProtoMessage()    {}
func (*CollectionBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{70}
}
func (m *CollectionBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionBox.Merge(m, src)
}
func (m *CollectionBox) XXX_Size() int {
	return m.Size()
}
func (m *CollectionBox) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionBox.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionBox proto.InternalMessageInfo

func (m *CollectionBox) GetBox() *QueryBox {
	if m != nil {
		return m.Box
	}
	return nil
}

func (m *CollectionBox) GetCollectionTime() int64 {
	if m != nil && m.CollectionTime != nil {
		return *m.CollectionTime
	}
	return 0
}

//我的愿望盒-已收藏
type MyCollectedBoxResp struct {
	Boxes                []*CollectBox `protobuf:"bytes,1,rep,name=Boxes" json:"Boxes,omitempty" bson:"Boxes,omitempty"`
	OnSaleCount          *int32        `protobuf:"varint,2,opt,name=OnSaleCount" json:"OnSaleCount,omitempty" bson:"OnSaleCount,omitempty"`
	SaleOutCount         *int32        `protobuf:"varint,3,opt,name=SaleOutCount" json:"SaleOutCount,omitempty" bson:"SaleOutCount,omitempty"`
	ToExchangeCount      *int32        `protobuf:"varint,4,opt,name=ToExchangeCount" json:"ToExchangeCount,omitempty" bson:"ToExchangeCount,omitempty"`
	ExchangedCount       *int32        `protobuf:"varint,5,opt,name=ExchangedCount" json:"ExchangedCount,omitempty" bson:"ExchangedCount,omitempty"`
	RecycleCount         *int32        `protobuf:"varint,6,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *MyCollectedBoxResp) Reset()         { *m = MyCollectedBoxResp{} }
func (m *MyCollectedBoxResp) String() string { return proto.CompactTextString(m) }
func (*MyCollectedBoxResp) ProtoMessage()    {}
func (*MyCollectedBoxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{71}
}
func (m *MyCollectedBoxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyCollectedBoxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyCollectedBoxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyCollectedBoxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyCollectedBoxResp.Merge(m, src)
}
func (m *MyCollectedBoxResp) XXX_Size() int {
	return m.Size()
}
func (m *MyCollectedBoxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MyCollectedBoxResp.DiscardUnknown(m)
}

var xxx_messageInfo_MyCollectedBoxResp proto.InternalMessageInfo

func (m *MyCollectedBoxResp) GetBoxes() []*CollectBox {
	if m != nil {
		return m.Boxes
	}
	return nil
}

func (m *MyCollectedBoxResp) GetOnSaleCount() int32 {
	if m != nil && m.OnSaleCount != nil {
		return *m.OnSaleCount
	}
	return 0
}

func (m *MyCollectedBoxResp) GetSaleOutCount() int32 {
	if m != nil && m.SaleOutCount != nil {
		return *m.SaleOutCount
	}
	return 0
}

func (m *MyCollectedBoxResp) GetToExchangeCount() int32 {
	if m != nil && m.ToExchangeCount != nil {
		return *m.ToExchangeCount
	}
	return 0
}

func (m *MyCollectedBoxResp) GetExchangedCount() int32 {
	if m != nil && m.ExchangedCount != nil {
		return *m.ExchangedCount
	}
	return 0
}

func (m *MyCollectedBoxResp) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

//处理盲盒或物品请求
type DealBoxReq struct {
	IdList               []int64  `protobuf:"varint,1,rep,name=IdList" json:"IdList,omitempty" bson:"IdList,omitempty"`
	OpType               *int32   `protobuf:"varint,2,opt,name=OpType" json:"OpType,omitempty" bson:"OpType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DealBoxReq) Reset()         { *m = DealBoxReq{} }
func (m *DealBoxReq) String() string { return proto.CompactTextString(m) }
func (*DealBoxReq) ProtoMessage()    {}
func (*DealBoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{72}
}
func (m *DealBoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DealBoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DealBoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DealBoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DealBoxReq.Merge(m, src)
}
func (m *DealBoxReq) XXX_Size() int {
	return m.Size()
}
func (m *DealBoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DealBoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_DealBoxReq proto.InternalMessageInfo

func (m *DealBoxReq) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *DealBoxReq) GetOpType() int32 {
	if m != nil && m.OpType != nil {
		return *m.OpType
	}
	return 0
}

type DefaultResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	Msg                  *string  `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty" bson:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DefaultResp) Reset()         { *m = DefaultResp{} }
func (m *DefaultResp) String() string { return proto.CompactTextString(m) }
func (*DefaultResp) ProtoMessage()    {}
func (*DefaultResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{73}
}
func (m *DefaultResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultResp.Merge(m, src)
}
func (m *DefaultResp) XXX_Size() int {
	return m.Size()
}
func (m *DefaultResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultResp.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultResp proto.InternalMessageInfo

func (m *DefaultResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *DefaultResp) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

//盲盒物品响应数据
type ProductResp struct {
	ItemList             []*Product `protobuf:"bytes,1,rep,name=ItemList" json:"ItemList,omitempty" bson:"ItemList,omitempty"`
	ToExchangeCount      *int32     `protobuf:"varint,2,opt,name=ToExchangeCount" json:"ToExchangeCount,omitempty" bson:"ToExchangeCount,omitempty"`
	ExchangedCount       *int32     `protobuf:"varint,3,opt,name=ExchangedCount" json:"ExchangedCount,omitempty" bson:"ExchangedCount,omitempty"`
	RecycleCount         *int32     `protobuf:"varint,4,opt,name=RecycleCount" json:"RecycleCount,omitempty" bson:"RecycleCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *ProductResp) Reset()         { *m = ProductResp{} }
func (m *ProductResp) String() string { return proto.CompactTextString(m) }
func (*ProductResp) ProtoMessage()    {}
func (*ProductResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{74}
}
func (m *ProductResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProductResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductResp.Merge(m, src)
}
func (m *ProductResp) XXX_Size() int {
	return m.Size()
}
func (m *ProductResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProductResp proto.InternalMessageInfo

func (m *ProductResp) GetItemList() []*Product {
	if m != nil {
		return m.ItemList
	}
	return nil
}

func (m *ProductResp) GetToExchangeCount() int32 {
	if m != nil && m.ToExchangeCount != nil {
		return *m.ToExchangeCount
	}
	return 0
}

func (m *ProductResp) GetExchangedCount() int32 {
	if m != nil && m.ExchangedCount != nil {
		return *m.ExchangedCount
	}
	return 0
}

func (m *ProductResp) GetRecycleCount() int32 {
	if m != nil && m.RecycleCount != nil {
		return *m.RecycleCount
	}
	return 0
}

//盲盒物品回收数据
type RecycleReq struct {
	IdList               []int64  `protobuf:"varint,1,rep,name=IdList" json:"IdList,omitempty" bson:"IdList,omitempty"`
	Price                *int32   `protobuf:"varint,2,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	CardId               *string  `protobuf:"bytes,3,opt,name=CardId" json:"CardId,omitempty" bson:"CardId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecycleReq) Reset()         { *m = RecycleReq{} }
func (m *RecycleReq) String() string { return proto.CompactTextString(m) }
func (*RecycleReq) ProtoMessage()    {}
func (*RecycleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{75}
}
func (m *RecycleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecycleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecycleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecycleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleReq.Merge(m, src)
}
func (m *RecycleReq) XXX_Size() int {
	return m.Size()
}
func (m *RecycleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleReq proto.InternalMessageInfo

func (m *RecycleReq) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *RecycleReq) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *RecycleReq) GetCardId() string {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return ""
}

//批量处理盲盒请求
type WishBoxReq struct {
	IdList               []int64  `protobuf:"varint,1,rep,name=IdList" json:"IdList,omitempty" bson:"IdList,omitempty"`
	BankCardId           *string  `protobuf:"bytes,2,opt,name=BankCardId" json:"BankCardId,omitempty" bson:"BankCardId,omitempty"`
	RecycleNote          *int32   `protobuf:"varint,3,opt,name=RecycleNote" json:"RecycleNote,omitempty" bson:"RecycleNote,omitempty"`
	AddressId            *int64   `protobuf:"varint,4,opt,name=AddressId" json:"AddressId,omitempty" bson:"AddressId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishBoxReq) Reset()         { *m = WishBoxReq{} }
func (m *WishBoxReq) String() string { return proto.CompactTextString(m) }
func (*WishBoxReq) ProtoMessage()    {}
func (*WishBoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{76}
}
func (m *WishBoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishBoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishBoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishBoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishBoxReq.Merge(m, src)
}
func (m *WishBoxReq) XXX_Size() int {
	return m.Size()
}
func (m *WishBoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WishBoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_WishBoxReq proto.InternalMessageInfo

func (m *WishBoxReq) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *WishBoxReq) GetBankCardId() string {
	if m != nil && m.BankCardId != nil {
		return *m.BankCardId
	}
	return ""
}

func (m *WishBoxReq) GetRecycleNote() int32 {
	if m != nil && m.RecycleNote != nil {
		return *m.RecycleNote
	}
	return 0
}

func (m *WishBoxReq) GetAddressId() int64 {
	if m != nil && m.AddressId != nil {
		return *m.AddressId
	}
	return 0
}

type CollectionBoxReq struct {
	IdList               []int64  `protobuf:"varint,1,rep,name=IdList" json:"IdList,omitempty" bson:"IdList,omitempty"`
	OpType               *int32   `protobuf:"varint,2,opt,name=OpType" json:"OpType,omitempty" bson:"OpType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CollectionBoxReq) Reset()         { *m = CollectionBoxReq{} }
func (m *CollectionBoxReq) String() string { return proto.CompactTextString(m) }
func (*CollectionBoxReq) ProtoMessage()    {}
func (*CollectionBoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{77}
}
func (m *CollectionBoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionBoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionBoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionBoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionBoxReq.Merge(m, src)
}
func (m *CollectionBoxReq) XXX_Size() int {
	return m.Size()
}
func (m *CollectionBoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionBoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionBoxReq proto.InternalMessageInfo

func (m *CollectionBoxReq) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

func (m *CollectionBoxReq) GetOpType() int32 {
	if m != nil && m.OpType != nil {
		return *m.OpType
	}
	return 0
}

type WishAddress struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Phone                *string  `protobuf:"bytes,2,opt,name=Phone" json:"Phone,omitempty" bson:"Phone,omitempty"`
	Detail               *string  `protobuf:"bytes,3,opt,name=Detail" json:"Detail,omitempty" bson:"Detail,omitempty"`
	IfDefault            *bool    `protobuf:"varint,4,opt,name=IfDefault" json:"IfDefault,omitempty" bson:"IfDefault,omitempty"`
	AddressId            *int64   `protobuf:"varint,5,opt,name=AddressId" json:"AddressId,omitempty" bson:"AddressId,omitempty"`
	Province             *string  `protobuf:"bytes,6,opt,name=Province" json:"Province,omitempty" bson:"Province,omitempty"`
	City                 *string  `protobuf:"bytes,7,opt,name=City" json:"City,omitempty" bson:"City,omitempty"`
	Area                 *string  `protobuf:"bytes,8,opt,name=Area" json:"Area,omitempty" bson:"Area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishAddress) Reset()         { *m = WishAddress{} }
func (m *WishAddress) String() string { return proto.CompactTextString(m) }
func (*WishAddress) ProtoMessage()    {}
func (*WishAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{78}
}
func (m *WishAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishAddress.Merge(m, src)
}
func (m *WishAddress) XXX_Size() int {
	return m.Size()
}
func (m *WishAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WishAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WishAddress proto.InternalMessageInfo

func (m *WishAddress) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *WishAddress) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *WishAddress) GetDetail() string {
	if m != nil && m.Detail != nil {
		return *m.Detail
	}
	return ""
}

func (m *WishAddress) GetIfDefault() bool {
	if m != nil && m.IfDefault != nil {
		return *m.IfDefault
	}
	return false
}

func (m *WishAddress) GetAddressId() int64 {
	if m != nil && m.AddressId != nil {
		return *m.AddressId
	}
	return 0
}

func (m *WishAddress) GetProvince() string {
	if m != nil && m.Province != nil {
		return *m.Province
	}
	return ""
}

func (m *WishAddress) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *WishAddress) GetArea() string {
	if m != nil && m.Area != nil {
		return *m.Area
	}
	return ""
}

type RemoveAddressReq struct {
	AddressId            *int64   `protobuf:"varint,5,opt,name=AddressId" json:"AddressId,omitempty" bson:"AddressId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RemoveAddressReq) Reset()         { *m = RemoveAddressReq{} }
func (m *RemoveAddressReq) String() string { return proto.CompactTextString(m) }
func (*RemoveAddressReq) ProtoMessage()    {}
func (*RemoveAddressReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{79}
}
func (m *RemoveAddressReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAddressReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAddressReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveAddressReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAddressReq.Merge(m, src)
}
func (m *RemoveAddressReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAddressReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAddressReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAddressReq proto.InternalMessageInfo

func (m *RemoveAddressReq) GetAddressId() int64 {
	if m != nil && m.AddressId != nil {
		return *m.AddressId
	}
	return 0
}

//收货人信息列表响应
type AddressListResp struct {
	List                 []*WishAddress `protobuf:"bytes,1,rep,name=List" json:"List,omitempty" bson:"List,omitempty"`
	Count                *int32         `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" bson:"-"`
	XXX_unrecognized     []byte         `json:"-" bson:"-"`
	XXX_sizecache        int32          `json:"-" bson:"-"`
}

func (m *AddressListResp) Reset()         { *m = AddressListResp{} }
func (m *AddressListResp) String() string { return proto.CompactTextString(m) }
func (*AddressListResp) ProtoMessage()    {}
func (*AddressListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{80}
}
func (m *AddressListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressListResp.Merge(m, src)
}
func (m *AddressListResp) XXX_Size() int {
	return m.Size()
}
func (m *AddressListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressListResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddressListResp proto.InternalMessageInfo

func (m *AddressListResp) GetList() []*WishAddress {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AddressListResp) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// ==========================其他==========================
//盲盒物品预售请求
type PresaleReq struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	ArrivalTime          *int32   `protobuf:"varint,2,opt,name=ArrivalTime" json:"ArrivalTime,omitempty" bson:"ArrivalTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PresaleReq) Reset()         { *m = PresaleReq{} }
func (m *PresaleReq) String() string { return proto.CompactTextString(m) }
func (*PresaleReq) ProtoMessage()    {}
func (*PresaleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{81}
}
func (m *PresaleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PresaleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PresaleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PresaleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PresaleReq.Merge(m, src)
}
func (m *PresaleReq) XXX_Size() int {
	return m.Size()
}
func (m *PresaleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PresaleReq.DiscardUnknown(m)
}

var xxx_messageInfo_PresaleReq proto.InternalMessageInfo

func (m *PresaleReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *PresaleReq) GetArrivalTime() int32 {
	if m != nil && m.ArrivalTime != nil {
		return *m.ArrivalTime
	}
	return 0
}

//设置盲盒物流信息请求
type SetExpressInfoReq struct {
	PlayId               *int64   `protobuf:"varint,1,opt,name=PlayId" json:"PlayId,omitempty" bson:"PlayId,omitempty"`
	ExpressNum           *string  `protobuf:"bytes,2,opt,name=ExpressNum" json:"ExpressNum,omitempty" bson:"ExpressNum,omitempty"`
	ProductId            *int64   `protobuf:"varint,3,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	ReceiveId            *int64   `protobuf:"varint,4,opt,name=ReceiveId" json:"ReceiveId,omitempty" bson:"ReceiveId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SetExpressInfoReq) Reset()         { *m = SetExpressInfoReq{} }
func (m *SetExpressInfoReq) String() string { return proto.CompactTextString(m) }
func (*SetExpressInfoReq) ProtoMessage()    {}
func (*SetExpressInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{82}
}
func (m *SetExpressInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetExpressInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetExpressInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetExpressInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetExpressInfoReq.Merge(m, src)
}
func (m *SetExpressInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SetExpressInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetExpressInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetExpressInfoReq proto.InternalMessageInfo

func (m *SetExpressInfoReq) GetPlayId() int64 {
	if m != nil && m.PlayId != nil {
		return *m.PlayId
	}
	return 0
}

func (m *SetExpressInfoReq) GetExpressNum() string {
	if m != nil && m.ExpressNum != nil {
		return *m.ExpressNum
	}
	return ""
}

func (m *SetExpressInfoReq) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

func (m *SetExpressInfoReq) GetReceiveId() int64 {
	if m != nil && m.ReceiveId != nil {
		return *m.ReceiveId
	}
	return 0
}

//盲盒物流信息响应
type GetExpressInfoReq struct {
	PlayId               *int64   `protobuf:"varint,1,opt,name=PlayId" json:"PlayId,omitempty" bson:"PlayId,omitempty"`
	ProductId            *int64   `protobuf:"varint,2,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetExpressInfoReq) Reset()         { *m = GetExpressInfoReq{} }
func (m *GetExpressInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetExpressInfoReq) ProtoMessage()    {}
func (*GetExpressInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{83}
}
func (m *GetExpressInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExpressInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExpressInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExpressInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExpressInfoReq.Merge(m, src)
}
func (m *GetExpressInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetExpressInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExpressInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetExpressInfoReq proto.InternalMessageInfo

func (m *GetExpressInfoReq) GetPlayId() int64 {
	if m != nil && m.PlayId != nil {
		return *m.PlayId
	}
	return 0
}

func (m *GetExpressInfoReq) GetProductId() int64 {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return 0
}

//盲盒物流信息响应
type GetExpressInfoResp struct {
	ExpressNum           *string  `protobuf:"bytes,1,opt,name=ExpressNum" json:"ExpressNum,omitempty" bson:"ExpressNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GetExpressInfoResp) Reset()         { *m = GetExpressInfoResp{} }
func (m *GetExpressInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetExpressInfoResp) ProtoMessage()    {}
func (*GetExpressInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{84}
}
func (m *GetExpressInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExpressInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExpressInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExpressInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExpressInfoResp.Merge(m, src)
}
func (m *GetExpressInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetExpressInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExpressInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetExpressInfoResp proto.InternalMessageInfo

func (m *GetExpressInfoResp) GetExpressNum() string {
	if m != nil && m.ExpressNum != nil {
		return *m.ExpressNum
	}
	return ""
}

//进入许愿池请求
type LoginReq struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Channel              *int32   `protobuf:"varint,2,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	NickName             *string  `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,4,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Token                *string  `protobuf:"bytes,6,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	Types                *int32   `protobuf:"varint,36,opt,name=Types" json:"Types,omitempty" bson:"Types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{85}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (m *LoginReq) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *LoginReq) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *LoginReq) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *LoginReq) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *LoginReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LoginReq) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *LoginReq) GetTypes() int32 {
	if m != nil && m.Types != nil {
		return *m.Types
	}
	return 0
}

//进入许愿池响应
type LoginResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	Token                *string  `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	HallSid              *int32   `protobuf:"varint,3,opt,name=HallSid" json:"HallSid,omitempty" bson:"HallSid,omitempty"`
	NotOneWish           *bool    `protobuf:"varint,13,opt,name=NotOneWish" json:"NotOneWish,omitempty" bson:"NotOneWish,omitempty"`
	IsTryOne             *bool    `protobuf:"varint,14,opt,name=IsTryOne" json:"IsTryOne,omitempty" bson:"IsTryOne,omitempty"`
	UserId               *int64   `protobuf:"varint,15,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	Reason               *string  `protobuf:"bytes,16,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	UserRole             *int32   `protobuf:"varint,17,opt,name=UserRole" json:"UserRole,omitempty" bson:"UserRole,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LoginResp) Reset()         { *m = LoginResp{} }
func (m *LoginResp) String() string { return proto.CompactTextString(m) }
func (*LoginResp) ProtoMessage()    {}
func (*LoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{86}
}
func (m *LoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResp.Merge(m, src)
}
func (m *LoginResp) XXX_Size() int {
	return m.Size()
}
func (m *LoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResp proto.InternalMessageInfo

func (m *LoginResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *LoginResp) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *LoginResp) GetHallSid() int32 {
	if m != nil && m.HallSid != nil {
		return *m.HallSid
	}
	return 0
}

func (m *LoginResp) GetNotOneWish() bool {
	if m != nil && m.NotOneWish != nil {
		return *m.NotOneWish
	}
	return false
}

func (m *LoginResp) GetIsTryOne() bool {
	if m != nil && m.IsTryOne != nil {
		return *m.IsTryOne
	}
	return false
}

func (m *LoginResp) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *LoginResp) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *LoginResp) GetUserRole() int32 {
	if m != nil && m.UserRole != nil {
		return *m.UserRole
	}
	return 0
}

//返回数值响应
type JustNumberResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *JustNumberResp) Reset()         { *m = JustNumberResp{} }
func (m *JustNumberResp) String() string { return proto.CompactTextString(m) }
func (*JustNumberResp) ProtoMessage()    {}
func (*JustNumberResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{87}
}
func (m *JustNumberResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JustNumberResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JustNumberResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JustNumberResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JustNumberResp.Merge(m, src)
}
func (m *JustNumberResp) XXX_Size() int {
	return m.Size()
}
func (m *JustNumberResp) XXX_DiscardUnknown() {
	xxx_messageInfo_JustNumberResp.DiscardUnknown(m)
}

var xxx_messageInfo_JustNumberResp proto.InternalMessageInfo

func (m *JustNumberResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

//兑换钻石
type CoinToDiamondReq struct {
	Coin                 *int64   `protobuf:"varint,1,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	Id                   *int64   `protobuf:"varint,2,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinToDiamondReq) Reset()         { *m = CoinToDiamondReq{} }
func (m *CoinToDiamondReq) String() string { return proto.CompactTextString(m) }
func (*CoinToDiamondReq) ProtoMessage()    {}
func (*CoinToDiamondReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{88}
}
func (m *CoinToDiamondReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinToDiamondReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinToDiamondReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinToDiamondReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinToDiamondReq.Merge(m, src)
}
func (m *CoinToDiamondReq) XXX_Size() int {
	return m.Size()
}
func (m *CoinToDiamondReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinToDiamondReq.DiscardUnknown(m)
}

var xxx_messageInfo_CoinToDiamondReq proto.InternalMessageInfo

func (m *CoinToDiamondReq) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *CoinToDiamondReq) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

//兑换响应
type CoinToDiamondResq struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	Coin                 *int64   `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	Diamond              *int64   `protobuf:"varint,3,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	DiamondCount         *int64   `protobuf:"varint,4,opt,name=DiamondCount" json:"DiamondCount,omitempty" bson:"DiamondCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *CoinToDiamondResq) Reset()         { *m = CoinToDiamondResq{} }
func (m *CoinToDiamondResq) String() string { return proto.CompactTextString(m) }
func (*CoinToDiamondResq) ProtoMessage()    {}
func (*CoinToDiamondResq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{89}
}
func (m *CoinToDiamondResq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinToDiamondResq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinToDiamondResq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinToDiamondResq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinToDiamondResq.Merge(m, src)
}
func (m *CoinToDiamondResq) XXX_Size() int {
	return m.Size()
}
func (m *CoinToDiamondResq) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinToDiamondResq.DiscardUnknown(m)
}

var xxx_messageInfo_CoinToDiamondResq proto.InternalMessageInfo

func (m *CoinToDiamondResq) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *CoinToDiamondResq) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *CoinToDiamondResq) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *CoinToDiamondResq) GetDiamondCount() int64 {
	if m != nil && m.DiamondCount != nil {
		return *m.DiamondCount
	}
	return 0
}

//银行卡信息
type BankCardInfo struct {
	BankId               *string  `protobuf:"bytes,1,opt,name=BankId" json:"BankId,omitempty" bson:"BankId,omitempty"`
	BankCode             *string  `protobuf:"bytes,2,opt,name=BankCode" json:"BankCode,omitempty" bson:"BankCode,omitempty"`
	BankName             *string  `protobuf:"bytes,5,opt,name=BankName" json:"BankName,omitempty" bson:"BankName,omitempty"`
	IsSupport            *bool    `protobuf:"varint,6,opt,name=IsSupport" json:"IsSupport,omitempty" bson:"IsSupport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BankCardInfo) Reset()         { *m = BankCardInfo{} }
func (m *BankCardInfo) String() string { return proto.CompactTextString(m) }
func (*BankCardInfo) ProtoMessage()    {}
func (*BankCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{90}
}
func (m *BankCardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankCardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankCardInfo.Merge(m, src)
}
func (m *BankCardInfo) XXX_Size() int {
	return m.Size()
}
func (m *BankCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BankCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BankCardInfo proto.InternalMessageInfo

func (m *BankCardInfo) GetBankId() string {
	if m != nil && m.BankId != nil {
		return *m.BankId
	}
	return ""
}

func (m *BankCardInfo) GetBankCode() string {
	if m != nil && m.BankCode != nil {
		return *m.BankCode
	}
	return ""
}

func (m *BankCardInfo) GetBankName() string {
	if m != nil && m.BankName != nil {
		return *m.BankName
	}
	return ""
}

func (m *BankCardInfo) GetIsSupport() bool {
	if m != nil && m.IsSupport != nil {
		return *m.IsSupport
	}
	return false
}

//银行卡信息响应
type BankCardResp struct {
	Cards                []*BankCardInfo `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty" bson:"Cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *BankCardResp) Reset()         { *m = BankCardResp{} }
func (m *BankCardResp) String() string { return proto.CompactTextString(m) }
func (*BankCardResp) ProtoMessage()    {}
func (*BankCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{91}
}
func (m *BankCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BankCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BankCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BankCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankCardResp.Merge(m, src)
}
func (m *BankCardResp) XXX_Size() int {
	return m.Size()
}
func (m *BankCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BankCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_BankCardResp proto.InternalMessageInfo

func (m *BankCardResp) GetCards() []*BankCardInfo {
	if m != nil {
		return m.Cards
	}
	return nil
}

//用户提现大厅请求
type RecycleToHall struct {
	PlayerId             *int64   `protobuf:"varint,1,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	BankCardId           *string  `protobuf:"bytes,2,opt,name=BankCardId" json:"BankCardId,omitempty" bson:"BankCardId,omitempty"`
	Price                *int64   `protobuf:"varint,3,opt,name=Price" json:"Price,omitempty" bson:"Price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RecycleToHall) Reset()         { *m = RecycleToHall{} }
func (m *RecycleToHall) String() string { return proto.CompactTextString(m) }
func (*RecycleToHall) ProtoMessage()    {}
func (*RecycleToHall) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{92}
}
func (m *RecycleToHall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecycleToHall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecycleToHall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecycleToHall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecycleToHall.Merge(m, src)
}
func (m *RecycleToHall) XXX_Size() int {
	return m.Size()
}
func (m *RecycleToHall) XXX_DiscardUnknown() {
	xxx_messageInfo_RecycleToHall.DiscardUnknown(m)
}

var xxx_messageInfo_RecycleToHall proto.InternalMessageInfo

func (m *RecycleToHall) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *RecycleToHall) GetBankCardId() string {
	if m != nil && m.BankCardId != nil {
		return *m.BankCardId
	}
	return ""
}

func (m *RecycleToHall) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

type DiamondRecharge struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Diamond              *int64   `protobuf:"varint,2,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	CoinPrice            *int64   `protobuf:"varint,3,opt,name=CoinPrice" json:"CoinPrice,omitempty" bson:"CoinPrice,omitempty"`
	MonthFirst           *int64   `protobuf:"varint,4,opt,name=MonthFirst" json:"MonthFirst,omitempty" bson:"MonthFirst,omitempty"`
	Rebate               *int32   `protobuf:"varint,5,opt,name=Rebate" json:"Rebate,omitempty" bson:"Rebate,omitempty"`
	StartTime            *int64   `protobuf:"varint,7,opt,name=StartTime" json:"StartTime,omitempty" bson:"StartTime,omitempty"`
	EndTime              *int64   `protobuf:"varint,8,opt,name=EndTime" json:"EndTime,omitempty" bson:"EndTime,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	Sort                 *int32   `protobuf:"varint,10,opt,name=Sort" json:"Sort,omitempty" bson:"Sort,omitempty"`
	DisPrice             *int64   `protobuf:"varint,11,opt,name=DisPrice" json:"DisPrice,omitempty" bson:"DisPrice,omitempty"`
	GiveDiamond          *int64   `protobuf:"varint,12,opt,name=GiveDiamond" json:"GiveDiamond,omitempty" bson:"GiveDiamond,omitempty"`
	IsMonthFirst         *bool    `protobuf:"varint,13,opt,name=IsMonthFirst" json:"IsMonthFirst,omitempty" bson:"IsMonthFirst,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DiamondRecharge) Reset()         { *m = DiamondRecharge{} }
func (m *DiamondRecharge) String() string { return proto.CompactTextString(m) }
func (*DiamondRecharge) ProtoMessage()    {}
func (*DiamondRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{93}
}
func (m *DiamondRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondRecharge.Merge(m, src)
}
func (m *DiamondRecharge) XXX_Size() int {
	return m.Size()
}
func (m *DiamondRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondRecharge proto.InternalMessageInfo

func (m *DiamondRecharge) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DiamondRecharge) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *DiamondRecharge) GetCoinPrice() int64 {
	if m != nil && m.CoinPrice != nil {
		return *m.CoinPrice
	}
	return 0
}

func (m *DiamondRecharge) GetMonthFirst() int64 {
	if m != nil && m.MonthFirst != nil {
		return *m.MonthFirst
	}
	return 0
}

func (m *DiamondRecharge) GetRebate() int32 {
	if m != nil && m.Rebate != nil {
		return *m.Rebate
	}
	return 0
}

func (m *DiamondRecharge) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *DiamondRecharge) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *DiamondRecharge) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *DiamondRecharge) GetSort() int32 {
	if m != nil && m.Sort != nil {
		return *m.Sort
	}
	return 0
}

func (m *DiamondRecharge) GetDisPrice() int64 {
	if m != nil && m.DisPrice != nil {
		return *m.DisPrice
	}
	return 0
}

func (m *DiamondRecharge) GetGiveDiamond() int64 {
	if m != nil && m.GiveDiamond != nil {
		return *m.GiveDiamond
	}
	return 0
}

func (m *DiamondRecharge) GetIsMonthFirst() bool {
	if m != nil && m.IsMonthFirst != nil {
		return *m.IsMonthFirst
	}
	return false
}

// 获取兑换列表
type DiamondRechargeResp struct {
	DiamondRechargeList  []*DiamondRecharge `protobuf:"bytes,1,rep,name=DiamondRechargeList" json:"DiamondRechargeList,omitempty" bson:"DiamondRechargeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *DiamondRechargeResp) Reset()         { *m = DiamondRechargeResp{} }
func (m *DiamondRechargeResp) String() string { return proto.CompactTextString(m) }
func (*DiamondRechargeResp) ProtoMessage()    {}
func (*DiamondRechargeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{94}
}
func (m *DiamondRechargeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondRechargeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondRechargeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondRechargeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondRechargeResp.Merge(m, src)
}
func (m *DiamondRechargeResp) XXX_Size() int {
	return m.Size()
}
func (m *DiamondRechargeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondRechargeResp.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondRechargeResp proto.InternalMessageInfo

func (m *DiamondRechargeResp) GetDiamondRechargeList() []*DiamondRecharge {
	if m != nil {
		return m.DiamondRechargeList
	}
	return nil
}

// 钻石记录
type DiamondChangeLogReq struct {
	Page                 *int32   `protobuf:"varint,1,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,2,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DiamondChangeLogReq) Reset()         { *m = DiamondChangeLogReq{} }
func (m *DiamondChangeLogReq) String() string { return proto.CompactTextString(m) }
func (*DiamondChangeLogReq) ProtoMessage()    {}
func (*DiamondChangeLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{95}
}
func (m *DiamondChangeLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondChangeLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondChangeLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondChangeLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondChangeLogReq.Merge(m, src)
}
func (m *DiamondChangeLogReq) XXX_Size() int {
	return m.Size()
}
func (m *DiamondChangeLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondChangeLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondChangeLogReq proto.InternalMessageInfo

func (m *DiamondChangeLogReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *DiamondChangeLogReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

func (m *DiamondChangeLogReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type DiamondChangeLog struct {
	LogId                *int64   `protobuf:"varint,1,req,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	ChangeDiamond        *int64   `protobuf:"varint,4,opt,name=ChangeDiamond" json:"ChangeDiamond,omitempty" bson:"ChangeDiamond,omitempty"`
	SourceType           *int32   `protobuf:"varint,5,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	PayType              *int32   `protobuf:"varint,7,opt,name=PayType" json:"PayType,omitempty" bson:"PayType,omitempty"`
	CurDiamond           *int64   `protobuf:"varint,10,opt,name=CurDiamond" json:"CurDiamond,omitempty" bson:"CurDiamond,omitempty"`
	Diamond              *int64   `protobuf:"varint,11,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	Note                 *string  `protobuf:"bytes,12,opt,name=Note" json:"Note,omitempty" bson:"Note,omitempty"`
	CreateTime           *int64   `protobuf:"varint,13,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DiamondChangeLog) Reset()         { *m = DiamondChangeLog{} }
func (m *DiamondChangeLog) String() string { return proto.CompactTextString(m) }
func (*DiamondChangeLog) ProtoMessage()    {}
func (*DiamondChangeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{96}
}
func (m *DiamondChangeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondChangeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondChangeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondChangeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondChangeLog.Merge(m, src)
}
func (m *DiamondChangeLog) XXX_Size() int {
	return m.Size()
}
func (m *DiamondChangeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondChangeLog.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondChangeLog proto.InternalMessageInfo

func (m *DiamondChangeLog) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *DiamondChangeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *DiamondChangeLog) GetChangeDiamond() int64 {
	if m != nil && m.ChangeDiamond != nil {
		return *m.ChangeDiamond
	}
	return 0
}

func (m *DiamondChangeLog) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

func (m *DiamondChangeLog) GetPayType() int32 {
	if m != nil && m.PayType != nil {
		return *m.PayType
	}
	return 0
}

func (m *DiamondChangeLog) GetCurDiamond() int64 {
	if m != nil && m.CurDiamond != nil {
		return *m.CurDiamond
	}
	return 0
}

func (m *DiamondChangeLog) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *DiamondChangeLog) GetNote() string {
	if m != nil && m.Note != nil {
		return *m.Note
	}
	return ""
}

func (m *DiamondChangeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

type DiamondChangeLogResp struct {
	DiamondChangeLogList []*DiamondChangeLog `protobuf:"bytes,1,rep,name=DiamondChangeLogList" json:"DiamondChangeLogList,omitempty" bson:"DiamondChangeLogList,omitempty"`
	Count                *int32              `protobuf:"varint,7,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *DiamondChangeLogResp) Reset()         { *m = DiamondChangeLogResp{} }
func (m *DiamondChangeLogResp) String() string { return proto.CompactTextString(m) }
func (*DiamondChangeLogResp) ProtoMessage()    {}
func (*DiamondChangeLogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{97}
}
func (m *DiamondChangeLogResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiamondChangeLogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiamondChangeLogResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiamondChangeLogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiamondChangeLogResp.Merge(m, src)
}
func (m *DiamondChangeLogResp) XXX_Size() int {
	return m.Size()
}
func (m *DiamondChangeLogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DiamondChangeLogResp.DiscardUnknown(m)
}

var xxx_messageInfo_DiamondChangeLogResp proto.InternalMessageInfo

func (m *DiamondChangeLogResp) GetDiamondChangeLogList() []*DiamondChangeLog {
	if m != nil {
		return m.DiamondChangeLogList
	}
	return nil
}

func (m *DiamondChangeLogResp) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// 价格区间
type PriceSection struct {
	OneMin               *int32   `protobuf:"varint,2,opt,name=OneMin" json:"OneMin,omitempty" bson:"OneMin,omitempty"`
	OneMax               *int32   `protobuf:"varint,4,opt,name=OneMax" json:"OneMax,omitempty" bson:"OneMax,omitempty"`
	TwoMin               *int32   `protobuf:"varint,5,opt,name=TwoMin" json:"TwoMin,omitempty" bson:"TwoMin,omitempty"`
	TwoMax               *int32   `protobuf:"varint,6,opt,name=TwoMax" json:"TwoMax,omitempty" bson:"TwoMax,omitempty"`
	ThreeMin             *int32   `protobuf:"varint,7,opt,name=ThreeMin" json:"ThreeMin,omitempty" bson:"ThreeMin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PriceSection) Reset()         { *m = PriceSection{} }
func (m *PriceSection) String() string { return proto.CompactTextString(m) }
func (*PriceSection) ProtoMessage()    {}
func (*PriceSection) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{98}
}
func (m *PriceSection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSection.Merge(m, src)
}
func (m *PriceSection) XXX_Size() int {
	return m.Size()
}
func (m *PriceSection) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSection.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSection proto.InternalMessageInfo

func (m *PriceSection) GetOneMin() int32 {
	if m != nil && m.OneMin != nil {
		return *m.OneMin
	}
	return 0
}

func (m *PriceSection) GetOneMax() int32 {
	if m != nil && m.OneMax != nil {
		return *m.OneMax
	}
	return 0
}

func (m *PriceSection) GetTwoMin() int32 {
	if m != nil && m.TwoMin != nil {
		return *m.TwoMin
	}
	return 0
}

func (m *PriceSection) GetTwoMax() int32 {
	if m != nil && m.TwoMax != nil {
		return *m.TwoMax
	}
	return 0
}

func (m *PriceSection) GetThreeMin() int32 {
	if m != nil && m.ThreeMin != nil {
		return *m.ThreeMin
	}
	return 0
}

// 价格区间响应
type PriceSectionResp struct {
	PriceSection         *PriceSection `protobuf:"bytes,1,opt,name=PriceSection" json:"PriceSection,omitempty" bson:"PriceSection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" bson:"-"`
	XXX_unrecognized     []byte        `json:"-" bson:"-"`
	XXX_sizecache        int32         `json:"-" bson:"-"`
}

func (m *PriceSectionResp) Reset()         { *m = PriceSectionResp{} }
func (m *PriceSectionResp) String() string { return proto.CompactTextString(m) }
func (*PriceSectionResp) ProtoMessage()    {}
func (*PriceSectionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{99}
}
func (m *PriceSectionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSectionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSectionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSectionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSectionResp.Merge(m, src)
}
func (m *PriceSectionResp) XXX_Size() int {
	return m.Size()
}
func (m *PriceSectionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSectionResp.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSectionResp proto.InternalMessageInfo

func (m *PriceSectionResp) GetPriceSection() *PriceSection {
	if m != nil {
		return m.PriceSection
	}
	return nil
}

// 货币换算参数设置
type WishCurrencyConversionCfg struct {
	Money                *int32   `protobuf:"varint,1,opt,name=Money" json:"Money,omitempty" bson:"Money,omitempty"`
	Coin                 *int32   `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	Diamond              *int32   `protobuf:"varint,3,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishCurrencyConversionCfg) Reset()         { *m = WishCurrencyConversionCfg{} }
func (m *WishCurrencyConversionCfg) String() string { return proto.CompactTextString(m) }
func (*WishCurrencyConversionCfg) ProtoMessage()    {}
func (*WishCurrencyConversionCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{100}
}
func (m *WishCurrencyConversionCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCurrencyConversionCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCurrencyConversionCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCurrencyConversionCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCurrencyConversionCfg.Merge(m, src)
}
func (m *WishCurrencyConversionCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishCurrencyConversionCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCurrencyConversionCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishCurrencyConversionCfg proto.InternalMessageInfo

func (m *WishCurrencyConversionCfg) GetMoney() int32 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *WishCurrencyConversionCfg) GetCoin() int32 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *WishCurrencyConversionCfg) GetDiamond() int32 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

//返回配置属性响应
type ConfigResp struct {
	Postage                  *PostageResp               `protobuf:"bytes,1,opt,name=Postage" json:"Postage,omitempty" bson:"Postage,omitempty"`
	RecycleRatio             *int32                     `protobuf:"varint,2,opt,name=RecycleRatio" json:"RecycleRatio,omitempty" bson:"RecycleRatio,omitempty"`
	RecycleReason            []*Menu                    `protobuf:"bytes,3,rep,name=RecycleReason" json:"RecycleReason,omitempty" bson:"RecycleReason,omitempty"`
	Conversion               *WishCurrencyConversionCfg `protobuf:"bytes,4,opt,name=Conversion" json:"Conversion,omitempty" bson:"Conversion,omitempty"`
	ErrKey                   []string                   `protobuf:"bytes,5,rep,name=errKey" json:"errKey,omitempty" bson:"errKey,omitempty"`
	PlayerRecycleMoneyTime   *int32                     `protobuf:"varint,6,opt,name=PlayerRecycleMoneyTime" json:"PlayerRecycleMoneyTime,omitempty" bson:"PlayerRecycleMoneyTime,omitempty"`
	PlayerRecycleMoneySum    *int64                     `protobuf:"varint,7,opt,name=PlayerRecycleMoneySum" json:"PlayerRecycleMoneySum,omitempty" bson:"PlayerRecycleMoneySum,omitempty"`
	PlayerRecycleDiamondTime *int32                     `protobuf:"varint,8,opt,name=PlayerRecycleDiamondTime" json:"PlayerRecycleDiamondTime,omitempty" bson:"PlayerRecycleDiamondTime,omitempty"`
	PlayerRecycleDiamondSum  *int64                     `protobuf:"varint,9,opt,name=PlayerRecycleDiamondSum" json:"PlayerRecycleDiamondSum,omitempty" bson:"PlayerRecycleDiamondSum,omitempty"`
	DayRecycleMoneyTime      *int32                     `protobuf:"varint,10,opt,name=DayRecycleMoneyTime" json:"DayRecycleMoneyTime,omitempty" bson:"DayRecycleMoneyTime,omitempty"`
	DayRecycleMoneySum       *int64                     `protobuf:"varint,11,opt,name=DayRecycleMoneySum" json:"DayRecycleMoneySum,omitempty" bson:"DayRecycleMoneySum,omitempty"`
	DayRecycleDiamondTime    *int32                     `protobuf:"varint,12,opt,name=DayRecycleDiamondTime" json:"DayRecycleDiamondTime,omitempty" bson:"DayRecycleDiamondTime,omitempty"`
	DayRecycleDiamondSum     *int64                     `protobuf:"varint,13,opt,name=DayRecycleDiamondSum" json:"DayRecycleDiamondSum,omitempty" bson:"DayRecycleDiamondSum,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-" bson:"-"`
	XXX_unrecognized         []byte                     `json:"-" bson:"-"`
	XXX_sizecache            int32                      `json:"-" bson:"-"`
}

func (m *ConfigResp) Reset()         { *m = ConfigResp{} }
func (m *ConfigResp) String() string { return proto.CompactTextString(m) }
func (*ConfigResp) ProtoMessage()    {}
func (*ConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{101}
}
func (m *ConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResp.Merge(m, src)
}
func (m *ConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *ConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResp proto.InternalMessageInfo

func (m *ConfigResp) GetPostage() *PostageResp {
	if m != nil {
		return m.Postage
	}
	return nil
}

func (m *ConfigResp) GetRecycleRatio() int32 {
	if m != nil && m.RecycleRatio != nil {
		return *m.RecycleRatio
	}
	return 0
}

func (m *ConfigResp) GetRecycleReason() []*Menu {
	if m != nil {
		return m.RecycleReason
	}
	return nil
}

func (m *ConfigResp) GetConversion() *WishCurrencyConversionCfg {
	if m != nil {
		return m.Conversion
	}
	return nil
}

func (m *ConfigResp) GetErrKey() []string {
	if m != nil {
		return m.ErrKey
	}
	return nil
}

func (m *ConfigResp) GetPlayerRecycleMoneyTime() int32 {
	if m != nil && m.PlayerRecycleMoneyTime != nil {
		return *m.PlayerRecycleMoneyTime
	}
	return 0
}

func (m *ConfigResp) GetPlayerRecycleMoneySum() int64 {
	if m != nil && m.PlayerRecycleMoneySum != nil {
		return *m.PlayerRecycleMoneySum
	}
	return 0
}

func (m *ConfigResp) GetPlayerRecycleDiamondTime() int32 {
	if m != nil && m.PlayerRecycleDiamondTime != nil {
		return *m.PlayerRecycleDiamondTime
	}
	return 0
}

func (m *ConfigResp) GetPlayerRecycleDiamondSum() int64 {
	if m != nil && m.PlayerRecycleDiamondSum != nil {
		return *m.PlayerRecycleDiamondSum
	}
	return 0
}

func (m *ConfigResp) GetDayRecycleMoneyTime() int32 {
	if m != nil && m.DayRecycleMoneyTime != nil {
		return *m.DayRecycleMoneyTime
	}
	return 0
}

func (m *ConfigResp) GetDayRecycleMoneySum() int64 {
	if m != nil && m.DayRecycleMoneySum != nil {
		return *m.DayRecycleMoneySum
	}
	return 0
}

func (m *ConfigResp) GetDayRecycleDiamondTime() int32 {
	if m != nil && m.DayRecycleDiamondTime != nil {
		return *m.DayRecycleDiamondTime
	}
	return 0
}

func (m *ConfigResp) GetDayRecycleDiamondSum() int64 {
	if m != nil && m.DayRecycleDiamondSum != nil {
		return *m.DayRecycleDiamondSum
	}
	return 0
}

type BatchDareReq struct {
	Uid                  *int64   `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty" bson:"Uid,omitempty"`
	BoxId                *int64   `protobuf:"varint,2,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	Count                *int32   `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BatchDareReq) Reset()         { *m = BatchDareReq{} }
func (m *BatchDareReq) String() string { return proto.CompactTextString(m) }
func (*BatchDareReq) ProtoMessage()    {}
func (*BatchDareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{102}
}
func (m *BatchDareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchDareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDareReq.Merge(m, src)
}
func (m *BatchDareReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchDareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDareReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDareReq proto.InternalMessageInfo

func (m *BatchDareReq) GetUid() int64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *BatchDareReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *BatchDareReq) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type BatchDareResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BatchDareResp) Reset()         { *m = BatchDareResp{} }
func (m *BatchDareResp) String() string { return proto.CompactTextString(m) }
func (*BatchDareResp) ProtoMessage()    {}
func (*BatchDareResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{103}
}
func (m *BatchDareResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDareResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDareResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchDareResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDareResp.Merge(m, src)
}
func (m *BatchDareResp) XXX_Size() int {
	return m.Size()
}
func (m *BatchDareResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDareResp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDareResp proto.InternalMessageInfo

func (m *BatchDareResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 后台添加许愿池钻石.
type BackStageAddDiamondReq struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Channel              *int32   `protobuf:"varint,2,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	NickName             *string  `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,4,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Token                *string  `protobuf:"bytes,6,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	Diamond              *int64   `protobuf:"varint,7,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackStageAddDiamondReq) Reset()         { *m = BackStageAddDiamondReq{} }
func (m *BackStageAddDiamondReq) String() string { return proto.CompactTextString(m) }
func (*BackStageAddDiamondReq) ProtoMessage()    {}
func (*BackStageAddDiamondReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{104}
}
func (m *BackStageAddDiamondReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackStageAddDiamondReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackStageAddDiamondReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackStageAddDiamondReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackStageAddDiamondReq.Merge(m, src)
}
func (m *BackStageAddDiamondReq) XXX_Size() int {
	return m.Size()
}
func (m *BackStageAddDiamondReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BackStageAddDiamondReq.DiscardUnknown(m)
}

var xxx_messageInfo_BackStageAddDiamondReq proto.InternalMessageInfo

func (m *BackStageAddDiamondReq) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BackStageAddDiamondReq) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *BackStageAddDiamondReq) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *BackStageAddDiamondReq) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *BackStageAddDiamondReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *BackStageAddDiamondReq) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *BackStageAddDiamondReq) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

// 后台更新许愿池钻石.
type BackStageUpdateDiamondReq struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Channel              *int32   `protobuf:"varint,2,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	NickName             *string  `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,4,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Token                *string  `protobuf:"bytes,6,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	Diamond              *int64   `protobuf:"varint,7,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	Reason               *string  `protobuf:"bytes,8,opt,name=Reason" json:"Reason,omitempty" bson:"Reason,omitempty"`
	SourceType           *int32   `protobuf:"varint,9,opt,name=SourceType" json:"SourceType,omitempty" bson:"SourceType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackStageUpdateDiamondReq) Reset()         { *m = BackStageUpdateDiamondReq{} }
func (m *BackStageUpdateDiamondReq) String() string { return proto.CompactTextString(m) }
func (*BackStageUpdateDiamondReq) ProtoMessage()    {}
func (*BackStageUpdateDiamondReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{105}
}
func (m *BackStageUpdateDiamondReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackStageUpdateDiamondReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackStageUpdateDiamondReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackStageUpdateDiamondReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackStageUpdateDiamondReq.Merge(m, src)
}
func (m *BackStageUpdateDiamondReq) XXX_Size() int {
	return m.Size()
}
func (m *BackStageUpdateDiamondReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BackStageUpdateDiamondReq.DiscardUnknown(m)
}

var xxx_messageInfo_BackStageUpdateDiamondReq proto.InternalMessageInfo

func (m *BackStageUpdateDiamondReq) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BackStageUpdateDiamondReq) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *BackStageUpdateDiamondReq) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *BackStageUpdateDiamondReq) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *BackStageUpdateDiamondReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *BackStageUpdateDiamondReq) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *BackStageUpdateDiamondReq) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *BackStageUpdateDiamondReq) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *BackStageUpdateDiamondReq) GetSourceType() int32 {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return 0
}

type BackStageAddDiamondResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackStageAddDiamondResp) Reset()         { *m = BackStageAddDiamondResp{} }
func (m *BackStageAddDiamondResp) String() string { return proto.CompactTextString(m) }
func (*BackStageAddDiamondResp) ProtoMessage()    {}
func (*BackStageAddDiamondResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{106}
}
func (m *BackStageAddDiamondResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackStageAddDiamondResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackStageAddDiamondResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackStageAddDiamondResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackStageAddDiamondResp.Merge(m, src)
}
func (m *BackStageAddDiamondResp) XXX_Size() int {
	return m.Size()
}
func (m *BackStageAddDiamondResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BackStageAddDiamondResp.DiscardUnknown(m)
}

var xxx_messageInfo_BackStageAddDiamondResp proto.InternalMessageInfo

func (m *BackStageAddDiamondResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

// 后台设置守护者请求
type BackstageSetGuardianReq struct {
	Account              *string  `protobuf:"bytes,1,opt,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	Channel              *int32   `protobuf:"varint,2,opt,name=Channel" json:"Channel,omitempty" bson:"Channel,omitempty"`
	NickName             *string  `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadUrl              *string  `protobuf:"bytes,4,opt,name=HeadUrl" json:"HeadUrl,omitempty" bson:"HeadUrl,omitempty"`
	PlayerId             *int64   `protobuf:"varint,5,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Token                *string  `protobuf:"bytes,6,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	BoxId                *int64   `protobuf:"varint,7,opt,name=BoxId" json:"BoxId,omitempty" bson:"BoxId,omitempty"`
	OpType               *int32   `protobuf:"varint,8,opt,name=OpType" json:"OpType,omitempty" bson:"OpType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageSetGuardianReq) Reset()         { *m = BackstageSetGuardianReq{} }
func (m *BackstageSetGuardianReq) String() string { return proto.CompactTextString(m) }
func (*BackstageSetGuardianReq) ProtoMessage()    {}
func (*BackstageSetGuardianReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{107}
}
func (m *BackstageSetGuardianReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageSetGuardianReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageSetGuardianReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageSetGuardianReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageSetGuardianReq.Merge(m, src)
}
func (m *BackstageSetGuardianReq) XXX_Size() int {
	return m.Size()
}
func (m *BackstageSetGuardianReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageSetGuardianReq.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageSetGuardianReq proto.InternalMessageInfo

func (m *BackstageSetGuardianReq) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BackstageSetGuardianReq) GetChannel() int32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *BackstageSetGuardianReq) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *BackstageSetGuardianReq) GetHeadUrl() string {
	if m != nil && m.HeadUrl != nil {
		return *m.HeadUrl
	}
	return ""
}

func (m *BackstageSetGuardianReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *BackstageSetGuardianReq) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *BackstageSetGuardianReq) GetBoxId() int64 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func (m *BackstageSetGuardianReq) GetOpType() int32 {
	if m != nil && m.OpType != nil {
		return *m.OpType
	}
	return 0
}

type BackstageSetGuardianResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageSetGuardianResp) Reset()         { *m = BackstageSetGuardianResp{} }
func (m *BackstageSetGuardianResp) String() string { return proto.CompactTextString(m) }
func (*BackstageSetGuardianResp) ProtoMessage()    {}
func (*BackstageSetGuardianResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{108}
}
func (m *BackstageSetGuardianResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageSetGuardianResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageSetGuardianResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageSetGuardianResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageSetGuardianResp.Merge(m, src)
}
func (m *BackstageSetGuardianResp) XXX_Size() int {
	return m.Size()
}
func (m *BackstageSetGuardianResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageSetGuardianResp.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageSetGuardianResp proto.InternalMessageInfo

func (m *BackstageSetGuardianResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type PlayCfgResp struct {
	DayDiamondTop        *int64   `protobuf:"varint,2,opt,name=DayDiamondTop" json:"DayDiamondTop,omitempty" bson:"DayDiamondTop,omitempty"`
	DayLimit             *int64   `protobuf:"varint,6,opt,name=DayLimit" json:"DayLimit,omitempty" bson:"DayLimit,omitempty"`
	OnceDiamondRebate    *int64   `protobuf:"varint,7,opt,name=OnceDiamondRebate" json:"OnceDiamondRebate,omitempty" bson:"OnceDiamondRebate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *PlayCfgResp) Reset()         { *m = PlayCfgResp{} }
func (m *PlayCfgResp) String() string { return proto.CompactTextString(m) }
func (*PlayCfgResp) ProtoMessage()    {}
func (*PlayCfgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{109}
}
func (m *PlayCfgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayCfgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayCfgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayCfgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayCfgResp.Merge(m, src)
}
func (m *PlayCfgResp) XXX_Size() int {
	return m.Size()
}
func (m *PlayCfgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayCfgResp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayCfgResp proto.InternalMessageInfo

func (m *PlayCfgResp) GetDayDiamondTop() int64 {
	if m != nil && m.DayDiamondTop != nil {
		return *m.DayDiamondTop
	}
	return 0
}

func (m *PlayCfgResp) GetDayLimit() int64 {
	if m != nil && m.DayLimit != nil {
		return *m.DayLimit
	}
	return 0
}

func (m *PlayCfgResp) GetOnceDiamondRebate() int64 {
	if m != nil && m.OnceDiamondRebate != nil {
		return *m.OnceDiamondRebate
	}
	return 0
}

//订单生成信息响应
type OrderMsgResp struct {
	OrderId              *string  `protobuf:"bytes,1,opt,name=OrderId" json:"OrderId,omitempty" bson:"OrderId,omitempty"`
	Status               *int32   `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *OrderMsgResp) Reset()         { *m = OrderMsgResp{} }
func (m *OrderMsgResp) String() string { return proto.CompactTextString(m) }
func (*OrderMsgResp) ProtoMessage()    {}
func (*OrderMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{110}
}
func (m *OrderMsgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderMsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderMsgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderMsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderMsgResp.Merge(m, src)
}
func (m *OrderMsgResp) XXX_Size() int {
	return m.Size()
}
func (m *OrderMsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderMsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_OrderMsgResp proto.InternalMessageInfo

func (m *OrderMsgResp) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *OrderMsgResp) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 累计活动请求
type SumReq struct {
	ActPoolId            *int64   `protobuf:"varint,1,opt,name=ActPoolId" json:"ActPoolId,omitempty" bson:"ActPoolId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SumReq) Reset()         { *m = SumReq{} }
func (m *SumReq) String() string { return proto.CompactTextString(m) }
func (*SumReq) ProtoMessage()    {}
func (*SumReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{111}
}
func (m *SumReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumReq.Merge(m, src)
}
func (m *SumReq) XXX_Size() int {
	return m.Size()
}
func (m *SumReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SumReq.DiscardUnknown(m)
}

var xxx_messageInfo_SumReq proto.InternalMessageInfo

func (m *SumReq) GetActPoolId() int64 {
	if m != nil && m.ActPoolId != nil {
		return *m.ActPoolId
	}
	return 0
}

func (m *SumReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//活动奖项日志记录:wish_acitvity_prize_log
type WishActivityPrizeLog struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	PlayerId             *int64   `protobuf:"varint,2,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Type                 *int32   `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	ActType              *int64   `protobuf:"varint,5,opt,name=ActType" json:"ActType,omitempty" bson:"ActType,omitempty"`
	WishActPoolRuleId    *int64   `protobuf:"varint,11,opt,name=WishActPoolRuleId" json:"WishActPoolRuleId,omitempty" bson:"WishActPoolRuleId,omitempty"`
	Status               *int32   `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	CreateTime           *int64   `protobuf:"varint,10,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishActivityPrizeLog) Reset()         { *m = WishActivityPrizeLog{} }
func (m *WishActivityPrizeLog) String() string { return proto.CompactTextString(m) }
func (*WishActivityPrizeLog) ProtoMessage()    {}
func (*WishActivityPrizeLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{112}
}
func (m *WishActivityPrizeLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActivityPrizeLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActivityPrizeLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActivityPrizeLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActivityPrizeLog.Merge(m, src)
}
func (m *WishActivityPrizeLog) XXX_Size() int {
	return m.Size()
}
func (m *WishActivityPrizeLog) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActivityPrizeLog.DiscardUnknown(m)
}

var xxx_messageInfo_WishActivityPrizeLog proto.InternalMessageInfo

func (m *WishActivityPrizeLog) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActivityPrizeLog) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *WishActivityPrizeLog) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *WishActivityPrizeLog) GetActType() int64 {
	if m != nil && m.ActType != nil {
		return *m.ActType
	}
	return 0
}

func (m *WishActivityPrizeLog) GetWishActPoolRuleId() int64 {
	if m != nil && m.WishActPoolRuleId != nil {
		return *m.WishActPoolRuleId
	}
	return 0
}

func (m *WishActivityPrizeLog) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *WishActivityPrizeLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 累计天数活动返回
type SumNumResp struct {
	SignNum                  *int64                  `protobuf:"varint,1,opt,name=SignNum" json:"SignNum,omitempty" bson:"SignNum,omitempty"`
	WishActivityPrizeLogList []*WishActivityPrizeLog `protobuf:"bytes,2,rep,name=WishActivityPrizeLogList" json:"WishActivityPrizeLogList,omitempty" bson:"WishActivityPrizeLogList,omitempty"`
	LastDayTime              *int64                  `protobuf:"varint,3,opt,name=LastDayTime" json:"LastDayTime,omitempty" bson:"LastDayTime,omitempty"`
	DayTimeList              []int64                 `protobuf:"varint,4,rep,name=DayTimeList" json:"DayTimeList,omitempty" bson:"DayTimeList,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-" bson:"-"`
	XXX_unrecognized         []byte                  `json:"-" bson:"-"`
	XXX_sizecache            int32                   `json:"-" bson:"-"`
}

func (m *SumNumResp) Reset()         { *m = SumNumResp{} }
func (m *SumNumResp) String() string { return proto.CompactTextString(m) }
func (*SumNumResp) ProtoMessage()    {}
func (*SumNumResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{113}
}
func (m *SumNumResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumNumResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumNumResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumNumResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumNumResp.Merge(m, src)
}
func (m *SumNumResp) XXX_Size() int {
	return m.Size()
}
func (m *SumNumResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SumNumResp.DiscardUnknown(m)
}

var xxx_messageInfo_SumNumResp proto.InternalMessageInfo

func (m *SumNumResp) GetSignNum() int64 {
	if m != nil && m.SignNum != nil {
		return *m.SignNum
	}
	return 0
}

func (m *SumNumResp) GetWishActivityPrizeLogList() []*WishActivityPrizeLog {
	if m != nil {
		return m.WishActivityPrizeLogList
	}
	return nil
}

func (m *SumNumResp) GetLastDayTime() int64 {
	if m != nil && m.LastDayTime != nil {
		return *m.LastDayTime
	}
	return 0
}

func (m *SumNumResp) GetDayTimeList() []int64 {
	if m != nil {
		return m.DayTimeList
	}
	return nil
}

type SumMoneyReq struct {
	DataType             *int64   `protobuf:"varint,2,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	Page                 *int32   `protobuf:"varint,3,opt,name=Page" json:"Page,omitempty" bson:"Page,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=PageSize" json:"PageSize,omitempty" bson:"PageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SumMoneyReq) Reset()         { *m = SumMoneyReq{} }
func (m *SumMoneyReq) String() string { return proto.CompactTextString(m) }
func (*SumMoneyReq) ProtoMessage()    {}
func (*SumMoneyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{114}
}
func (m *SumMoneyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumMoneyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumMoneyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumMoneyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumMoneyReq.Merge(m, src)
}
func (m *SumMoneyReq) XXX_Size() int {
	return m.Size()
}
func (m *SumMoneyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SumMoneyReq.DiscardUnknown(m)
}

var xxx_messageInfo_SumMoneyReq proto.InternalMessageInfo

func (m *SumMoneyReq) GetDataType() int64 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func (m *SumMoneyReq) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *SumMoneyReq) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type SumMoneyData struct {
	NickName             *string  `protobuf:"bytes,1,opt,name=NickName" json:"NickName,omitempty" bson:"NickName,omitempty"`
	HeadIcon             *string  `protobuf:"bytes,2,opt,name=HeadIcon" json:"HeadIcon,omitempty" bson:"HeadIcon,omitempty"`
	ProductIcon          *string  `protobuf:"bytes,3,opt,name=ProductIcon" json:"ProductIcon,omitempty" bson:"ProductIcon,omitempty"`
	ProductId            *string  `protobuf:"bytes,6,opt,name=ProductId" json:"ProductId,omitempty" bson:"ProductId,omitempty"`
	AwardType            *int32   `protobuf:"varint,14,opt,name=AwardType" json:"AwardType,omitempty" bson:"AwardType,omitempty"`
	ConSumDiamondNum     *int64   `protobuf:"varint,4,opt,name=ConSumDiamondNum" json:"ConSumDiamondNum,omitempty" bson:"ConSumDiamondNum,omitempty"`
	GiveDiamondNum       *int64   `protobuf:"varint,5,opt,name=GiveDiamondNum" json:"GiveDiamondNum,omitempty" bson:"GiveDiamondNum,omitempty"`
	PrizeLogId           *int64   `protobuf:"varint,7,opt,name=PrizeLogId" json:"PrizeLogId,omitempty" bson:"PrizeLogId,omitempty"`
	PlayerId             *int64   `protobuf:"varint,8,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *SumMoneyData) Reset()         { *m = SumMoneyData{} }
func (m *SumMoneyData) String() string { return proto.CompactTextString(m) }
func (*SumMoneyData) ProtoMessage()    {}
func (*SumMoneyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{115}
}
func (m *SumMoneyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumMoneyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumMoneyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumMoneyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumMoneyData.Merge(m, src)
}
func (m *SumMoneyData) XXX_Size() int {
	return m.Size()
}
func (m *SumMoneyData) XXX_DiscardUnknown() {
	xxx_messageInfo_SumMoneyData.DiscardUnknown(m)
}

var xxx_messageInfo_SumMoneyData proto.InternalMessageInfo

func (m *SumMoneyData) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *SumMoneyData) GetHeadIcon() string {
	if m != nil && m.HeadIcon != nil {
		return *m.HeadIcon
	}
	return ""
}

func (m *SumMoneyData) GetProductIcon() string {
	if m != nil && m.ProductIcon != nil {
		return *m.ProductIcon
	}
	return ""
}

func (m *SumMoneyData) GetProductId() string {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return ""
}

func (m *SumMoneyData) GetAwardType() int32 {
	if m != nil && m.AwardType != nil {
		return *m.AwardType
	}
	return 0
}

func (m *SumMoneyData) GetConSumDiamondNum() int64 {
	if m != nil && m.ConSumDiamondNum != nil {
		return *m.ConSumDiamondNum
	}
	return 0
}

func (m *SumMoneyData) GetGiveDiamondNum() int64 {
	if m != nil && m.GiveDiamondNum != nil {
		return *m.GiveDiamondNum
	}
	return 0
}

func (m *SumMoneyData) GetPrizeLogId() int64 {
	if m != nil && m.PrizeLogId != nil {
		return *m.PrizeLogId
	}
	return 0
}

func (m *SumMoneyData) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

type SumMoneyResp struct {
	SumMoneyDataList     []*SumMoneyData `protobuf:"bytes,1,rep,name=SumMoneyDataList" json:"SumMoneyDataList,omitempty" bson:"SumMoneyDataList,omitempty"`
	TotalCount           *int64          `protobuf:"varint,2,opt,name=TotalCount" json:"TotalCount,omitempty" bson:"TotalCount,omitempty"`
	TopNum               *int64          `protobuf:"varint,3,opt,name=TopNum" json:"TopNum,omitempty" bson:"TopNum,omitempty"`
	DiamondNum           *int64          `protobuf:"varint,4,opt,name=DiamondNum" json:"DiamondNum,omitempty" bson:"DiamondNum,omitempty"`
	Status               *int32          `protobuf:"varint,9,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *SumMoneyResp) Reset()         { *m = SumMoneyResp{} }
func (m *SumMoneyResp) String() string { return proto.CompactTextString(m) }
func (*SumMoneyResp) ProtoMessage()    {}
func (*SumMoneyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{116}
}
func (m *SumMoneyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumMoneyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumMoneyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumMoneyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumMoneyResp.Merge(m, src)
}
func (m *SumMoneyResp) XXX_Size() int {
	return m.Size()
}
func (m *SumMoneyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SumMoneyResp.DiscardUnknown(m)
}

var xxx_messageInfo_SumMoneyResp proto.InternalMessageInfo

func (m *SumMoneyResp) GetSumMoneyDataList() []*SumMoneyData {
	if m != nil {
		return m.SumMoneyDataList
	}
	return nil
}

func (m *SumMoneyResp) GetTotalCount() int64 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *SumMoneyResp) GetTopNum() int64 {
	if m != nil && m.TopNum != nil {
		return *m.TopNum
	}
	return 0
}

func (m *SumMoneyResp) GetDiamondNum() int64 {
	if m != nil && m.DiamondNum != nil {
		return *m.DiamondNum
	}
	return 0
}

func (m *SumMoneyResp) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 领奖请求
type GiveReq struct {
	//	optional int32 Type = 1;            //活动类型:1连续抽奖天数，2累计抽奖次数，3累计消费钻石排行
	//	optional int32 PrizeId = 2;         //奖项id:如活动类型是1时:奖项id分别是:7,14,21,28;活动类型是2时,奖项id分别是:10,20,30,40,50,活动类型是3时：7代表周榜奖励，30代表月榜奖励
	//	optional int64 WishActPoolId = 3;   //奖池id:1顶级奖池，2豪华奖池，不使用奖池默认0
	PrizeLogId           *int64   `protobuf:"varint,1,opt,name=PrizeLogId" json:"PrizeLogId,omitempty" bson:"PrizeLogId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GiveReq) Reset()         { *m = GiveReq{} }
func (m *GiveReq) String() string { return proto.CompactTextString(m) }
func (*GiveReq) ProtoMessage()    {}
func (*GiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{117}
}
func (m *GiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveReq.Merge(m, src)
}
func (m *GiveReq) XXX_Size() int {
	return m.Size()
}
func (m *GiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_GiveReq proto.InternalMessageInfo

func (m *GiveReq) GetPrizeLogId() int64 {
	if m != nil && m.PrizeLogId != nil {
		return *m.PrizeLogId
	}
	return 0
}

// 领奖返回
type GiveResp struct {
	Result               *int32   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	Diamond              *int64   `protobuf:"varint,2,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *GiveResp) Reset()         { *m = GiveResp{} }
func (m *GiveResp) String() string { return proto.CompactTextString(m) }
func (*GiveResp) ProtoMessage()    {}
func (*GiveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{118}
}
func (m *GiveResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveResp.Merge(m, src)
}
func (m *GiveResp) XXX_Size() int {
	return m.Size()
}
func (m *GiveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveResp.DiscardUnknown(m)
}

var xxx_messageInfo_GiveResp proto.InternalMessageInfo

func (m *GiveResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *GiveResp) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

//充值挡位
type WishCoinRechargeActivityCfg struct {
	//硬币额度
	Id *int64 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	//人民币额度 单位分
	Amount *int64 `protobuf:"varint,2,opt,name=Amount" json:"Amount,omitempty" bson:"Amount,omitempty"`
	//赠送钻石数
	Diamond *int64 `protobuf:"varint,3,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	//赠送电竞币数
	EsCoin *int64 `protobuf:"varint,4,opt,name=EsCoin" json:"EsCoin,omitempty" bson:"EsCoin,omitempty"`
	//赠送比例
	Ratio *int64 `protobuf:"varint,5,opt,name=Ratio" json:"Ratio,omitempty" bson:"Ratio,omitempty"`
	//是否已充值
	IsRecharge           *bool    `protobuf:"varint,6,opt,name=IsRecharge" json:"IsRecharge,omitempty" bson:"IsRecharge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishCoinRechargeActivityCfg) Reset()         { *m = WishCoinRechargeActivityCfg{} }
func (m *WishCoinRechargeActivityCfg) String() string { return proto.CompactTextString(m) }
func (*WishCoinRechargeActivityCfg) ProtoMessage()    {}
func (*WishCoinRechargeActivityCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{119}
}
func (m *WishCoinRechargeActivityCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishCoinRechargeActivityCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishCoinRechargeActivityCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishCoinRechargeActivityCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishCoinRechargeActivityCfg.Merge(m, src)
}
func (m *WishCoinRechargeActivityCfg) XXX_Size() int {
	return m.Size()
}
func (m *WishCoinRechargeActivityCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_WishCoinRechargeActivityCfg.DiscardUnknown(m)
}

var xxx_messageInfo_WishCoinRechargeActivityCfg proto.InternalMessageInfo

func (m *WishCoinRechargeActivityCfg) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetEsCoin() int64 {
	if m != nil && m.EsCoin != nil {
		return *m.EsCoin
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetRatio() int64 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

func (m *WishCoinRechargeActivityCfg) GetIsRecharge() bool {
	if m != nil && m.IsRecharge != nil {
		return *m.IsRecharge
	}
	return false
}

// 请求类型
type TypeReq struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *TypeReq) Reset()         { *m = TypeReq{} }
func (m *TypeReq) String() string { return proto.CompactTextString(m) }
func (*TypeReq) ProtoMessage()    {}
func (*TypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{120}
}
func (m *TypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeReq.Merge(m, src)
}
func (m *TypeReq) XXX_Size() int {
	return m.Size()
}
func (m *TypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_TypeReq proto.InternalMessageInfo

func (m *TypeReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

// 用户充值数据响应
type RechargeActResp struct {
	RechargeLevels       []*WishCoinRechargeActivityCfg `protobuf:"bytes,1,rep,name=RechargeLevels" json:"RechargeLevels,omitempty" bson:"RechargeLevels,omitempty"`
	PlayerCoin           *int64                         `protobuf:"varint,2,opt,name=PlayerCoin" json:"PlayerCoin,omitempty" bson:"PlayerCoin,omitempty"`
	PlayerDiamond        *int64                         `protobuf:"varint,3,opt,name=PlayerDiamond" json:"PlayerDiamond,omitempty" bson:"PlayerDiamond,omitempty"`
	PlayerEsCoin         *int64                         `protobuf:"varint,4,opt,name=PlayerEsCoin" json:"PlayerEsCoin,omitempty" bson:"PlayerEsCoin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-" bson:"-"`
	XXX_unrecognized     []byte                         `json:"-" bson:"-"`
	XXX_sizecache        int32                          `json:"-" bson:"-"`
}

func (m *RechargeActResp) Reset()         { *m = RechargeActResp{} }
func (m *RechargeActResp) String() string { return proto.CompactTextString(m) }
func (*RechargeActResp) ProtoMessage()    {}
func (*RechargeActResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{121}
}
func (m *RechargeActResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeActResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeActResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeActResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeActResp.Merge(m, src)
}
func (m *RechargeActResp) XXX_Size() int {
	return m.Size()
}
func (m *RechargeActResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeActResp.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeActResp proto.InternalMessageInfo

func (m *RechargeActResp) GetRechargeLevels() []*WishCoinRechargeActivityCfg {
	if m != nil {
		return m.RechargeLevels
	}
	return nil
}

func (m *RechargeActResp) GetPlayerCoin() int64 {
	if m != nil && m.PlayerCoin != nil {
		return *m.PlayerCoin
	}
	return 0
}

func (m *RechargeActResp) GetPlayerDiamond() int64 {
	if m != nil && m.PlayerDiamond != nil {
		return *m.PlayerDiamond
	}
	return 0
}

func (m *RechargeActResp) GetPlayerEsCoin() int64 {
	if m != nil && m.PlayerEsCoin != nil {
		return *m.PlayerEsCoin
	}
	return 0
}

// 用户充值获取记录数据
type RechargeLogs struct {
	PayMoney             *int64   `protobuf:"varint,1,opt,name=PayMoney" json:"PayMoney,omitempty" bson:"PayMoney,omitempty"`
	CoinNum              *int64   `protobuf:"varint,2,opt,name=CoinNum" json:"CoinNum,omitempty" bson:"CoinNum,omitempty"`
	GiveNum              *int64   `protobuf:"varint,3,opt,name=GiveNum" json:"GiveNum,omitempty" bson:"GiveNum,omitempty"`
	GiveType             *int32   `protobuf:"varint,4,opt,name=GiveType" json:"GiveType,omitempty" bson:"GiveType,omitempty"`
	CreateTime           *int64   `protobuf:"varint,5,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *RechargeLogs) Reset()         { *m = RechargeLogs{} }
func (m *RechargeLogs) String() string { return proto.CompactTextString(m) }
func (*RechargeLogs) ProtoMessage()    {}
func (*RechargeLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{122}
}
func (m *RechargeLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeLogs.Merge(m, src)
}
func (m *RechargeLogs) XXX_Size() int {
	return m.Size()
}
func (m *RechargeLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeLogs.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeLogs proto.InternalMessageInfo

func (m *RechargeLogs) GetPayMoney() int64 {
	if m != nil && m.PayMoney != nil {
		return *m.PayMoney
	}
	return 0
}

func (m *RechargeLogs) GetCoinNum() int64 {
	if m != nil && m.CoinNum != nil {
		return *m.CoinNum
	}
	return 0
}

func (m *RechargeLogs) GetGiveNum() int64 {
	if m != nil && m.GiveNum != nil {
		return *m.GiveNum
	}
	return 0
}

func (m *RechargeLogs) GetGiveType() int32 {
	if m != nil && m.GiveType != nil {
		return *m.GiveType
	}
	return 0
}

func (m *RechargeLogs) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 用户充值获取记录数据响应
type RechargeLogsResp struct {
	RechargeLogs         []*RechargeLogs `protobuf:"bytes,1,rep,name=rechargeLogs" json:"rechargeLogs,omitempty" bson:"rechargeLogs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" bson:"-"`
}

func (m *RechargeLogsResp) Reset()         { *m = RechargeLogsResp{} }
func (m *RechargeLogsResp) String() string { return proto.CompactTextString(m) }
func (*RechargeLogsResp) ProtoMessage()    {}
func (*RechargeLogsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{123}
}
func (m *RechargeLogsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RechargeLogsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RechargeLogsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RechargeLogsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RechargeLogsResp.Merge(m, src)
}
func (m *RechargeLogsResp) XXX_Size() int {
	return m.Size()
}
func (m *RechargeLogsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RechargeLogsResp.DiscardUnknown(m)
}

var xxx_messageInfo_RechargeLogsResp proto.InternalMessageInfo

func (m *RechargeLogsResp) GetRechargeLogs() []*RechargeLogs {
	if m != nil {
		return m.RechargeLogs
	}
	return nil
}

// 奖池列表
type ActPool struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	Name                 *string  `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	BoxNum               *int32   `protobuf:"varint,6,opt,name=BoxNum" json:"BoxNum,omitempty" bson:"BoxNum,omitempty"`
	CreateTime           *int64   `protobuf:"varint,7,opt,name=CreateTime" json:"CreateTime,omitempty" bson:"CreateTime,omitempty"`
	BoxIds               []int64  `protobuf:"varint,8,rep,name=BoxIds" json:"BoxIds,omitempty" bson:"BoxIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActPool) Reset()         { *m = ActPool{} }
func (m *ActPool) String() string { return proto.CompactTextString(m) }
func (*ActPool) ProtoMessage()    {}
func (*ActPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{124}
}
func (m *ActPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActPool.Merge(m, src)
}
func (m *ActPool) XXX_Size() int {
	return m.Size()
}
func (m *ActPool) XXX_DiscardUnknown() {
	xxx_messageInfo_ActPool.DiscardUnknown(m)
}

var xxx_messageInfo_ActPool proto.InternalMessageInfo

func (m *ActPool) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ActPool) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ActPool) GetBoxNum() int32 {
	if m != nil && m.BoxNum != nil {
		return *m.BoxNum
	}
	return 0
}

func (m *ActPool) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ActPool) GetBoxIds() []int64 {
	if m != nil {
		return m.BoxIds
	}
	return nil
}

// 奖池列表返回
type ActPoolResp struct {
	ActPoolList          []*ActPool `protobuf:"bytes,1,rep,name=ActPoolList" json:"ActPoolList,omitempty" bson:"ActPoolList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" bson:"-"`
	XXX_unrecognized     []byte     `json:"-" bson:"-"`
	XXX_sizecache        int32      `json:"-" bson:"-"`
}

func (m *ActPoolResp) Reset()         { *m = ActPoolResp{} }
func (m *ActPoolResp) String() string { return proto.CompactTextString(m) }
func (*ActPoolResp) ProtoMessage()    {}
func (*ActPoolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{125}
}
func (m *ActPoolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActPoolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActPoolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActPoolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActPoolResp.Merge(m, src)
}
func (m *ActPoolResp) XXX_Size() int {
	return m.Size()
}
func (m *ActPoolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ActPoolResp.DiscardUnknown(m)
}

var xxx_messageInfo_ActPoolResp proto.InternalMessageInfo

func (m *ActPoolResp) GetActPoolList() []*ActPool {
	if m != nil {
		return m.ActPoolList
	}
	return nil
}

// 奖池规则查询
type ActPoolRuleReq struct {
	ActPoolId            *int64   `protobuf:"varint,1,opt,name=ActPoolId" json:"ActPoolId,omitempty" bson:"ActPoolId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActPoolRuleReq) Reset()         { *m = ActPoolRuleReq{} }
func (m *ActPoolRuleReq) String() string { return proto.CompactTextString(m) }
func (*ActPoolRuleReq) ProtoMessage()    {}
func (*ActPoolRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{126}
}
func (m *ActPoolRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActPoolRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActPoolRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActPoolRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActPoolRuleReq.Merge(m, src)
}
func (m *ActPoolRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *ActPoolRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActPoolRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActPoolRuleReq proto.InternalMessageInfo

func (m *ActPoolRuleReq) GetActPoolId() int64 {
	if m != nil && m.ActPoolId != nil {
		return *m.ActPoolId
	}
	return 0
}

func (m *ActPoolRuleReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type WishActPoolRule struct {
	Id                   *int64   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty" bson:"Id,omitempty"`
	WishActPoolId        *int64   `protobuf:"varint,2,opt,name=WishActPoolId" json:"WishActPoolId,omitempty" bson:"WishActPoolId,omitempty"`
	Key                  *int32   `protobuf:"varint,11,opt,name=Key" json:"Key,omitempty" bson:"Key,omitempty"`
	Diamond              *int64   `protobuf:"varint,12,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	WishItemId           *int64   `protobuf:"varint,13,opt,name=WishItemId" json:"WishItemId,omitempty" bson:"WishItemId,omitempty"`
	AwardType            *int32   `protobuf:"varint,14,opt,name=AwardType" json:"AwardType,omitempty" bson:"AwardType,omitempty"`
	Type                 *int32   `protobuf:"varint,15,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *WishActPoolRule) Reset()         { *m = WishActPoolRule{} }
func (m *WishActPoolRule) String() string { return proto.CompactTextString(m) }
func (*WishActPoolRule) ProtoMessage()    {}
func (*WishActPoolRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{127}
}
func (m *WishActPoolRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WishActPoolRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WishActPoolRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WishActPoolRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WishActPoolRule.Merge(m, src)
}
func (m *WishActPoolRule) XXX_Size() int {
	return m.Size()
}
func (m *WishActPoolRule) XXX_DiscardUnknown() {
	xxx_messageInfo_WishActPoolRule.DiscardUnknown(m)
}

var xxx_messageInfo_WishActPoolRule proto.InternalMessageInfo

func (m *WishActPoolRule) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *WishActPoolRule) GetWishActPoolId() int64 {
	if m != nil && m.WishActPoolId != nil {
		return *m.WishActPoolId
	}
	return 0
}

func (m *WishActPoolRule) GetKey() int32 {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return 0
}

func (m *WishActPoolRule) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *WishActPoolRule) GetWishItemId() int64 {
	if m != nil && m.WishItemId != nil {
		return *m.WishItemId
	}
	return 0
}

func (m *WishActPoolRule) GetAwardType() int32 {
	if m != nil && m.AwardType != nil {
		return *m.AwardType
	}
	return 0
}

func (m *WishActPoolRule) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

//奖池规则查询返回
type ActPoolRuleResp struct {
	WishActPoolRuleList  []*WishActPoolRule `protobuf:"bytes,1,rep,name=WishActPoolRuleList" json:"WishActPoolRuleList,omitempty" bson:"WishActPoolRuleList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" bson:"-"`
	XXX_unrecognized     []byte             `json:"-" bson:"-"`
	XXX_sizecache        int32              `json:"-" bson:"-"`
}

func (m *ActPoolRuleResp) Reset()         { *m = ActPoolRuleResp{} }
func (m *ActPoolRuleResp) String() string { return proto.CompactTextString(m) }
func (*ActPoolRuleResp) ProtoMessage()    {}
func (*ActPoolRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{128}
}
func (m *ActPoolRuleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActPoolRuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActPoolRuleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActPoolRuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActPoolRuleResp.Merge(m, src)
}
func (m *ActPoolRuleResp) XXX_Size() int {
	return m.Size()
}
func (m *ActPoolRuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ActPoolRuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_ActPoolRuleResp proto.InternalMessageInfo

func (m *ActPoolRuleResp) GetWishActPoolRuleList() []*WishActPoolRule {
	if m != nil {
		return m.WishActPoolRuleList
	}
	return nil
}

type ActNameReq struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActNameReq) Reset()         { *m = ActNameReq{} }
func (m *ActNameReq) String() string { return proto.CompactTextString(m) }
func (*ActNameReq) ProtoMessage()    {}
func (*ActNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{129}
}
func (m *ActNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActNameReq.Merge(m, src)
}
func (m *ActNameReq) XXX_Size() int {
	return m.Size()
}
func (m *ActNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ActNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_ActNameReq proto.InternalMessageInfo

func (m *ActNameReq) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type ActNameResp struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty" bson:"Name,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActNameResp) Reset()         { *m = ActNameResp{} }
func (m *ActNameResp) String() string { return proto.CompactTextString(m) }
func (*ActNameResp) ProtoMessage()    {}
func (*ActNameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{130}
}
func (m *ActNameResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActNameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActNameResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActNameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActNameResp.Merge(m, src)
}
func (m *ActNameResp) XXX_Size() int {
	return m.Size()
}
func (m *ActNameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ActNameResp.DiscardUnknown(m)
}

var xxx_messageInfo_ActNameResp proto.InternalMessageInfo

func (m *ActNameResp) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ActNameResp) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type ActOpenStatusResp struct {
	Status               *bool    `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty" bson:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActOpenStatusResp) Reset()         { *m = ActOpenStatusResp{} }
func (m *ActOpenStatusResp) String() string { return proto.CompactTextString(m) }
func (*ActOpenStatusResp) ProtoMessage()    {}
func (*ActOpenStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{131}
}
func (m *ActOpenStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActOpenStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActOpenStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActOpenStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActOpenStatusResp.Merge(m, src)
}
func (m *ActOpenStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *ActOpenStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ActOpenStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_ActOpenStatusResp proto.InternalMessageInfo

func (m *ActOpenStatusResp) GetStatus() bool {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return false
}

// 后台工具抽奖请求
type BackstageDareToolReq struct {
	PoolId               *int64   `protobuf:"varint,1,opt,name=PoolId" json:"PoolId,omitempty" bson:"PoolId,omitempty"`
	Count                *int64   `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty" bson:"Count,omitempty"`
	Diamond              *int64   `protobuf:"varint,3,opt,name=Diamond" json:"Diamond,omitempty" bson:"Diamond,omitempty"`
	UserId               *int64   `protobuf:"varint,4,opt,name=UserId" json:"UserId,omitempty" bson:"UserId,omitempty"`
	WishBoxId            *int64   `protobuf:"varint,5,opt,name=WishBoxId" json:"WishBoxId,omitempty" bson:"WishBoxId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageDareToolReq) Reset()         { *m = BackstageDareToolReq{} }
func (m *BackstageDareToolReq) String() string { return proto.CompactTextString(m) }
func (*BackstageDareToolReq) ProtoMessage()    {}
func (*BackstageDareToolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{132}
}
func (m *BackstageDareToolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageDareToolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageDareToolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageDareToolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageDareToolReq.Merge(m, src)
}
func (m *BackstageDareToolReq) XXX_Size() int {
	return m.Size()
}
func (m *BackstageDareToolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageDareToolReq.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageDareToolReq proto.InternalMessageInfo

func (m *BackstageDareToolReq) GetPoolId() int64 {
	if m != nil && m.PoolId != nil {
		return *m.PoolId
	}
	return 0
}

func (m *BackstageDareToolReq) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *BackstageDareToolReq) GetDiamond() int64 {
	if m != nil && m.Diamond != nil {
		return *m.Diamond
	}
	return 0
}

func (m *BackstageDareToolReq) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *BackstageDareToolReq) GetWishBoxId() int64 {
	if m != nil && m.WishBoxId != nil {
		return *m.WishBoxId
	}
	return 0
}

// 后台工具抽奖返回
type BackstageDareToolResp struct {
	Result               *int64   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	DareCount            *int64   `protobuf:"varint,2,opt,name=DareCount" json:"DareCount,omitempty" bson:"DareCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageDareToolResp) Reset()         { *m = BackstageDareToolResp{} }
func (m *BackstageDareToolResp) String() string { return proto.CompactTextString(m) }
func (*BackstageDareToolResp) ProtoMessage()    {}
func (*BackstageDareToolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{133}
}
func (m *BackstageDareToolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageDareToolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageDareToolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageDareToolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageDareToolResp.Merge(m, src)
}
func (m *BackstageDareToolResp) XXX_Size() int {
	return m.Size()
}
func (m *BackstageDareToolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageDareToolResp.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageDareToolResp proto.InternalMessageInfo

func (m *BackstageDareToolResp) GetResult() int64 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *BackstageDareToolResp) GetDareCount() int64 {
	if m != nil && m.DareCount != nil {
		return *m.DareCount
	}
	return 0
}

// 后台清理抽奖工具数据返回
type BackstageClearToolDataResp struct {
	Result               *int64   `protobuf:"varint,1,opt,name=Result" json:"Result,omitempty" bson:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *BackstageClearToolDataResp) Reset()         { *m = BackstageClearToolDataResp{} }
func (m *BackstageClearToolDataResp) String() string { return proto.CompactTextString(m) }
func (*BackstageClearToolDataResp) ProtoMessage()    {}
func (*BackstageClearToolDataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7721d26ccc4e570f, []int{134}
}
func (m *BackstageClearToolDataResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackstageClearToolDataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BackstageClearToolDataResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BackstageClearToolDataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackstageClearToolDataResp.Merge(m, src)
}
func (m *BackstageClearToolDataResp) XXX_Size() int {
	return m.Size()
}
func (m *BackstageClearToolDataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BackstageClearToolDataResp.DiscardUnknown(m)
}

var xxx_messageInfo_BackstageClearToolDataResp proto.InternalMessageInfo

func (m *BackstageClearToolDataResp) GetResult() int64 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*WishNoticeAssistantReq)(nil), "h5_wish.WishNoticeAssistantReq")
	proto.RegisterType((*WishNoticeAssistantResp)(nil), "h5_wish.WishNoticeAssistantResp")
	proto.RegisterType((*QueryBoxReq)(nil), "h5_wish.QueryBoxReq")
	proto.RegisterType((*BoxProductName)(nil), "h5_wish.BoxProductName")
	proto.RegisterType((*BoxProductNameResp)(nil), "h5_wish.BoxProductNameResp")
	proto.RegisterType((*WishItemType)(nil), "h5_wish.WishItemType")
	proto.RegisterType((*SearchFoundResp)(nil), "h5_wish.SearchFoundResp")
	proto.RegisterType((*CollectBox)(nil), "h5_wish.CollectBox")
	proto.RegisterType((*QueryBox)(nil), "h5_wish.QueryBox")
	proto.RegisterType((*QueryBoxResp)(nil), "h5_wish.QueryBoxResp")
	proto.RegisterType((*MyWishReq)(nil), "h5_wish.MyWishReq")
	proto.RegisterType((*MyWishResp)(nil), "h5_wish.MyWishResp")
	proto.RegisterType((*Product)(nil), "h5_wish.Product")
	proto.RegisterType((*ProductShowResp)(nil), "h5_wish.ProductShowResp")
	proto.RegisterType((*BoxShow)(nil), "h5_wish.BoxShow")
	proto.RegisterType((*GetCoin)(nil), "h5_wish.GetCoin")
	proto.RegisterType((*GetCoinResp)(nil), "h5_wish.GetCoinResp")
	proto.RegisterType((*DareMessage)(nil), "h5_wish.DareMessage")
	proto.RegisterType((*UserInfoReq)(nil), "h5_wish.UserInfoReq")
	proto.RegisterType((*UserInfoResp)(nil), "h5_wish.UserInfoResp")
	proto.RegisterType((*AddCoinReq)(nil), "h5_wish.AddCoinReq")
	proto.RegisterType((*AddCoinResp)(nil), "h5_wish.AddCoinResp")
	proto.RegisterType((*AddGoldReq)(nil), "h5_wish.AddGoldReq")
	proto.RegisterType((*AddGoldResp)(nil), "h5_wish.AddGoldResp")
	proto.RegisterType((*GetProduct)(nil), "h5_wish.GetProduct")
	proto.RegisterType((*HomeMessageResp)(nil), "h5_wish.HomeMessageResp")
	proto.RegisterType((*RandProductResp)(nil), "h5_wish.RandProductResp")
	proto.RegisterType((*DareMessageResp)(nil), "h5_wish.DareMessageResp")
	proto.RegisterType((*Protector)(nil), "h5_wish.Protector")
	proto.RegisterType((*ProtectorResp)(nil), "h5_wish.ProtectorResp")
	proto.RegisterType((*ProtectorData)(nil), "h5_wish.ProtectorData")
	proto.RegisterType((*ProtectorDataResp)(nil), "h5_wish.ProtectorDataResp")
	proto.RegisterType((*Menu)(nil), "h5_wish.Menu")
	proto.RegisterType((*MenuResp)(nil), "h5_wish.MenuResp")
	proto.RegisterType((*ProductBrand)(nil), "h5_wish.ProductBrand")
	proto.RegisterType((*ProductBrandListResp)(nil), "h5_wish.ProductBrandListResp")
	proto.RegisterType((*SearchBoxReq)(nil), "h5_wish.SearchBoxReq")
	proto.RegisterType((*SearchBoxResp)(nil), "h5_wish.SearchBoxResp")
	proto.RegisterType((*BrandListResp)(nil), "h5_wish.BrandListResp")
	proto.RegisterType((*TypeListResp)(nil), "h5_wish.TypeListResp")
	proto.RegisterType((*DareRecommendResp)(nil), "h5_wish.DareRecommendResp")
	proto.RegisterType((*Ranking)(nil), "h5_wish.Ranking")
	proto.RegisterType((*RankingResp)(nil), "h5_wish.RankingResp")
	proto.RegisterType((*MyRecordResp)(nil), "h5_wish.MyRecordResp")
	proto.RegisterType((*MyDare)(nil), "h5_wish.MyDare")
	proto.RegisterType((*MyDareReq)(nil), "h5_wish.MyDareReq")
	proto.RegisterType((*MyDareResp)(nil), "h5_wish.MyDareResp")
	proto.RegisterType((*BoxReq)(nil), "h5_wish.BoxReq")
	proto.RegisterType((*BoxResp)(nil), "h5_wish.BoxResp")
	proto.RegisterType((*DareReq)(nil), "h5_wish.DareReq")
	proto.RegisterType((*WhoDare)(nil), "h5_wish.WhoDare")
	proto.RegisterType((*DareResp)(nil), "h5_wish.DareResp")
	proto.RegisterType((*DareRecordReq)(nil), "h5_wish.DareRecordReq")
	proto.RegisterType((*WishLog)(nil), "h5_wish.WishLog")
	proto.RegisterType((*WishOccupied)(nil), "h5_wish.WishOccupied")
	proto.RegisterType((*DefenderMsg)(nil), "h5_wish.DefenderMsg")
	proto.RegisterType((*DefenderMsgResp)(nil), "h5_wish.DefenderMsgResp")
	proto.RegisterType((*GotWishPlayer)(nil), "h5_wish.GotWishPlayer")
	proto.RegisterType((*GotWishPlayerResp)(nil), "h5_wish.GotWishPlayerResp")
	proto.RegisterType((*DareRecordResp)(nil), "h5_wish.DareRecordResp")
	proto.RegisterType((*ProductDetailReq)(nil), "h5_wish.ProductDetailReq")
	proto.RegisterType((*ProductDetail)(nil), "h5_wish.ProductDetail")
	proto.RegisterType((*BoxProductResp)(nil), "h5_wish.BoxProductResp")
	proto.RegisterType((*WishReq)(nil), "h5_wish.WishReq")
	proto.RegisterType((*WishResp)(nil), "h5_wish.WishResp")
	proto.RegisterType((*PostageResp)(nil), "h5_wish.PostageResp")
	proto.RegisterType((*DoDareReq)(nil), "h5_wish.DoDareReq")
	proto.RegisterType((*DoDareResp)(nil), "h5_wish.DoDareResp")
	proto.RegisterType((*BoxListResp)(nil), "h5_wish.BoxListResp")
	proto.RegisterType((*DataPageReq)(nil), "h5_wish.DataPageReq")
	proto.RegisterType((*CollectionBox)(nil), "h5_wish.CollectionBox")
	proto.RegisterType((*MyCollectedBoxResp)(nil), "h5_wish.MyCollectedBoxResp")
	proto.RegisterType((*DealBoxReq)(nil), "h5_wish.DealBoxReq")
	proto.RegisterType((*DefaultResp)(nil), "h5_wish.DefaultResp")
	proto.RegisterType((*ProductResp)(nil), "h5_wish.ProductResp")
	proto.RegisterType((*RecycleReq)(nil), "h5_wish.RecycleReq")
	proto.RegisterType((*WishBoxReq)(nil), "h5_wish.WishBoxReq")
	proto.RegisterType((*CollectionBoxReq)(nil), "h5_wish.CollectionBoxReq")
	proto.RegisterType((*WishAddress)(nil), "h5_wish.WishAddress")
	proto.RegisterType((*RemoveAddressReq)(nil), "h5_wish.RemoveAddressReq")
	proto.RegisterType((*AddressListResp)(nil), "h5_wish.AddressListResp")
	proto.RegisterType((*PresaleReq)(nil), "h5_wish.PresaleReq")
	proto.RegisterType((*SetExpressInfoReq)(nil), "h5_wish.SetExpressInfoReq")
	proto.RegisterType((*GetExpressInfoReq)(nil), "h5_wish.GetExpressInfoReq")
	proto.RegisterType((*GetExpressInfoResp)(nil), "h5_wish.GetExpressInfoResp")
	proto.RegisterType((*LoginReq)(nil), "h5_wish.LoginReq")
	proto.RegisterType((*LoginResp)(nil), "h5_wish.LoginResp")
	proto.RegisterType((*JustNumberResp)(nil), "h5_wish.JustNumberResp")
	proto.RegisterType((*CoinToDiamondReq)(nil), "h5_wish.CoinToDiamondReq")
	proto.RegisterType((*CoinToDiamondResq)(nil), "h5_wish.CoinToDiamondResq")
	proto.RegisterType((*BankCardInfo)(nil), "h5_wish.BankCardInfo")
	proto.RegisterType((*BankCardResp)(nil), "h5_wish.BankCardResp")
	proto.RegisterType((*RecycleToHall)(nil), "h5_wish.RecycleToHall")
	proto.RegisterType((*DiamondRecharge)(nil), "h5_wish.DiamondRecharge")
	proto.RegisterType((*DiamondRechargeResp)(nil), "h5_wish.DiamondRechargeResp")
	proto.RegisterType((*DiamondChangeLogReq)(nil), "h5_wish.DiamondChangeLogReq")
	proto.RegisterType((*DiamondChangeLog)(nil), "h5_wish.DiamondChangeLog")
	proto.RegisterType((*DiamondChangeLogResp)(nil), "h5_wish.DiamondChangeLogResp")
	proto.RegisterType((*PriceSection)(nil), "h5_wish.PriceSection")
	proto.RegisterType((*PriceSectionResp)(nil), "h5_wish.PriceSectionResp")
	proto.RegisterType((*WishCurrencyConversionCfg)(nil), "h5_wish.WishCurrencyConversionCfg")
	proto.RegisterType((*ConfigResp)(nil), "h5_wish.ConfigResp")
	proto.RegisterType((*BatchDareReq)(nil), "h5_wish.BatchDareReq")
	proto.RegisterType((*BatchDareResp)(nil), "h5_wish.BatchDareResp")
	proto.RegisterType((*BackStageAddDiamondReq)(nil), "h5_wish.BackStageAddDiamondReq")
	proto.RegisterType((*BackStageUpdateDiamondReq)(nil), "h5_wish.BackStageUpdateDiamondReq")
	proto.RegisterType((*BackStageAddDiamondResp)(nil), "h5_wish.BackStageAddDiamondResp")
	proto.RegisterType((*BackstageSetGuardianReq)(nil), "h5_wish.BackstageSetGuardianReq")
	proto.RegisterType((*BackstageSetGuardianResp)(nil), "h5_wish.BackstageSetGuardianResp")
	proto.RegisterType((*PlayCfgResp)(nil), "h5_wish.PlayCfgResp")
	proto.RegisterType((*OrderMsgResp)(nil), "h5_wish.OrderMsgResp")
	proto.RegisterType((*SumReq)(nil), "h5_wish.SumReq")
	proto.RegisterType((*WishActivityPrizeLog)(nil), "h5_wish.WishActivityPrizeLog")
	proto.RegisterType((*SumNumResp)(nil), "h5_wish.SumNumResp")
	proto.RegisterType((*SumMoneyReq)(nil), "h5_wish.SumMoneyReq")
	proto.RegisterType((*SumMoneyData)(nil), "h5_wish.SumMoneyData")
	proto.RegisterType((*SumMoneyResp)(nil), "h5_wish.SumMoneyResp")
	proto.RegisterType((*GiveReq)(nil), "h5_wish.GiveReq")
	proto.RegisterType((*GiveResp)(nil), "h5_wish.GiveResp")
	proto.RegisterType((*WishCoinRechargeActivityCfg)(nil), "h5_wish.WishCoinRechargeActivityCfg")
	proto.RegisterType((*TypeReq)(nil), "h5_wish.TypeReq")
	proto.RegisterType((*RechargeActResp)(nil), "h5_wish.RechargeActResp")
	proto.RegisterType((*RechargeLogs)(nil), "h5_wish.RechargeLogs")
	proto.RegisterType((*RechargeLogsResp)(nil), "h5_wish.RechargeLogsResp")
	proto.RegisterType((*ActPool)(nil), "h5_wish.ActPool")
	proto.RegisterType((*ActPoolResp)(nil), "h5_wish.ActPoolResp")
	proto.RegisterType((*ActPoolRuleReq)(nil), "h5_wish.ActPoolRuleReq")
	proto.RegisterType((*WishActPoolRule)(nil), "h5_wish.WishActPoolRule")
	proto.RegisterType((*ActPoolRuleResp)(nil), "h5_wish.ActPoolRuleResp")
	proto.RegisterType((*ActNameReq)(nil), "h5_wish.ActNameReq")
	proto.RegisterType((*ActNameResp)(nil), "h5_wish.ActNameResp")
	proto.RegisterType((*ActOpenStatusResp)(nil), "h5_wish.ActOpenStatusResp")
	proto.RegisterType((*BackstageDareToolReq)(nil), "h5_wish.BackstageDareToolReq")
	proto.RegisterType((*BackstageDareToolResp)(nil), "h5_wish.BackstageDareToolResp")
	proto.RegisterType((*BackstageClearToolDataResp)(nil), "h5_wish.BackstageClearToolDataResp")
}

func init() { proto.RegisterFile("h5_wish.proto", fileDescriptor_7721d26ccc4e570f) }

var fileDescriptor_7721d26ccc4e570f = []byte{
	// 5053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3b, 0x4d, 0x73, 0x1c, 0xd7,
	0x56, 0x35, 0x9a, 0x19, 0x69, 0x74, 0xe6, 0x4b, 0xd3, 0xfa, 0xf0, 0x58, 0x89, 0x1d, 0xd3, 0x49,
	0xc0, 0x79, 0x09, 0x49, 0xec, 0x24, 0xcf, 0x49, 0x1c, 0x3f, 0x3f, 0x69, 0x64, 0xcb, 0xc3, 0x93,
	0x2c, 0xbd, 0x19, 0x9b, 0x3c, 0x16, 0xf0, 0xe8, 0x74, 0x5f, 0x8f, 0xba, 0xdc, 0xd3, 0x3d, 0xe9,
	0xee, 0x51, 0x34, 0xa9, 0xa2, 0xd8, 0xf1, 0x58, 0x50, 0x40, 0xc1, 0x8a, 0x0d, 0x7b, 0x28, 0xaa,
	0x58, 0xc1, 0x82, 0x05, 0x3b, 0xaa, 0x60, 0x05, 0xac, 0xd8, 0x52, 0x29, 0xaa, 0xf8, 0x1b, 0xd4,
	0x3d, 0xf7, 0xa3, 0xcf, 0xed, 0xee, 0xb1, 0xad, 0x40, 0x3d, 0x76, 0x9a, 0xdb, 0xf7, 0xdc, 0x7b,
	0xee, 0xf9, 0xfe, 0x12, 0xb4, 0xcf, 0x3e, 0xf9, 0xf9, 0x37, 0x7e, 0x72, 0xf6, 0xfe, 0x2c, 0x8e,
	0xd2, 0xc8, 0x5a, 0x93, 0x3f, 0x77, 0xe1, 0x2b, 0x27, 0x61, 0x62, 0xd1, 0x7e, 0x0a, 0x3b, 0x5f,
	0xfa, 0xc9, 0xd9, 0xe3, 0x28, 0xf5, 0x5d, 0xb6, 0x97, 0x24, 0x7e, 0x92, 0x3a, 0x61, 0x3a, 0x62,
	0x5f, 0x5b, 0x1b, 0xd0, 0x38, 0x0d, 0x9c, 0x05, 0x8b, 0x87, 0x5e, 0xbf, 0x72, 0xa3, 0x72, 0xb3,
	0x6a, 0x6d, 0x41, 0x8b, 0xef, 0xd5, 0xab, 0x55, 0x5c, 0xdd, 0x84, 0xe6, 0x69, 0x1c, 0x79, 0x73,
	0x37, 0x7d, 0xec, 0x4c, 0x59, 0x7f, 0xe5, 0x46, 0xe5, 0xe6, 0xba, 0xfd, 0x0e, 0x5c, 0x29, 0x3d,
	0x36, 0x99, 0x59, 0x1d, 0x58, 0x1d, 0xb1, 0x64, 0x1e, 0xa4, 0x78, 0x6a, 0xdd, 0xfe, 0x35, 0x68,
	0xfe, 0x74, 0xce, 0xe2, 0xc5, 0x7e, 0x74, 0xc1, 0xaf, 0x05, 0x58, 0xd1, 0x17, 0xb6, 0xa0, 0xf6,
	0x64, 0x31, 0x13, 0x67, 0xd6, 0xed, 0x4f, 0xa1, 0xb3, 0x1f, 0x5d, 0x90, 0xbb, 0xf2, 0x7b, 0xb3,
	0xfb, 0x35, 0x64, 0x15, 0x21, 0x1f, 0x82, 0x65, 0x42, 0x22, 0x22, 0x1f, 0x42, 0xd7, 0x5c, 0x4d,
	0xfa, 0x95, 0x1b, 0xd5, 0x9b, 0xcd, 0xdb, 0x57, 0xde, 0x57, 0x84, 0x33, 0xbf, 0xdb, 0xf7, 0x04,
	0x01, 0x86, 0x29, 0x9b, 0xf2, 0xd3, 0x5f, 0x70, 0xff, 0x26, 0x34, 0x87, 0xc9, 0x88, 0xb9, 0xd1,
	0x74, 0xca, 0x42, 0xaf, 0x5f, 0xbb, 0x51, 0xb9, 0xd9, 0xb0, 0xef, 0x43, 0x77, 0xcc, 0x9c, 0xd8,
	0x3d, 0x7b, 0x18, 0xcd, 0x43, 0x0f, 0x71, 0x78, 0x0f, 0xda, 0xf4, 0x44, 0x85, 0xc1, 0xb6, 0xc6,
	0x80, 0x7e, 0xb5, 0xff, 0xbd, 0x02, 0x30, 0x88, 0x82, 0x80, 0xb9, 0xe9, 0x7e, 0x74, 0x61, 0x35,
	0xa1, 0xfa, 0x73, 0x7f, 0xe9, 0xfb, 0x87, 0x6e, 0x14, 0xe2, 0xfb, 0xf1, 0xd7, 0x01, 0x4b, 0x5c,
	0x44, 0x63, 0x9d, 0x33, 0xf6, 0x49, 0x94, 0x3a, 0xc1, 0xe3, 0xf9, 0xb4, 0x5f, 0xe7, 0xf4, 0xb1,
	0xba, 0xb0, 0x36, 0x72, 0x62, 0xc6, 0x17, 0x56, 0x71, 0xa1, 0x0d, 0xf5, 0xd3, 0xd8, 0x77, 0x59,
	0x7f, 0x0d, 0xcf, 0xde, 0x16, 0x58, 0xee, 0x47, 0x17, 0x1c, 0x95, 0xa1, 0xd7, 0x6f, 0xe0, 0x72,
	0x0f, 0xd6, 0xd5, 0xb2, 0xd7, 0x5f, 0xc7, 0xa5, 0x0e, 0xac, 0x8e, 0x53, 0x27, 0x9d, 0x27, 0x7d,
	0xc0, 0x83, 0x7a, 0xb0, 0x3e, 0x4c, 0x4e, 0x63, 0x36, 0x76, 0x02, 0xd6, 0x6f, 0x72, 0x2a, 0xf0,
	0xb3, 0x8f, 0x9d, 0xd4, 0x3d, 0xeb, 0xb7, 0x90, 0x37, 0xff, 0xba, 0x02, 0x0d, 0xc5, 0xff, 0x17,
	0x10, 0xb4, 0x0d, 0xf5, 0xe1, 0xd4, 0x99, 0xb0, 0xd2, 0x17, 0xf1, 0x8f, 0x29, 0x9b, 0x26, 0xfd,
	0xfa, 0x8d, 0xea, 0xcd, 0x6a, 0x86, 0xfd, 0x2a, 0xc5, 0xfe, 0xa1, 0x9f, 0x9c, 0x0d, 0xa2, 0x79,
	0x98, 0xca, 0x47, 0xb5, 0xa1, 0x1e, 0x38, 0x5f, 0xb1, 0x00, 0x1f, 0x53, 0x27, 0x62, 0x8c, 0x82,
	0xb3, 0x8e, 0x8b, 0xdb, 0xd0, 0x96, 0x8b, 0xc6, 0xab, 0x36, 0xa1, 0xb9, 0x17, 0xc7, 0xfe, 0xb9,
	0x13, 0x3c, 0xf1, 0xa7, 0xe2, 0x5d, 0x55, 0x4e, 0xc4, 0xfd, 0xe8, 0x02, 0x81, 0x5b, 0xea, 0xed,
	0xa7, 0x71, 0x94, 0x32, 0x37, 0x8d, 0xe2, 0x7e, 0x1b, 0x11, 0xed, 0xc3, 0x86, 0x5e, 0x7a, 0xc4,
	0x1c, 0xef, 0x69, 0x1c, 0xf4, 0x3b, 0xf8, 0x45, 0xdc, 0x24, 0xbe, 0xe0, 0xa1, 0x5d, 0x75, 0xe8,
	0x21, 0x4b, 0x07, 0x91, 0x1f, 0xf6, 0x37, 0x70, 0x81, 0x32, 0xaf, 0x97, 0x67, 0x9e, 0x85, 0x14,
	0xfd, 0x10, 0x5a, 0x99, 0x42, 0x25, 0x33, 0xeb, 0x06, 0xd4, 0xf7, 0xa3, 0x0b, 0x2d, 0x5b, 0x3d,
	0x2d, 0x5b, 0x6a, 0x97, 0xfd, 0x19, 0xac, 0x1f, 0x2f, 0x38, 0x8d, 0xb8, 0x02, 0xb6, 0xa0, 0x76,
	0xca, 0x09, 0x8d, 0xda, 0x89, 0x56, 0xc0, 0x99, 0xb0, 0xb1, 0xff, 0xad, 0x54, 0xc3, 0x9c, 0x6a,
	0xdd, 0x03, 0x50, 0xa0, 0xaf, 0x72, 0x15, 0xa7, 0xba, 0x60, 0x82, 0xd0, 0xe9, 0x3f, 0xa8, 0xc2,
	0x9a, 0xa4, 0xb0, 0xc1, 0xfc, 0x1c, 0x37, 0xf4, 0xcd, 0xa6, 0x50, 0xa3, 0x7c, 0x68, 0x11, 0x10,
	0x72, 0x58, 0x57, 0xcc, 0xa5, 0x22, 0x20, 0x58, 0xc1, 0x8f, 0xd3, 0xc2, 0x8b, 0x37, 0xb0, 0x47,
	0xce, 0x39, 0x43, 0x72, 0xaf, 0xab, 0x7d, 0x99, 0xb8, 0x02, 0x8a, 0xab, 0x60, 0x2b, 0xde, 0xd4,
	0xd4, 0x3c, 0x44, 0x0b, 0xa8, 0x54, 0x73, 0xe8, 0x21, 0xc3, 0x51, 0xf8, 0x87, 0x09, 0x5f, 0x45,
	0x6e, 0x37, 0x2c, 0x0b, 0xe0, 0xc1, 0xc5, 0xcc, 0x8f, 0xc5, 0x0d, 0x9d, 0xec, 0x06, 0x7e, 0xfc,
	0xc9, 0x3c, 0x45, 0x1e, 0xe3, 0xb6, 0x61, 0x72, 0xec, 0x3c, 0x67, 0x08, 0xfa, 0x86, 0xa9, 0x24,
	0x1b, 0xf8, 0xf2, 0x2d, 0x68, 0x8d, 0x98, 0xbb, 0x70, 0x03, 0x26, 0x5e, 0xd5, 0xc3, 0xb3, 0x2c,
	0x80, 0x41, 0x1a, 0x07, 0x52, 0x34, 0x2d, 0x25, 0x0d, 0x07, 0xbe, 0x33, 0x8d, 0x42, 0xaf, 0xbf,
	0xa9, 0xde, 0x29, 0x41, 0x91, 0x92, 0x5b, 0x8a, 0xab, 0x87, 0xfe, 0xb9, 0x58, 0xd9, 0xe6, 0xdb,
	0xec, 0x4f, 0xa0, 0xab, 0x24, 0xfd, 0x2c, 0xfa, 0x06, 0x99, 0x69, 0x43, 0x43, 0x2e, 0x29, 0x7e,
	0x6e, 0x68, 0x7e, 0xca, 0x0f, 0xf6, 0x5f, 0xad, 0x20, 0x79, 0x38, 0xcc, 0xff, 0x42, 0x79, 0x5f,
	0x4d, 0x5b, 0x8f, 0xbe, 0xa7, 0xb6, 0xbe, 0x5c, 0x65, 0x38, 0x7d, 0x4f, 0x5c, 0x77, 0x3e, 0xf3,
	0x99, 0x87, 0xbc, 0xda, 0x54, 0xca, 0xc7, 0x35, 0x8f, 0x6f, 0xdb, 0x52, 0x70, 0x4a, 0x6b, 0xb7,
	0x95, 0x2c, 0x1c, 0xce, 0x9d, 0xd8, 0xf3, 0x9d, 0x50, 0x7b, 0xc5, 0x1d, 0xc5, 0x67, 0x2e, 0x5b,
	0x5c, 0x1e, 0xc2, 0xbe, 0x8d, 0xe6, 0xff, 0x91, 0xd6, 0xe5, 0x12, 0xdf, 0x6a, 0x12, 0x8c, 0x5c,
	0xa4, 0x49, 0x86, 0x46, 0xa0, 0x86, 0xcc, 0xba, 0x05, 0x4d, 0x79, 0x92, 0x62, 0x94, 0xfc, 0x59,
	0x64, 0x94, 0xfc, 0x60, 0xff, 0x08, 0x9a, 0x07, 0x4e, 0xcc, 0x8e, 0x59, 0x92, 0x38, 0x13, 0x76,
	0x69, 0x04, 0xec, 0x6b, 0xd0, 0x7c, 0x9a, 0xb0, 0x78, 0x18, 0x3e, 0x8b, 0xb8, 0x91, 0xe8, 0xc0,
	0x2a, 0xfe, 0x94, 0xd0, 0xf6, 0xdf, 0x54, 0xa0, 0x95, 0x7d, 0x17, 0x5e, 0x9e, 0x6e, 0xc8, 0x1d,
	0xdf, 0x84, 0xea, 0x98, 0x5d, 0x08, 0x13, 0x42, 0xef, 0xaa, 0x19, 0x8f, 0xad, 0x2b, 0x8b, 0x37,
	0x4c, 0x9e, 0xc4, 0x8b, 0x93, 0x50, 0x88, 0x48, 0x83, 0xca, 0xf8, 0x9a, 0x62, 0xd4, 0x9e, 0xeb,
	0xa2, 0xb4, 0x34, 0x14, 0xfa, 0xc3, 0xe4, 0xa1, 0x1f, 0x27, 0xa9, 0x54, 0xc5, 0x36, 0xd4, 0x85,
	0x7f, 0x7d, 0x0b, 0xcd, 0xce, 0x09, 0xc0, 0x9e, 0xe7, 0x09, 0x02, 0x7e, 0x5d, 0x86, 0x2b, 0xde,
	0xbf, 0xa2, 0xb4, 0x6c, 0x1c, 0xcd, 0x63, 0x97, 0x65, 0x56, 0x8f, 0x62, 0x20, 0x38, 0x72, 0x17,
	0x9a, 0xfa, 0xc0, 0x62, 0x8c, 0x43, 0x6e, 0x58, 0x31, 0x6e, 0xc0, 0x08, 0xca, 0xfe, 0x11, 0x62,
	0x73, 0x18, 0x05, 0xde, 0xf7, 0xc2, 0x46, 0x5e, 0x2e, 0xe0, 0x2f, 0x7d, 0xf9, 0xb7, 0x00, 0x87,
	0x2c, 0x55, 0x36, 0xb8, 0x28, 0x17, 0x16, 0x80, 0x58, 0x79, 0x91, 0x78, 0x1a, 0xf6, 0xb5, 0x56,
	0x16, 0x16, 0xd6, 0x4d, 0x43, 0xb0, 0x8a, 0x42, 0x35, 0x81, 0xee, 0xa3, 0x68, 0xaa, 0x84, 0x12,
	0x91, 0xff, 0x01, 0xb4, 0x88, 0x9c, 0x2a, 0x79, 0xde, 0xd2, 0xf2, 0x4c, 0x85, 0xf8, 0x26, 0xaa,
	0x81, 0xb6, 0x51, 0x2b, 0xb8, 0x75, 0x93, 0x8a, 0xbe, 0x32, 0x53, 0x77, 0xa1, 0x3b, 0x72, 0x42,
	0x4f, 0xfe, 0xc4, 0x8b, 0x72, 0xc0, 0x95, 0xe5, 0xc0, 0xf7, 0xa0, 0x4b, 0x6e, 0xbd, 0x2c, 0x96,
	0xf6, 0x37, 0x24, 0x0c, 0xf8, 0xbe, 0xf4, 0xed, 0xc0, 0x2a, 0x7a, 0xb7, 0xa4, 0x5f, 0xc3, 0x08,
	0xa7, 0x10, 0x2d, 0xd4, 0x0d, 0xce, 0xa2, 0x25, 0xb5, 0xef, 0x90, 0x4d, 0x88, 0xf5, 0xaf, 0x02,
	0xe8, 0x05, 0x85, 0xb3, 0x45, 0x4d, 0xba, 0xf8, 0x64, 0x7f, 0x40, 0x00, 0x0f, 0x9c, 0xd4, 0xc9,
	0x9c, 0x6b, 0x45, 0xa9, 0x9b, 0x69, 0x1c, 0xee, 0x43, 0xcf, 0x00, 0x90, 0x34, 0x2a, 0xde, 0xb6,
	0x53, 0xbc, 0x8d, 0xef, 0xb7, 0x6f, 0x40, 0xed, 0x98, 0x85, 0xf3, 0xe5, 0x2e, 0xc4, 0xbe, 0x09,
	0x0d, 0xbe, 0x03, 0x4f, 0x7e, 0x1d, 0xea, 0xfc, 0x6f, 0x75, 0x68, 0x5b, 0x1f, 0xca, 0x57, 0xed,
	0x3b, 0xd0, 0x92, 0x9c, 0xdb, 0x8f, 0x9d, 0xd0, 0x7b, 0x89, 0x5b, 0x4a, 0x1e, 0x45, 0xa9, 0x0c,
	0xcf, 0x0f, 0x61, 0x8b, 0x02, 0x1e, 0xf9, 0x89, 0x90, 0x94, 0x0f, 0x30, 0x68, 0x33, 0xd6, 0x0b,
	0x61, 0x3a, 0xdd, 0x60, 0xff, 0x4b, 0x05, 0x5a, 0x22, 0xd0, 0x97, 0x39, 0x0d, 0x3a, 0x92, 0xe9,
	0x2c, 0x60, 0x17, 0x52, 0x25, 0x7b, 0xb0, 0x3e, 0x88, 0x42, 0xcf, 0x4f, 0xfd, 0x28, 0x94, 0xc1,
	0x4d, 0xc1, 0x79, 0x55, 0x95, 0xf3, 0x3a, 0xf6, 0x43, 0xe1, 0x20, 0x6b, 0xca, 0x1e, 0x1e, 0x3b,
	0x17, 0x62, 0xa5, 0xae, 0x54, 0x0d, 0xe3, 0x70, 0x7e, 0xf9, 0xd0, 0xeb, 0xaf, 0xa2, 0x88, 0xec,
	0x40, 0x87, 0xe6, 0x0e, 0x43, 0x6e, 0x2b, 0xab, 0xd4, 0x91, 0x82, 0x8a, 0xa9, 0x30, 0xda, 0x6b,
	0x14, 0xa2, 0x3d, 0xf4, 0xa9, 0xf6, 0x03, 0x68, 0x93, 0xa7, 0x24, 0x33, 0xeb, 0x6d, 0x68, 0x4a,
	0x87, 0x4f, 0x08, 0xb1, 0x41, 0x33, 0x26, 0x0c, 0x06, 0x72, 0x71, 0x9e, 0x0d, 0x6d, 0x93, 0xa8,
	0x3d, 0x58, 0xa7, 0xd4, 0xe4, 0x2c, 0xbe, 0x01, 0x2d, 0x8e, 0xa9, 0xde, 0xc2, 0xfd, 0xb6, 0xfc,
	0x2d, 0x77, 0xdc, 0x85, 0x1e, 0xd7, 0x2c, 0x9d, 0x57, 0x5d, 0x4a, 0xaa, 0x19, 0x77, 0xfa, 0xe1,
	0x73, 0x3f, 0x9c, 0x5c, 0xde, 0xfd, 0xee, 0x40, 0x47, 0x1f, 0x24, 0x9e, 0x55, 0x53, 0x5e, 0x9e,
	0x2b, 0x9c, 0x58, 0xaa, 0x2b, 0xdf, 0x2c, 0xaf, 0x51, 0xbe, 0x59, 0xfe, 0x2c, 0xfa, 0x66, 0xf9,
	0xc1, 0xfe, 0x0c, 0x5a, 0xc7, 0x0b, 0xfe, 0xa8, 0xd8, 0x53, 0xb4, 0xe1, 0xcf, 0x14, 0xa7, 0x0a,
	0x81, 0xd9, 0x81, 0x0e, 0xc6, 0x30, 0xd9, 0x6d, 0x68, 0xcb, 0xed, 0x53, 0x58, 0x3d, 0x5e, 0xf0,
	0xcd, 0x79, 0x1d, 0xd5, 0x96, 0x76, 0xa5, 0x3c, 0xbd, 0xa8, 0x16, 0xf1, 0x17, 0x9e, 0xec, 0x5d,
	0x9e, 0x0b, 0x08, 0x2a, 0xbf, 0x34, 0x17, 0xb0, 0xef, 0xf2, 0xe8, 0x5f, 0x6c, 0x4e, 0x66, 0xd6,
	0x75, 0xa8, 0xf3, 0xbf, 0xd5, 0x43, 0xbb, 0x99, 0x5e, 0x6a, 0x14, 0xa9, 0x4c, 0xbc, 0x8d, 0x46,
	0x8d, 0x5f, 0x93, 0xc3, 0xdd, 0x4c, 0xfb, 0xff, 0x48, 0x84, 0x98, 0x78, 0x43, 0x6e, 0xa3, 0xf0,
	0x31, 0xe2, 0x55, 0xda, 0xbd, 0x19, 0x69, 0x57, 0x75, 0x69, 0xda, 0x55, 0x2b, 0xa7, 0x8b, 0xd0,
	0xa8, 0xb7, 0xb5, 0xf3, 0x42, 0xe9, 0x5b, 0x2d, 0x8f, 0x7e, 0x49, 0xb6, 0xdb, 0x52, 0x61, 0xe4,
	0x30, 0x91, 0x09, 0x3a, 0xd7, 0x6c, 0x11, 0x7b, 0x6c, 0x40, 0x03, 0xeb, 0x08, 0x5c, 0x61, 0x3b,
	0x24, 0x55, 0xc4, 0x5c, 0xa6, 0x4b, 0xd0, 0x20, 0xca, 0x2f, 0xc2, 0x7e, 0x1e, 0xe0, 0xc7, 0xcc,
	0x49, 0x45, 0x02, 0x81, 0x41, 0xbf, 0xdd, 0x87, 0x35, 0xc5, 0x1d, 0x93, 0x1a, 0x5c, 0xc0, 0xbf,
	0x3c, 0x8b, 0x90, 0xd2, 0x2f, 0x13, 0x70, 0x91, 0x85, 0xcc, 0x5d, 0x97, 0x25, 0xc2, 0xd0, 0x20,
	0x96, 0x9c, 0x34, 0x88, 0xd4, 0x8b, 0x68, 0x63, 0xbf, 0x0b, 0x0d, 0xcd, 0xf1, 0x37, 0x4c, 0x8e,
	0x67, 0x14, 0x92, 0x88, 0xd8, 0x47, 0xd0, 0x56, 0x1a, 0x1b, 0x7b, 0x2f, 0x63, 0xb5, 0x16, 0xb7,
	0x6a, 0x41, 0xdc, 0x6a, 0x28, 0x0a, 0xff, 0x51, 0x81, 0x35, 0x6e, 0xd4, 0x8e, 0xa2, 0x89, 0x61,
	0xd6, 0x8d, 0x42, 0xc4, 0x8a, 0xca, 0xc5, 0xf8, 0xc5, 0xba, 0x4a, 0xb5, 0x21, 0xb0, 0x26, 0x19,
	0x23, 0x67, 0x0b, 0x93, 0x7b, 0xea, 0xca, 0x15, 0x8b, 0x15, 0xdc, 0x85, 0x21, 0x4a, 0x8e, 0x05,
	0x6b, 0xea, 0x6c, 0x19, 0x60, 0x35, 0x90, 0x74, 0x57, 0xa0, 0x3b, 0x38, 0x73, 0x82, 0x80, 0x85,
	0x13, 0x26, 0x13, 0xc2, 0x75, 0x55, 0x30, 0xe3, 0xc7, 0x69, 0xba, 0x82, 0x3a, 0xf2, 0x80, 0x3d,
	0x63, 0xa1, 0x97, 0x15, 0x0f, 0xec, 0x7f, 0xac, 0x88, 0xd2, 0x92, 0xca, 0x42, 0x5e, 0xf6, 0xbc,
	0x0d, 0x68, 0x3c, 0xf6, 0xdd, 0xe7, 0xe4, 0x39, 0xc4, 0x66, 0xd5, 0xd5, 0xfb, 0xb4, 0x0c, 0xac,
	0xea, 0x7c, 0x31, 0xff, 0x96, 0x2e, 0xac, 0x3d, 0x90, 0x98, 0x34, 0x14, 0xce, 0x46, 0x2a, 0x54,
	0x5e, 0xd7, 0x21, 0xa9, 0x51, 0x13, 0x59, 0xf3, 0x5b, 0xd0, 0x14, 0x8f, 0x62, 0xf1, 0x71, 0x32,
	0xa1, 0xd8, 0xa0, 0xe9, 0x2e, 0x1c, 0xbb, 0x92, 0xcf, 0xb0, 0xaa, 0x25, 0x12, 0x2f, 0x2c, 0xd2,
	0xc7, 0xd0, 0x25, 0x47, 0xa3, 0xdc, 0xfd, 0x0a, 0x54, 0x8f, 0x93, 0x49, 0x31, 0xec, 0xca, 0xb6,
	0xd9, 0x87, 0xd0, 0x3e, 0x8c, 0xd2, 0xac, 0x5e, 0x59, 0x44, 0x89, 0xd2, 0x50, 0x57, 0xed, 0x54,
	0x18, 0xab, 0xeb, 0x0c, 0xf6, 0xa7, 0xd0, 0x33, 0x0e, 0x42, 0x04, 0xde, 0xa4, 0x08, 0x64, 0x51,
	0x8d, 0xb1, 0xd1, 0xfe, 0x8b, 0x0a, 0x74, 0xa8, 0xf4, 0x0b, 0xef, 0x29, 0x05, 0xb8, 0xd4, 0x7b,
	0x2a, 0xe1, 0xfe, 0x00, 0x36, 0xa8, 0x34, 0xe0, 0xde, 0x95, 0x92, 0xca, 0xa0, 0x16, 0x17, 0x59,
	0x9a, 0x3d, 0x8a, 0x26, 0xc2, 0xc2, 0x0a, 0x6a, 0x5e, 0x85, 0x1e, 0xdd, 0x95, 0x99, 0x79, 0x6e,
	0x7c, 0x55, 0x50, 0x73, 0xc0, 0x52, 0xc7, 0x0f, 0xb8, 0x6e, 0x1a, 0x51, 0xbc, 0xb0, 0x29, 0x7f,
	0x57, 0xd1, 0x96, 0x49, 0xec, 0x2b, 0xd9, 0x54, 0x5a, 0x01, 0xce, 0xe7, 0xfc, 0xb9, 0x84, 0xbd,
	0xa6, 0xf4, 0x1d, 0x0b, 0x01, 0x5a, 0x60, 0xa7, 0x4e, 0xca, 0x62, 0xdf, 0x09, 0xa4, 0xf2, 0xb5,
	0xa0, 0x76, 0x14, 0x85, 0x93, 0xac, 0x04, 0xf0, 0xa5, 0xef, 0xa5, 0x67, 0x52, 0x50, 0x5b, 0x50,
	0x7b, 0xe4, 0x4f, 0xce, 0xa4, 0x80, 0xea, 0x2a, 0x02, 0x20, 0xde, 0xf7, 0x68, 0xad, 0x18, 0x29,
	0xff, 0xae, 0x69, 0xd2, 0x4b, 0xe2, 0xd1, 0xec, 0x91, 0xf6, 0x5d, 0x61, 0x67, 0x4a, 0x0c, 0x96,
	0xf1, 0x7c, 0x6d, 0x6a, 0x4e, 0x66, 0x24, 0x1d, 0xdb, 0x85, 0x86, 0x2e, 0x88, 0xe5, 0x8b, 0xdd,
	0x11, 0x34, 0x4f, 0xa3, 0x24, 0x55, 0x79, 0x04, 0xd7, 0x51, 0xf1, 0xf3, 0x16, 0xf1, 0xb1, 0x62,
	0xe5, 0xb6, 0x34, 0x8a, 0xd9, 0xca, 0x47, 0x92, 0xad, 0x3b, 0xd0, 0x19, 0xb1, 0x69, 0x94, 0xb2,
	0xbd, 0x98, 0x39, 0xf8, 0x1a, 0x9e, 0x15, 0xa0, 0x61, 0x79, 0x18, 0x33, 0xf6, 0x78, 0x3e, 0xfd,
	0x8a, 0xc5, 0xa2, 0xb4, 0x6b, 0x7f, 0x08, 0xeb, 0x07, 0x91, 0x72, 0x18, 0xd2, 0x08, 0x12, 0x8b,
	0x6b, 0x98, 0x16, 0x91, 0x10, 0xfe, 0x77, 0x05, 0x40, 0x81, 0x88, 0x60, 0xe4, 0xff, 0x8c, 0xdf,
	0x98, 0x96, 0x1f, 0xcd, 0xdd, 0xe7, 0x0b, 0xc4, 0xae, 0x21, 0x2a, 0x66, 0x27, 0xa1, 0xab, 0x32,
	0xfb, 0xcc, 0xcc, 0xac, 0x29, 0x87, 0xfa, 0x30, 0x8a, 0x99, 0xeb, 0x24, 0x29, 0x31, 0x51, 0x65,
	0x15, 0x38, 0x6d, 0x70, 0xe5, 0xad, 0x44, 0x18, 0x64, 0xf4, 0x86, 0xec, 0x95, 0x49, 0x7b, 0x53,
	0x85, 0x6a, 0xfb, 0xd1, 0x85, 0x8e, 0x37, 0x6d, 0xf4, 0xca, 0x44, 0x3a, 0x4a, 0x2a, 0xa5, 0x58,
	0x46, 0x49, 0x9d, 0x53, 0x64, 0xe0, 0xcb, 0x6b, 0xa5, 0x5d, 0x58, 0x1b, 0xb1, 0xaf, 0x89, 0x6c,
	0x1c, 0x42, 0x3b, 0x8b, 0x0f, 0xf6, 0xa3, 0x0b, 0xeb, 0x3a, 0x54, 0xf7, 0x23, 0x91, 0x16, 0x94,
	0xd6, 0x4b, 0x77, 0xa0, 0x93, 0x01, 0x64, 0x96, 0xd3, 0xfe, 0xeb, 0x0a, 0x58, 0xc7, 0x0b, 0xf9,
	0x89, 0x79, 0x2a, 0x40, 0xb2, 0xcd, 0x02, 0x6c, 0x96, 0xcf, 0x92, 0xb6, 0xc1, 0x26, 0x34, 0x4f,
	0xc2, 0xb1, 0x13, 0x30, 0x12, 0x8c, 0x71, 0xca, 0xc9, 0xaa, 0x24, 0x35, 0x20, 0x57, 0xa0, 0xfb,
	0x24, 0x7a, 0x70, 0xe1, 0x9e, 0x39, 0xe1, 0x84, 0x11, 0xf3, 0xc1, 0xd1, 0x52, 0xcb, 0x5e, 0x16,
	0xfd, 0xd2, 0x42, 0xa5, 0x58, 0xc5, 0x76, 0x82, 0xfd, 0x1e, 0xf7, 0x78, 0x4e, 0x20, 0xa3, 0x3d,
	0xce, 0xf4, 0x2c, 0x8b, 0xa2, 0xfa, 0x23, 0x02, 0xbe, 0x1f, 0xa0, 0x2b, 0x71, 0xe6, 0x41, 0x69,
	0xbf, 0xc8, 0x6a, 0x0a, 0xd3, 0x2b, 0xd2, 0xc2, 0x0b, 0x2d, 0x66, 0x2a, 0xda, 0xe6, 0xf2, 0x50,
	0x6a, 0x5b, 0x55, 0xd0, 0x56, 0xf2, 0xa6, 0x95, 0x25, 0x6f, 0xaa, 0x96, 0xbe, 0xa9, 0xa6, 0x42,
	0x5f, 0xb9, 0x5a, 0xf6, 0x26, 0x6d, 0x8e, 0x56, 0x54, 0x09, 0x66, 0xe0, 0xc4, 0x9e, 0xd4, 0xb1,
	0x75, 0xfb, 0x67, 0x00, 0x52, 0xed, 0xca, 0x80, 0x79, 0x1c, 0xe2, 0x84, 0xcf, 0x25, 0x84, 0x76,
	0x4d, 0xf2, 0xba, 0xc7, 0x51, 0xaa, 0x22, 0xa4, 0x1e, 0xac, 0xef, 0x79, 0x5e, 0xcc, 0x92, 0x44,
	0x95, 0x5d, 0xec, 0xdb, 0xb0, 0x61, 0x08, 0xd8, 0xab, 0x10, 0xfc, 0x8f, 0x2b, 0xc2, 0x2b, 0xc9,
	0xb3, 0x74, 0xac, 0x58, 0xd1, 0xf5, 0xd9, 0xb3, 0x28, 0x54, 0x7a, 0xce, 0x03, 0x2b, 0x34, 0x92,
	0x59, 0xe9, 0x67, 0xf8, 0x4c, 0xf2, 0x4b, 0x24, 0xd2, 0x26, 0x5a, 0xba, 0x88, 0x77, 0x1a, 0x47,
	0xe7, 0xbe, 0x52, 0x75, 0x51, 0xe4, 0xf3, 0xd3, 0x05, 0x2a, 0x3a, 0xfe, 0xe2, 0xc6, 0x4c, 0x94,
	0xef, 0xb8, 0x73, 0xe2, 0x06, 0xee, 0x9c, 0xc9, 0x63, 0xa4, 0x73, 0xca, 0x1d, 0x6a, 0x1f, 0x40,
	0x57, 0x2e, 0x11, 0x1d, 0xae, 0x11, 0xe6, 0x6f, 0x19, 0xce, 0x52, 0x3d, 0x2f, 0x97, 0x86, 0xfc,
	0x3a, 0xcf, 0x1f, 0x59, 0xe2, 0x08, 0x46, 0xe6, 0x9a, 0x10, 0xb4, 0xcd, 0x23, 0xb6, 0xff, 0x36,
	0xf4, 0xc6, 0x2c, 0x7d, 0x70, 0x31, 0x43, 0x54, 0xb2, 0x72, 0x28, 0xb7, 0x48, 0xb4, 0xa8, 0x23,
	0x77, 0xf0, 0xd0, 0x66, 0xa5, 0x58, 0x23, 0xd3, 0xe9, 0xd7, 0x88, 0xb9, 0xcc, 0x3f, 0x67, 0x9a,
	0x7f, 0x3f, 0x84, 0xde, 0xe1, 0x4b, 0x8f, 0x2f, 0x3a, 0x21, 0xfb, 0x26, 0x58, 0x79, 0xb8, 0x64,
	0x96, 0xc3, 0x43, 0x24, 0xd1, 0xbf, 0x0f, 0x8d, 0xa3, 0x68, 0x22, 0x2a, 0x9f, 0xa4, 0x70, 0x5a,
	0x51, 0x51, 0xe4, 0xe0, 0xcc, 0x09, 0x43, 0x16, 0x64, 0xde, 0x47, 0x07, 0x49, 0xd5, 0x7c, 0xa0,
	0x59, 0x2b, 0x04, 0x9a, 0xba, 0xfb, 0xf2, 0x24, 0x7a, 0xce, 0x42, 0xc9, 0xea, 0x5c, 0xf1, 0xf5,
	0xcf, 0x2b, 0xb0, 0x2e, 0x31, 0x28, 0x51, 0x6f, 0x0d, 0x9b, 0xa5, 0xe2, 0x4e, 0x10, 0x8c, 0x7d,
	0x2f, 0x8b, 0x10, 0x1f, 0x47, 0xe9, 0x49, 0xc8, 0x48, 0xa3, 0x85, 0x96, 0x88, 0x3b, 0xca, 0x91,
	0xc8, 0x9a, 0x67, 0x37, 0x0b, 0xd9, 0x9d, 0x24, 0x12, 0x6d, 0x34, 0xc4, 0x99, 0x7f, 0x1f, 0x45,
	0x81, 0xc8, 0xab, 0xea, 0xf6, 0x0d, 0xe8, 0xfc, 0xc6, 0x3c, 0x49, 0x85, 0xf3, 0x2c, 0xf5, 0xdd,
	0xef, 0x71, 0xd5, 0xf2, 0xc3, 0x27, 0x91, 0xf4, 0x22, 0xd2, 0x01, 0x60, 0xc5, 0x4d, 0xf0, 0x45,
	0x08, 0x8f, 0x60, 0xc8, 0xcf, 0xa0, 0x97, 0xdb, 0x9d, 0x7c, 0x5d, 0x78, 0xac, 0x59, 0xdb, 0x25,
	0x55, 0xe5, 0xaa, 0xce, 0x1f, 0xc4, 0x02, 0xcd, 0xd0, 0x9f, 0x42, 0x4b, 0x9b, 0x87, 0xf0, 0x59,
	0x84, 0xc5, 0x41, 0x27, 0x7c, 0x2e, 0xa5, 0x43, 0x24, 0x36, 0xfc, 0x7b, 0xe4, 0x29, 0x9d, 0x95,
	0x2b, 0xa4, 0x10, 0x2b, 0x13, 0xc0, 0xd9, 0x2c, 0x8a, 0x85, 0x91, 0x6e, 0xd8, 0x1f, 0x67, 0xc7,
	0xe2, 0xf3, 0xdf, 0x82, 0x3a, 0xff, 0xbb, 0xd8, 0x92, 0xa6, 0x97, 0xdb, 0x07, 0xd0, 0x56, 0xed,
	0xa5, 0x88, 0x33, 0xaa, 0xbc, 0xc2, 0x59, 0x30, 0x67, 0xda, 0x3e, 0x8a, 0x98, 0xe3, 0xbf, 0x2a,
	0xd0, 0xd5, 0x74, 0x72, 0xcf, 0x9c, 0x78, 0x62, 0x36, 0xd7, 0x09, 0x65, 0x56, 0x68, 0xe1, 0x82,
	0x9c, 0xc1, 0xaf, 0x39, 0x8e, 0xc2, 0xf4, 0x4c, 0x94, 0xfd, 0x6b, 0x19, 0xdb, 0xbf, 0x72, 0x52,
	0x26, 0xdd, 0x53, 0x0f, 0xd6, 0xc7, 0xa9, 0x13, 0xa7, 0x2f, 0x4a, 0x80, 0xb2, 0x18, 0x64, 0x5d,
	0xf1, 0x68, 0xcc, 0xa9, 0xa4, 0x9b, 0x49, 0x07, 0x7e, 0x22, 0xee, 0x6d, 0x2a, 0x2b, 0x71, 0xe8,
	0x9f, 0x33, 0x85, 0x5f, 0x4b, 0x71, 0x6e, 0x98, 0x10, 0x74, 0x50, 0x4e, 0xed, 0x23, 0xd8, 0xcc,
	0xbd, 0x12, 0x29, 0xfd, 0x49, 0x61, 0x99, 0xd8, 0xb0, 0x7e, 0x96, 0xdd, 0x98, 0x7b, 0xec, 0x81,
	0x06, 0x1b, 0xa0, 0xd3, 0x3a, 0x8a, 0x26, 0x97, 0xef, 0xdf, 0xfe, 0x7d, 0x05, 0x36, 0xf2, 0xa7,
	0x60, 0x8d, 0x30, 0x9a, 0x20, 0xf5, 0x57, 0xa4, 0xf1, 0x56, 0x2c, 0x5d, 0x51, 0x4d, 0x3a, 0xb1,
	0xdb, 0xe8, 0x82, 0xe4, 0x9a, 0x13, 0x7a, 0xb6, 0xe0, 0xd4, 0x59, 0xe0, 0xc2, 0x9a, 0x4e, 0xf1,
	0xe6, 0xb1, 0x02, 0x84, 0x3c, 0x7f, 0x9b, 0xba, 0x5c, 0xc1, 0xfd, 0x5c, 0xab, 0x24, 0x09, 0x6f,
	0xa3, 0xc8, 0xfc, 0x0e, 0x6c, 0x15, 0x5f, 0x9f, 0xcc, 0xac, 0x3b, 0xc5, 0x75, 0x42, 0xcd, 0xab,
	0x79, 0x6a, 0x1a, 0x8f, 0xce, 0x1a, 0x8e, 0x75, 0xfb, 0x77, 0x79, 0x28, 0xe9, 0xbb, 0x6c, 0x2c,
	0x5c, 0x29, 0x3a, 0xcd, 0x90, 0x1d, 0xfb, 0x61, 0xe6, 0xd2, 0xf9, 0x6f, 0xe7, 0x42, 0x46, 0x44,
	0x1d, 0x58, 0x7d, 0xf2, 0x4d, 0x74, 0x2c, 0xdb, 0x56, 0xfa, 0xb7, 0x73, 0x21, 0x47, 0x2a, 0x36,
	0xa0, 0xf1, 0xe4, 0x2c, 0x66, 0x78, 0x82, 0xb8, 0xe1, 0x3e, 0x4f, 0xc1, 0xb2, 0x1b, 0x64, 0x96,
	0x62, 0xdc, 0x2a, 0xe3, 0x42, 0x5a, 0x67, 0xce, 0x3e, 0xda, 0x43, 0xb8, 0xca, 0x8d, 0xe0, 0x60,
	0x1e, 0xc7, 0x2c, 0x74, 0x17, 0x83, 0x28, 0x3c, 0x67, 0x71, 0xe2, 0x47, 0xe1, 0xe0, 0x19, 0x3e,
	0xe7, 0x38, 0x0a, 0xd9, 0xa2, 0xc4, 0xd2, 0xd4, 0xf3, 0x96, 0xa6, 0x6e, 0xff, 0x6d, 0x15, 0x60,
	0x10, 0x85, 0xcf, 0xfc, 0x89, 0x4c, 0x53, 0xd7, 0x64, 0xce, 0x21, 0x31, 0xc8, 0x3c, 0x29, 0x4d,
	0x5f, 0xb2, 0xc8, 0x68, 0xe4, 0xa4, 0x7e, 0x24, 0x0f, 0x7f, 0x4b, 0x9b, 0x04, 0x69, 0x72, 0xab,
	0x25, 0x65, 0x7a, 0xeb, 0x87, 0x78, 0xa1, 0x44, 0x18, 0x69, 0xd8, 0xbc, 0x6d, 0x1b, 0xfe, 0xba,
	0xfc, 0x5d, 0x1d, 0x58, 0x65, 0x71, 0xfc, 0x13, 0xb6, 0xc0, 0x61, 0x8f, 0x75, 0xeb, 0x3a, 0xec,
	0xa8, 0xbc, 0x1c, 0xef, 0xc4, 0x47, 0xa3, 0x9c, 0x08, 0xba, 0x5f, 0x83, 0xed, 0xe2, 0xf7, 0xf1,
	0x7c, 0x2a, 0xd5, 0xff, 0x06, 0xf4, 0x8d, 0xcf, 0x92, 0x2c, 0xda, 0x1e, 0xd4, 0xad, 0x37, 0xe0,
	0x4a, 0xd9, 0x0e, 0x7e, 0x84, 0x48, 0x3a, 0x5e, 0x83, 0xcd, 0x03, 0x67, 0x51, 0xb8, 0x5e, 0xd8,
	0x8b, 0x5d, 0xb0, 0x72, 0x1f, 0xc7, 0xb2, 0x66, 0x52, 0xe5, 0xa8, 0x65, 0xdf, 0xe8, 0xc5, 0xa2,
	0x9a, 0xf8, 0x3a, 0x6c, 0x15, 0x3e, 0x73, 0x60, 0x21, 0xff, 0x9f, 0x71, 0x73, 0x9d, 0xba, 0x67,
	0x2a, 0xb7, 0x6b, 0x42, 0xf5, 0xa9, 0x4f, 0xaa, 0xbf, 0xb4, 0x5a, 0xa4, 0x45, 0x5b, 0x30, 0xfb,
	0x0d, 0x68, 0x13, 0xd0, 0x12, 0x4f, 0xf7, 0x27, 0x15, 0xd8, 0xd9, 0x77, 0xdc, 0xe7, 0x63, 0xce,
	0xe9, 0x3d, 0xcf, 0x23, 0x0e, 0xef, 0x97, 0x13, 0x31, 0xe4, 0x3b, 0xbc, 0xdc, 0x4c, 0x5d, 0xd5,
	0x18, 0x3d, 0x9d, 0x79, 0x4e, 0xca, 0xfe, 0xdf, 0x91, 0x22, 0x41, 0x45, 0x43, 0x99, 0x29, 0x62,
	0xfe, 0x44, 0xff, 0xe4, 0x1d, 0xb8, 0x52, 0x4a, 0xc9, 0x12, 0xaa, 0xff, 0x65, 0x45, 0xec, 0x45,
	0xfd, 0x1a, 0xb3, 0x54, 0x4d, 0x16, 0xfc, 0x52, 0x03, 0x35, 0x21, 0x36, 0x6b, 0xb9, 0xc2, 0x46,
	0x43, 0x26, 0x66, 0xfd, 0x72, 0xfc, 0x4a, 0x1e, 0xf3, 0x53, 0x68, 0xf2, 0xbb, 0x06, 0xcf, 0x84,
	0x41, 0xd9, 0x86, 0xf6, 0x81, 0xb3, 0x50, 0x32, 0x1e, 0xcd, 0xb2, 0x32, 0xe6, 0x81, 0xb3, 0x38,
	0xf2, 0xa7, 0x7e, 0x2a, 0x6b, 0x94, 0x57, 0xa1, 0x77, 0x12, 0xba, 0x19, 0x73, 0xd1, 0x79, 0x0b,
	0x19, 0xf8, 0x00, 0x5a, 0x27, 0x31, 0x29, 0x02, 0x76, 0x61, 0x0d, 0x7f, 0xeb, 0xc0, 0x27, 0xf3,
	0xdc, 0x2b, 0x92, 0xf6, 0xab, 0xe3, 0xf9, 0x54, 0x25, 0x0f, 0x6e, 0x7a, 0x1a, 0x45, 0xc1, 0x92,
	0x26, 0xc3, 0x9f, 0x55, 0x60, 0x0b, 0x73, 0x04, 0x37, 0xf5, 0xcf, 0xfd, 0x74, 0x71, 0x1a, 0xfb,
	0xdf, 0xb2, 0x7c, 0x99, 0xb9, 0xe8, 0x07, 0x0d, 0x5f, 0x2a, 0x98, 0x94, 0x6a, 0xdf, 0x57, 0x55,
	0xf5, 0x37, 0x79, 0xf5, 0x68, 0x1e, 0xf0, 0x38, 0xbf, 0x59, 0x1a, 0x65, 0x98, 0x2e, 0x4e, 0x14,
	0xb1, 0xfe, 0xb0, 0x02, 0x30, 0x9e, 0x4f, 0x1f, 0xf3, 0x37, 0x88, 0xf7, 0x8e, 0xfd, 0x49, 0xa8,
	0x22, 0xf9, 0xaa, 0x75, 0x1f, 0xfa, 0x65, 0x38, 0x93, 0x6a, 0xe1, 0x35, 0x33, 0x01, 0xca, 0x3f,
	0x6e, 0x13, 0x9a, 0x47, 0x4e, 0x92, 0x1e, 0x38, 0x0b, 0xd2, 0x13, 0xda, 0x84, 0xa6, 0x5c, 0xd0,
	0xa5, 0xa5, 0xaa, 0x7d, 0x1f, 0x9a, 0xe3, 0xf9, 0x14, 0xed, 0x97, 0x2e, 0x24, 0xa5, 0x8e, 0x26,
	0x60, 0xf5, 0xa5, 0xa5, 0xfb, 0x7f, 0xaa, 0x40, 0x4b, 0x9d, 0x80, 0x3d, 0x65, 0x2a, 0xaf, 0x3a,
	0x6e, 0xd5, 0x95, 0xf2, 0xe5, 0xf5, 0x58, 0x33, 0xf9, 0x59, 0x55, 0x4b, 0x7b, 0xdf, 0x38, 0xb1,
	0x87, 0xf8, 0x74, 0x10, 0x83, 0x3e, 0x0f, 0xd6, 0xc3, 0xf1, 0x7c, 0x2a, 0x25, 0x89, 0x53, 0xad,
	0xa6, 0xaa, 0x41, 0x24, 0x5e, 0x53, 0x43, 0x90, 0xa2, 0x11, 0x2f, 0x09, 0xa3, 0x35, 0x80, 0x72,
	0x1c, 0xa3, 0x43, 0xfb, 0x17, 0xe4, 0x1d, 0xaa, 0x3b, 0x4c, 0xdf, 0x55, 0xda, 0x1d, 0x36, 0x1e,
	0x6e, 0x01, 0xc8, 0x56, 0x9e, 0x6e, 0xe3, 0x61, 0xb0, 0x10, 0xcd, 0x54, 0x19, 0x1c, 0x71, 0x29,
	0xe0, 0x9d, 0x93, 0x18, 0xfb, 0x1a, 0xac, 0xf1, 0x77, 0x70, 0x76, 0x98, 0xa8, 0x57, 0x54, 0x9b,
	0x46, 0x7c, 0x2e, 0xc9, 0xb1, 0xf2, 0xe1, 0xb4, 0xfd, 0x7b, 0xf0, 0x1a, 0x7a, 0x5c, 0x9c, 0x5f,
	0x11, 0xe1, 0xa5, 0x12, 0x16, 0xee, 0x73, 0xa9, 0x12, 0x74, 0x60, 0x75, 0x6f, 0x4a, 0x50, 0x2f,
	0x24, 0x2d, 0x1d, 0x58, 0x7d, 0x90, 0x64, 0xc3, 0x4a, 0xdc, 0xa8, 0x88, 0xe8, 0x40, 0x93, 0x19,
	0x27, 0x63, 0xf1, 0x12, 0x99, 0x7a, 0x5c, 0x81, 0x35, 0xce, 0x3a, 0x19, 0xbd, 0x22, 0x17, 0x85,
	0x15, 0xf9, 0xd3, 0x0a, 0x74, 0x09, 0x42, 0xf8, 0x98, 0x2f, 0xa0, 0xa3, 0xc3, 0x64, 0x76, 0xce,
	0x02, 0x95, 0xa0, 0xbc, 0x65, 0x06, 0x0f, 0x4b, 0x9e, 0xa2, 0xc7, 0x2d, 0x48, 0xde, 0xb5, 0x0d,
	0x6d, 0xb1, 0x56, 0xc8, 0xbe, 0xc4, 0x32, 0x7d, 0x8e, 0x7d, 0x86, 0x31, 0x8f, 0xb8, 0x3e, 0x9a,
	0x24, 0x42, 0xd4, 0x17, 0x59, 0xa8, 0x65, 0x34, 0x35, 0x34, 0x89, 0x38, 0x2b, 0x32, 0xf6, 0xd2,
	0xf1, 0xbb, 0x5a, 0x89, 0xfa, 0x8b, 0xf2, 0xc6, 0x7d, 0xd8, 0xa0, 0x37, 0xa9, 0xf8, 0x30, 0x26,
	0x6b, 0x05, 0x49, 0xa3, 0x00, 0xf6, 0x97, 0x68, 0x8f, 0xb8, 0xe9, 0x29, 0x1d, 0x82, 0xa8, 0x93,
	0xd1, 0x92, 0x6c, 0xf4, 0x77, 0x49, 0xc3, 0x4b, 0x8e, 0x9f, 0x34, 0xd0, 0x1a, 0x7c, 0x0c, 0x4d,
	0x65, 0xd3, 0x64, 0x53, 0x43, 0xfe, 0x2c, 0x2d, 0xbc, 0xc9, 0x6f, 0xf6, 0x2d, 0xe8, 0x10, 0x4b,
	0xf8, 0x4a, 0x66, 0xf9, 0x17, 0x15, 0xe8, 0xe6, 0x2c, 0xa8, 0xf1, 0x14, 0x39, 0x2c, 0x98, 0x1d,
	0x22, 0x08, 0xde, 0x84, 0x2a, 0x0f, 0x10, 0x9b, 0x79, 0x61, 0x6f, 0x29, 0x09, 0x24, 0x85, 0xe3,
	0xb6, 0xca, 0x27, 0xf3, 0x16, 0x44, 0x61, 0xd2, 0x45, 0x4c, 0x1e, 0x41, 0xd7, 0x40, 0x5e, 0xa4,
	0x6d, 0x39, 0xdc, 0x4a, 0xd3, 0xb6, 0xdc, 0x1e, 0x7b, 0x17, 0x60, 0x4f, 0x4d, 0xa1, 0xe7, 0xe5,
	0xfd, 0x1d, 0xa4, 0xa4, 0x9e, 0x50, 0x37, 0x0b, 0x71, 0x26, 0x69, 0xde, 0x84, 0xde, 0x9e, 0x9b,
	0x9e, 0xcc, 0x58, 0x28, 0xac, 0x82, 0x52, 0x74, 0x69, 0x23, 0x2a, 0xa8, 0x58, 0x3e, 0x6c, 0x69,
	0x8f, 0x8d, 0x95, 0x7f, 0x64, 0x99, 0x28, 0x28, 0x51, 0xaa, 0x1b, 0x25, 0xb1, 0x72, 0x9d, 0x96,
	0xe5, 0x94, 0x5a, 0xb1, 0x23, 0x29, 0xa4, 0xf5, 0x73, 0xd8, 0x2e, 0xb9, 0xaa, 0x60, 0x7c, 0xaa,
	0xe6, 0x74, 0x83, 0x30, 0x3f, 0xef, 0xc1, 0xae, 0x86, 0x1d, 0x04, 0xcc, 0x89, 0x39, 0xb0, 0x1e,
	0x24, 0xca, 0x1d, 0x70, 0xfb, 0x1f, 0xde, 0x14, 0x42, 0x31, 0x08, 0x7c, 0x16, 0xa6, 0xb7, 0xb1,
	0xea, 0x70, 0x0b, 0x1a, 0xa3, 0x99, 0x8b, 0x55, 0x25, 0x2b, 0xab, 0xa2, 0xab, 0x3a, 0xd7, 0xae,
	0x95, 0x5f, 0x4a, 0x66, 0xd6, 0xe7, 0xd0, 0x1c, 0xcd, 0x5c, 0x5d, 0x68, 0xdf, 0x2a, 0xd4, 0xde,
	0x39, 0xe0, 0x76, 0xc9, 0x6a, 0x32, 0xb3, 0xf6, 0x61, 0x87, 0xc0, 0xd2, 0x7f, 0x49, 0x68, 0xbe,
	0x8f, 0xff, 0x5c, 0xf1, 0x60, 0x3a, 0x4b, 0x17, 0xbb, 0xaf, 0x2d, 0xf9, 0x47, 0x02, 0x79, 0x7f,
	0x67, 0x34, 0x73, 0xc9, 0x3f, 0x04, 0x5c, 0x02, 0xf6, 0x0e, 0xc2, 0x92, 0x81, 0x5d, 0x13, 0xb6,
	0x9f, 0x2f, 0x7a, 0xeb, 0x99, 0xde, 0x0f, 0x00, 0x46, 0x33, 0x57, 0x8d, 0xa1, 0x1a, 0x40, 0x5b,
	0xf9, 0x99, 0x51, 0x69, 0x6d, 0xdb, 0x02, 0xe0, 0x69, 0xc2, 0xb0, 0xda, 0x94, 0x6d, 0x23, 0xf3,
	0xa0, 0x84, 0x4e, 0xc6, 0x14, 0xe8, 0x1d, 0xbc, 0x4e, 0x4e, 0x46, 0x5a, 0x59, 0x37, 0x22, 0x1b,
	0xbe, 0x24, 0xd7, 0xd2, 0x01, 0x4a, 0x0d, 0x78, 0x18, 0x05, 0x9e, 0x09, 0x28, 0xe7, 0x24, 0x4d,
	0x40, 0x3d, 0xfc, 0x28, 0x28, 0x43, 0xa6, 0x0a, 0x97, 0x51, 0x26, 0x3f, 0x78, 0x78, 0x07, 0x5a,
	0x82, 0xa4, 0x72, 0x52, 0xcf, 0x00, 0xdb, 0x2d, 0x9f, 0x5b, 0x43, 0xc0, 0x77, 0x60, 0x6d, 0x34,
	0x73, 0x31, 0xa7, 0x35, 0x60, 0x7a, 0x46, 0xbe, 0x8b, 0x5b, 0xef, 0x41, 0x37, 0x63, 0x9b, 0x98,
	0x4e, 0x33, 0x40, 0xae, 0x95, 0xce, 0x93, 0xe9, 0xe2, 0xf6, 0x3d, 0x44, 0x51, 0x8f, 0x63, 0x59,
	0x24, 0xc0, 0x20, 0xd3, 0x66, 0xbb, 0x3b, 0x65, 0xcb, 0xc9, 0xcc, 0xfa, 0x08, 0xc1, 0xf5, 0x91,
	0xe6, 0xd5, 0x19, 0x90, 0x79, 0xe7, 0xa7, 0x60, 0x65, 0x28, 0xab, 0x71, 0x2c, 0x13, 0x34, 0x43,
	0xc3, 0x18, 0xdf, 0xba, 0x0f, 0x3d, 0x21, 0x39, 0x64, 0xf2, 0xd2, 0xda, 0x30, 0x46, 0x24, 0x39,
	0xb6, 0x7d, 0x3a, 0x0e, 0x65, 0x4c, 0x68, 0x7e, 0xae, 0x0e, 0xa0, 0x33, 0x9f, 0x4b, 0xb8, 0x99,
	0x1f, 0xd0, 0xfc, 0x02, 0x36, 0x47, 0x33, 0x57, 0xcd, 0x03, 0x0c, 0x9c, 0x38, 0x9a, 0x27, 0x2c,
	0x58, 0x0a, 0x9d, 0x1b, 0x2f, 0xb8, 0x87, 0x8f, 0x96, 0xcd, 0xfc, 0x72, 0xe0, 0xdd, 0xf2, 0x9e,
	0x3f, 0x82, 0xdf, 0x85, 0x0d, 0x7e, 0x39, 0x9d, 0x54, 0x5b, 0x06, 0x5c, 0x1c, 0x67, 0xfb, 0x10,
	0xcd, 0x92, 0x9a, 0x19, 0x5b, 0xa6, 0xa2, 0x74, 0xc4, 0xec, 0x16, 0x42, 0xa8, 0x09, 0xb2, 0x65,
	0xbc, 0x31, 0x26, 0xcc, 0x3e, 0x86, 0x75, 0x04, 0xc1, 0x61, 0x21, 0x2b, 0x37, 0xa7, 0xc5, 0xb9,
	0xb2, 0x59, 0x58, 0xd3, 0xc6, 0x83, 0x1b, 0x7d, 0x6e, 0x08, 0xba, 0xd4, 0x40, 0x71, 0x98, 0x0d,
	0x73, 0x21, 0x99, 0x59, 0xb7, 0x11, 0x33, 0x0e, 0x8f, 0x52, 0x53, 0x64, 0x7e, 0x2f, 0xb7, 0x92,
	0xcc, 0xac, 0x07, 0x48, 0x3c, 0x73, 0xe6, 0xe0, 0x6a, 0x79, 0x9b, 0xde, 0x14, 0x76, 0x13, 0xe4,
	0xc7, 0x68, 0xb7, 0xb2, 0xe9, 0x0b, 0x6b, 0xa7, 0x40, 0x73, 0x1c, 0x48, 0xda, 0xbd, 0x52, 0xba,
	0x9e, 0xcc, 0xac, 0xf7, 0x51, 0xaf, 0x39, 0x6b, 0x2d, 0x73, 0x40, 0xc3, 0x44, 0x5c, 0xb7, 0xfa,
	0x05, 0x4d, 0x45, 0xe7, 0x9c, 0xd0, 0x54, 0x77, 0xdf, 0x09, 0x4d, 0x49, 0x7b, 0x5d, 0xd3, 0xb4,
	0xa8, 0x57, 0x5b, 0x94, 0x9e, 0x5a, 0xad, 0x3e, 0xc7, 0x87, 0x65, 0x3e, 0xa1, 0x84, 0xaa, 0x65,
	0xff, 0xbf, 0xa6, 0x46, 0x25, 0x47, 0x33, 0x17, 0x1b, 0x25, 0x6e, 0x4e, 0x95, 0xe8, 0x0f, 0xeb,
	0x13, 0x29, 0x1e, 0xf8, 0x78, 0x2a, 0x1e, 0xea, 0xf9, 0x5b, 0x79, 0xaa, 0x4b, 0x5b, 0xd1, 0x42,
	0xb0, 0xbd, 0x20, 0xb8, 0x24, 0xe4, 0x23, 0x54, 0x57, 0xf4, 0x3b, 0xb4, 0x39, 0x4e, 0x07, 0xaa,
	0x75, 0xd3, 0x9d, 0x78, 0xc6, 0x92, 0x06, 0xb8, 0xf0, 0xcc, 0x87, 0x2c, 0xdd, 0x0b, 0x02, 0xf3,
	0xb0, 0x25, 0xde, 0xb5, 0xe4, 0x8c, 0x01, 0x8a, 0xa0, 0x09, 0x7d, 0x35, 0xdf, 0x49, 0xd7, 0xed,
	0xd5, 0x5d, 0x63, 0xfe, 0x48, 0xb7, 0xad, 0x1f, 0x2a, 0xeb, 0x25, 0x03, 0x25, 0xe4, 0xef, 0xf7,
	0x78, 0xd0, 0x8f, 0x61, 0x4b, 0x3f, 0x88, 0x1e, 0xf5, 0xea, 0xcf, 0x11, 0x12, 0x73, 0xc0, 0x14,
	0x38, 0x71, 0xa7, 0x59, 0x13, 0x7a, 0xc9, 0x2b, 0xee, 0xa2, 0x3b, 0x55, 0x6d, 0xf1, 0x4b, 0x02,
	0x7f, 0x81, 0xee, 0x4e, 0x16, 0x30, 0x0f, 0xa3, 0xc8, 0x4b, 0x2e, 0x03, 0x3d, 0x50, 0x04, 0x24,
	0x3d, 0xde, 0x25, 0x04, 0xec, 0xd3, 0x50, 0xc0, 0xe8, 0x07, 0xdf, 0xc5, 0xb7, 0xef, 0x79, 0x9e,
	0x6a, 0xfe, 0x96, 0xb6, 0x84, 0x97, 0xe2, 0x8f, 0x8f, 0xf7, 0xfc, 0xf4, 0xfb, 0x40, 0x0b, 0x29,
	0x32, 0xfa, 0xd8, 0x44, 0x8a, 0xf2, 0xfd, 0xed, 0xa5, 0xf4, 0x97, 0x8a, 0xf1, 0x34, 0x1c, 0x31,
	0xc7, 0xc3, 0xff, 0xa9, 0x9d, 0x4f, 0x4d, 0xe6, 0x67, 0xea, 0x9e, 0x6b, 0x60, 0x7e, 0x81, 0xa2,
	0x93, 0x0d, 0x3b, 0x5c, 0x0e, 0xfa, 0x23, 0x7c, 0xfd, 0x5e, 0xcc, 0x1c, 0x59, 0xf2, 0x5f, 0x66,
	0x9d, 0x68, 0x47, 0xe0, 0x0e, 0x65, 0x39, 0xa6, 0xfd, 0xaf, 0x78, 0xdb, 0x87, 0x68, 0x3b, 0xd0,
	0x02, 0x84, 0xcf, 0xfc, 0x89, 0x09, 0x45, 0xc7, 0x58, 0x74, 0x8f, 0xe2, 0x2e, 0x6c, 0xeb, 0xc8,
	0x34, 0x1e, 0x7a, 0xaa, 0xc5, 0x98, 0x2c, 0x73, 0x80, 0x46, 0x73, 0x53, 0x3c, 0x4e, 0xd5, 0xd6,
	0x59, 0xe2, 0x2e, 0x7b, 0x1c, 0x65, 0xc6, 0xc7, 0xc8, 0xd1, 0x31, 0x4b, 0xd1, 0xac, 0xe2, 0x3f,
	0x09, 0x12, 0x81, 0xce, 0x86, 0x08, 0x4c, 0x63, 0x7a, 0x0b, 0x45, 0x70, 0x1c, 0x05, 0xde, 0xc9,
	0x3c, 0x35, 0x35, 0x28, 0x1b, 0x8a, 0x31, 0x41, 0x3e, 0x92, 0x54, 0x9c, 0x05, 0x2c, 0x2c, 0xe8,
	0xec, 0x32, 0xa0, 0xbb, 0x04, 0x3b, 0xd9, 0xf4, 0xb7, 0x76, 0x49, 0x28, 0x98, 0x1b, 0x2a, 0x30,
	0x81, 0x7f, 0x82, 0xc0, 0x87, 0x4b, 0x80, 0x0b, 0x13, 0x09, 0xc4, 0xe0, 0x94, 0x4c, 0x1d, 0x0c,
	0xa5, 0xfd, 0x24, 0xdd, 0x6f, 0xc3, 0x7e, 0x9a, 0x3d, 0x74, 0x12, 0x0d, 0x15, 0x1b, 0xe6, 0x03,
	0x34, 0xe7, 0x25, 0xdd, 0x51, 0x93, 0x5f, 0xaf, 0x2f, 0x6b, 0x92, 0x22, 0x3e, 0xbf, 0x09, 0x57,
	0xb2, 0x43, 0x8c, 0xae, 0xa0, 0xf5, 0xfa, 0xd2, 0x7e, 0x20, 0xc7, 0xec, 0xda, 0x0b, 0xbe, 0xa2,
	0x7e, 0x59, 0x82, 0x68, 0x46, 0xa3, 0xd0, 0x40, 0xec, 0x6a, 0x69, 0xe7, 0x8e, 0x44, 0xf3, 0xba,
	0x11, 0x63, 0x51, 0x49, 0xcd, 0xfa, 0x3a, 0x34, 0x30, 0x37, 0x7a, 0x36, 0x22, 0x70, 0x90, 0x35,
	0xf6, 0xa5, 0xaa, 0x49, 0x4a, 0xf0, 0xb7, 0xd0, 0xa9, 0x8b, 0x7a, 0x32, 0x09, 0xde, 0x44, 0x85,
	0x9c, 0xa8, 0x18, 0xa9, 0x38, 0x8b, 0x14, 0x59, 0x55, 0x2f, 0x89, 0xf5, 0x23, 0xb5, 0xe0, 0xdd,
	0xed, 0x92, 0x55, 0x1d, 0x3e, 0x1d, 0xfa, 0xe7, 0x8c, 0x44, 0x28, 0xb2, 0x60, 0x49, 0xc2, 0x27,
	0x5d, 0xa3, 0x94, 0xe6, 0x26, 0xab, 0x23, 0x2d, 0x7b, 0x13, 0xad, 0x3c, 0x0d, 0x28, 0x10, 0x56,
	0x87, 0xae, 0x14, 0xf6, 0x89, 0x5a, 0x13, 0xf5, 0x11, 0xb9, 0x3a, 0x8e, 0xcc, 0x35, 0x65, 0x02,
	0xbf, 0x49, 0xf7, 0xc9, 0x2a, 0x8d, 0x79, 0xbb, 0xce, 0xc2, 0x85, 0xc6, 0x19, 0x55, 0x98, 0x65,
	0x71, 0x7e, 0xb1, 0x54, 0x73, 0x1f, 0x8d, 0x33, 0x29, 0x51, 0x5e, 0xf6, 0x80, 0x5b, 0xd2, 0xbf,
	0xcc, 0xa2, 0x38, 0x55, 0x73, 0xc3, 0x1b, 0x46, 0x2a, 0x56, 0xd0, 0x72, 0x9d, 0x51, 0x91, 0x6b,
	0x97, 0xe5, 0x44, 0xf9, 0xb2, 0xeb, 0x03, 0x25, 0xec, 0x46, 0xf5, 0xb3, 0xdc, 0x1f, 0x5f, 0x2d,
	0xad, 0x47, 0xf2, 0x63, 0x6e, 0xf7, 0xa0, 0xfb, 0xc8, 0x09, 0x82, 0xdb, 0x59, 0x01, 0x67, 0xbf,
	0xf5, 0xcf, 0xdf, 0x5d, 0xaf, 0xfc, 0xdb, 0x77, 0xd7, 0x2b, 0xff, 0xf9, 0xdd, 0xf5, 0xca, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x8d, 0x46, 0x40, 0xb5, 0x42, 0x00, 0x00,
}

func (m *WishNoticeAssistantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishNoticeAssistantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ProductName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.WishPlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishPlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishNoticeAssistantResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishNoticeAssistantResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryBoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBoxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxProductName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxProductName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxProductNameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxProductNameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BoxProductNames) > 0 {
		for _, msg := range m.BoxProductNames {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishItemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishItemType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.IsRecommend != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsRecommend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchFoundResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchFoundResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WishItemTypes) > 0 {
		for _, msg := range m.WishItemTypes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CollectBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.XId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.Desc != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RareNum))
	}
	if m.Price != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.WishBoxItemId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishBoxItemId))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.Status != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.IsPreSale != nil {
		dAtA[i] = 0x58
		i++
		if *m.IsPreSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Match != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Match))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Image != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Image)))
		i += copy(dAtA[i:], *m.Image)
	}
	if m.Desc != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if len(m.Items) > 0 {
		for _, num := range m.Items {
			dAtA[i] = 0x28
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.Price != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.WishFishCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishFishCount))
	}
	if m.Label != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Label))
	}
	if m.ProductType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductType))
	}
	if m.ProductStatus != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductStatus))
	}
	if m.ArrivalTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ArrivalTime))
	}
	if m.BoxType != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxType))
	}
	if m.Protector != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Protector)))
		i += copy(dAtA[i:], *m.Protector)
	}
	if m.ProtectorHeadUrl != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProtectorHeadUrl)))
		i += copy(dAtA[i:], *m.ProtectorHeadUrl)
	}
	if m.ProtectorTime != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorTime))
	}
	if m.GetCoin != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GetCoin))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RareNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryBoxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBoxResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Boxes) > 0 {
		for _, msg := range m.Boxes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyWishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyWishReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyWishResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyWishResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Boxes) > 0 {
		for _, msg := range m.Boxes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.ProductType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductType))
	}
	if m.Icon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Icon)))
		i += copy(dAtA[i:], *m.Icon)
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.BoxId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.Price != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.PreHaveTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PreHaveTime))
	}
	if m.IsPreSale != nil {
		dAtA[i] = 0x50
		i++
		if *m.IsPreSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BoxName != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BoxName)))
		i += copy(dAtA[i:], *m.BoxName)
	}
	if m.PlayerWishItemId != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerWishItemId))
	}
	if m.IsWish != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ExpireTime != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ExpireTime))
	}
	if m.IsSaleOut != nil {
		dAtA[i] = 0x78
		i++
		if *m.IsSaleOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Match != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Match))
	}
	if m.RecyclePrice != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RecyclePrice))
	}
	if m.CtrlStatus != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CtrlStatus))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.RecycleType != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RecycleType))
	}
	if m.GiveType != nil {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GiveType))
	}
	if m.IsMakeWish != nil {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if *m.IsMakeWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductShowResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductShowResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, msg := range m.Products {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxShow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxShow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Image != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Image)))
		i += copy(dAtA[i:], *m.Image)
	}
	if m.Desc != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if m.Price != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.WishFishCount != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishFishCount))
	}
	if m.Label != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Label))
	}
	if m.ProductType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductType))
	}
	if m.ProductStatus != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductStatus))
	}
	if m.TotalNum != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RareNum))
	}
	if m.OccupiedTime != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OccupiedTime))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.GuardianPlayerId != nil {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GuardianPlayerId))
	}
	if m.HaveIsWin != nil {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if *m.HaveIsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.Coin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GetCoins) > 0 {
		for _, msg := range m.GetCoins {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Sex != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Sex))
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.Coin != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.IsTryOne != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsTryOne {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Diamond != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.Account != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.IsFirst != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Types != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.SourceType))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddCoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.UserId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.Coin != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddGoldReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGoldReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.SourceType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddGoldResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGoldResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.UserId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.Coin != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetProduct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProduct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.PlayerName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.PlayerName)))
		i += copy(dAtA[i:], *m.PlayerName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.ProductId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.Image != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Image)))
		i += copy(dAtA[i:], *m.Image)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HomeMessageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HomeMessageResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DareMessages) > 0 {
		for _, msg := range m.DareMessages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GetProducts) > 0 {
		for _, msg := range m.GetProducts {
			dAtA[i] = 0x12
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RandProductResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandProductResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GetProducts) > 0 {
		for _, msg := range m.GetProducts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareMessageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareMessageResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DareMessages) > 0 {
		for _, msg := range m.DareMessages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Protector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.PlayerName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.PlayerName)))
		i += copy(dAtA[i:], *m.PlayerName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if len(m.BoxIds) > 0 {
		for _, num := range m.BoxIds {
			dAtA[i] = 0x20
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.ProtectorTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorTime))
	}
	if m.Coin != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProtectorResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtectorResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protectors) > 0 {
		for _, msg := range m.Protectors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProtectorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtectorData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProtectorDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtectorDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protectors) > 0 {
		for _, msg := range m.Protectors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Menu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Menu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MenuResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Menus) > 0 {
		for _, msg := range m.Menus {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductBrand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductBrand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.IsHot != nil {
		dAtA[i] = 0x20
		i++
		if *m.IsHot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductBrandListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductBrandListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProductBrandList) > 0 {
		for _, msg := range m.ProductBrandList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchBoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchBoxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Complex != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Complex))
	}
	if m.Condition != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Condition))
	}
	if m.ProductStatus != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductStatus))
	}
	if m.MinPrice != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.MinPrice))
	}
	if m.MaxPrice != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.MaxPrice))
	}
	if len(m.WishBrandId) > 0 {
		for _, num := range m.WishBrandId {
			dAtA[i] = 0x30
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if len(m.WishItemTypeId) > 0 {
		for _, num := range m.WishItemTypeId {
			dAtA[i] = 0x38
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.Page != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.Label != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Label))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SearchBoxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchBoxResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BoxShowList) > 0 {
		for _, msg := range m.BoxShowList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BrandListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BrandList != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BrandList)))
		i += copy(dAtA[i:], *m.BrandList)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TypeListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeList != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.TypeList)))
		i += copy(dAtA[i:], *m.TypeList)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareRecommendResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareRecommendResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protectors) > 0 {
		for _, msg := range m.Protectors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ranking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ranking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.ProtectorCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorCount))
	}
	if m.CoinCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RankingResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankingResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, msg := range m.Rankings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyRecordResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DareCount != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DareCount))
	}
	if m.TotalCoinCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TotalCoinCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyDare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyDare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.Image != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Image)))
		i += copy(dAtA[i:], *m.Image)
	}
	if m.ProtectorTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorTime))
	}
	if m.CoinCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyDareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyDareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyDareResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyDareResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dares) > 0 {
		for _, msg := range m.Dares {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.ProtectorId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorId))
	}
	if m.Protector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Protector)))
		i += copy(dAtA[i:], *m.Protector)
	}
	if m.ProtectorHeadUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProtectorHeadUrl)))
		i += copy(dAtA[i:], *m.ProtectorHeadUrl)
	}
	if m.ProtectorTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorTime))
	}
	if len(m.ProductList) > 0 {
		for _, msg := range m.ProductList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.IsCollection != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsCollection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BoxPrice != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxPrice))
	}
	if m.BoxIcon != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BoxIcon)))
		i += copy(dAtA[i:], *m.BoxIcon)
	}
	if m.ProductStatus != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductStatus))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WhoDare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhoDare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.IsSuccess != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.ProtectorTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProtectorTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dares) > 0 {
		for _, msg := range m.Dares {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareRecordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.DareId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DareId))
	}
	if m.DareName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.DareName)))
		i += copy(dAtA[i:], *m.DareName)
	}
	if m.BeDareId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BeDareId))
	}
	if m.BeDareName != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BeDareName)))
		i += copy(dAtA[i:], *m.BeDareName)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.Result != nil {
		dAtA[i] = 0x40
		i++
		if *m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeItemId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ChallengeItemId))
	}
	if m.DareHeadIcon != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.DareHeadIcon)))
		i += copy(dAtA[i:], *m.DareHeadIcon)
	}
	if m.DefendTime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DefendTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishOccupied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishOccupied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.NickName != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.EndTime))
	}
	if m.OccupiedTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OccupiedTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DefenderMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefenderMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeadUrl != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.OccupiedTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OccupiedTime))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DefenderMsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefenderMsgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, msg := range m.Msg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GotWishPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GotWishPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeadUrl != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.NickName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.ProductIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductIcon)))
		i += copy(dAtA[i:], *m.ProductIcon)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GotWishPlayerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GotWishPlayerResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, msg := range m.Msg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DareRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DareRecordResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WishLogList) > 0 {
		for _, msg := range m.WishLogList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.WishOccupiedList) > 0 {
		for _, msg := range m.WishOccupiedList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.WishLogCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishLogCount))
	}
	if m.WishOccupiedCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishOccupiedCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductDetailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.Image != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Image)))
		i += copy(dAtA[i:], *m.Image)
	}
	if m.ProductType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductType))
	}
	if m.Desc != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Desc)))
		i += copy(dAtA[i:], *m.Desc)
	}
	if m.Material != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Material)))
		i += copy(dAtA[i:], *m.Material)
	}
	if m.Long != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Long))
	}
	if m.Width != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Width))
	}
	if m.High != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.High))
	}
	if m.Price != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxProductResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxProductResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, msg := range m.ProductList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.OpType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PostageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostageResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Postage1 != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Postage1))
	}
	if m.Postage2 != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Postage2))
	}
	if m.Postage3 != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Postage3))
	}
	if len(m.RemoteAreaList) > 0 {
		for _, s := range m.RemoteAreaList {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.FreeNumber != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.FreeNumber))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoDareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoDareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DareType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DareType))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoDareResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoDareResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProductId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductName)))
		i += copy(dAtA[i:], *m.ProductName)
	}
	if m.Image != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Image)))
		i += copy(dAtA[i:], *m.Image)
	}
	if m.ProductType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductType))
	}
	if m.IsLucky != nil {
		dAtA[i] = 0x28
		i++
		if *m.IsLucky {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOnce != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsOnce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Status != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.ForecastTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ForecastTime))
	}
	if m.PlayerWishItemId != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerWishItemId))
	}
	if m.ProductPrice != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductPrice))
	}
	if m.ProductDiamond != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductDiamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoxListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoxListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BoxList) > 0 {
		for _, msg := range m.BoxList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataPageReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.ReqType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ReqType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CollectionBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Box != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(m.Box.Size()))
		n1, err := m.Box.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CollectionTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CollectionTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MyCollectedBoxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyCollectedBoxResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Boxes) > 0 {
		for _, msg := range m.Boxes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.OnSaleCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OnSaleCount))
	}
	if m.SaleOutCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.SaleOutCount))
	}
	if m.ToExchangeCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ToExchangeCount))
	}
	if m.ExchangedCount != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ExchangedCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DealBoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DealBoxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, num := range m.IdList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.OpType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DefaultResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.Msg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Msg)))
		i += copy(dAtA[i:], *m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProductResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemList) > 0 {
		for _, msg := range m.ItemList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ToExchangeCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ToExchangeCount))
	}
	if m.ExchangedCount != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ExchangedCount))
	}
	if m.RecycleCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RecycleCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecycleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecycleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, num := range m.IdList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.Price != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.CardId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.CardId)))
		i += copy(dAtA[i:], *m.CardId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishBoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishBoxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, num := range m.IdList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.BankCardId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BankCardId)))
		i += copy(dAtA[i:], *m.BankCardId)
	}
	if m.RecycleNote != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RecycleNote))
	}
	if m.AddressId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CollectionBoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionBoxReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, num := range m.IdList {
			dAtA[i] = 0x8
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.OpType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Phone != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Phone)))
		i += copy(dAtA[i:], *m.Phone)
	}
	if m.Detail != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Detail)))
		i += copy(dAtA[i:], *m.Detail)
	}
	if m.IfDefault != nil {
		dAtA[i] = 0x20
		i++
		if *m.IfDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddressId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.AddressId))
	}
	if m.Province != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Province)))
		i += copy(dAtA[i:], *m.Province)
	}
	if m.City != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.City)))
		i += copy(dAtA[i:], *m.City)
	}
	if m.Area != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Area)))
		i += copy(dAtA[i:], *m.Area)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAddressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddressId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddressListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PresaleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PresaleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.ArrivalTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ArrivalTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetExpressInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetExpressInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayId))
	}
	if m.ExpressNum != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ExpressNum)))
		i += copy(dAtA[i:], *m.ExpressNum)
	}
	if m.ProductId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.ReceiveId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ReceiveId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetExpressInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpressInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayId))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetExpressInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpressInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExpressNum != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ExpressNum)))
		i += copy(dAtA[i:], *m.ExpressNum)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Channel != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Channel))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Token != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.Types != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.Token != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.HallSid != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.HallSid))
	}
	if m.NotOneWish != nil {
		dAtA[i] = 0x68
		i++
		if *m.NotOneWish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsTryOne != nil {
		dAtA[i] = 0x70
		i++
		if *m.IsTryOne {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UserId != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.Reason != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.UserRole != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserRole))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JustNumberResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JustNumberResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinToDiamondReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinToDiamondReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.Id != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinToDiamondResq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinToDiamondResq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.DiamondCount != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DiamondCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BankCardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankCardInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BankId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BankId)))
		i += copy(dAtA[i:], *m.BankId)
	}
	if m.BankCode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BankCode)))
		i += copy(dAtA[i:], *m.BankCode)
	}
	if m.BankName != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BankName)))
		i += copy(dAtA[i:], *m.BankName)
	}
	if m.IsSupport != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsSupport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BankCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BankCardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecycleToHall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecycleToHall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.BankCardId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.BankCardId)))
		i += copy(dAtA[i:], *m.BankCardId)
	}
	if m.Price != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondRecharge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.CoinPrice != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinPrice))
	}
	if m.MonthFirst != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.MonthFirst))
	}
	if m.Rebate != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Rebate))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.EndTime))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.Sort != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Sort))
	}
	if m.DisPrice != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DisPrice))
	}
	if m.GiveDiamond != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GiveDiamond))
	}
	if m.IsMonthFirst != nil {
		dAtA[i] = 0x68
		i++
		if *m.IsMonthFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondRechargeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondRechargeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DiamondRechargeList) > 0 {
		for _, msg := range m.DiamondRechargeList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondChangeLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondChangeLogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondChangeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondChangeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.ChangeDiamond != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ChangeDiamond))
	}
	if m.SourceType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.SourceType))
	}
	if m.PayType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PayType))
	}
	if m.CurDiamond != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CurDiamond))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.Note != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Note)))
		i += copy(dAtA[i:], *m.Note)
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiamondChangeLogResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiamondChangeLogResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DiamondChangeLogList) > 0 {
		for _, msg := range m.DiamondChangeLogList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PriceSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OneMin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OneMin))
	}
	if m.OneMax != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OneMax))
	}
	if m.TwoMin != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TwoMin))
	}
	if m.TwoMax != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TwoMax))
	}
	if m.ThreeMin != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ThreeMin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PriceSectionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSectionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PriceSection != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(m.PriceSection.Size()))
		n2, err := m.PriceSection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishCurrencyConversionCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCurrencyConversionCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Money != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Money))
	}
	if m.Coin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Coin))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Postage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(m.Postage.Size()))
		n3, err := m.Postage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RecycleRatio != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.RecycleRatio))
	}
	if len(m.RecycleReason) > 0 {
		for _, msg := range m.RecycleReason {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Conversion != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(m.Conversion.Size()))
		n4, err := m.Conversion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.ErrKey) > 0 {
		for _, s := range m.ErrKey {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.PlayerRecycleMoneyTime != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerRecycleMoneyTime))
	}
	if m.PlayerRecycleMoneySum != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerRecycleMoneySum))
	}
	if m.PlayerRecycleDiamondTime != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerRecycleDiamondTime))
	}
	if m.PlayerRecycleDiamondSum != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerRecycleDiamondSum))
	}
	if m.DayRecycleMoneyTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DayRecycleMoneyTime))
	}
	if m.DayRecycleMoneySum != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DayRecycleMoneySum))
	}
	if m.DayRecycleDiamondTime != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DayRecycleDiamondTime))
	}
	if m.DayRecycleDiamondSum != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DayRecycleDiamondSum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Uid))
	}
	if m.BoxId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.Count != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchDareResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDareResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackStageAddDiamondReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackStageAddDiamondReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Channel != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Channel))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Token != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.Diamond != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackStageUpdateDiamondReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackStageUpdateDiamondReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Channel != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Channel))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Token != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.Diamond != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.Reason != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Reason)))
		i += copy(dAtA[i:], *m.Reason)
	}
	if m.SourceType != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.SourceType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackStageAddDiamondResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackStageAddDiamondResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageSetGuardianReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageSetGuardianReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Channel != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Channel))
	}
	if m.NickName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadUrl != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadUrl)))
		i += copy(dAtA[i:], *m.HeadUrl)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Token != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.BoxId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxId))
	}
	if m.OpType != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageSetGuardianResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageSetGuardianResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayCfgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayCfgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayDiamondTop != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DayDiamondTop))
	}
	if m.DayLimit != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DayLimit))
	}
	if m.OnceDiamondRebate != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.OnceDiamondRebate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderMsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderMsgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.OrderId)))
		i += copy(dAtA[i:], *m.OrderId)
	}
	if m.Status != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActPoolId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ActPoolId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActivityPrizeLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActivityPrizeLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.ActType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ActType))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.WishActPoolRuleId != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishActPoolRuleId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SumNumResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumNumResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignNum != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.SignNum))
	}
	if len(m.WishActivityPrizeLogList) > 0 {
		for _, msg := range m.WishActivityPrizeLogList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastDayTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.LastDayTime))
	}
	if len(m.DayTimeList) > 0 {
		for _, num := range m.DayTimeList {
			dAtA[i] = 0x20
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SumMoneyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumMoneyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DataType))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SumMoneyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumMoneyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NickName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.NickName)))
		i += copy(dAtA[i:], *m.NickName)
	}
	if m.HeadIcon != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.HeadIcon)))
		i += copy(dAtA[i:], *m.HeadIcon)
	}
	if m.ProductIcon != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductIcon)))
		i += copy(dAtA[i:], *m.ProductIcon)
	}
	if m.ConSumDiamondNum != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ConSumDiamondNum))
	}
	if m.GiveDiamondNum != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GiveDiamondNum))
	}
	if m.ProductId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.ProductId)))
		i += copy(dAtA[i:], *m.ProductId)
	}
	if m.PrizeLogId != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PrizeLogId))
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerId))
	}
	if m.AwardType != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.AwardType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SumMoneyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumMoneyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SumMoneyDataList) > 0 {
		for _, msg := range m.SumMoneyDataList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TotalCount))
	}
	if m.TopNum != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.TopNum))
	}
	if m.DiamondNum != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DiamondNum))
	}
	if m.Status != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PrizeLogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PrizeLogId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GiveResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishCoinRechargeActivityCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishCoinRechargeActivityCfg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Amount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Amount))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.EsCoin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.EsCoin))
	}
	if m.Ratio != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Ratio))
	}
	if m.IsRecharge != nil {
		dAtA[i] = 0x30
		i++
		if *m.IsRecharge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeActResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeActResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RechargeLevels) > 0 {
		for _, msg := range m.RechargeLevels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PlayerCoin != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerCoin))
	}
	if m.PlayerDiamond != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerDiamond))
	}
	if m.PlayerEsCoin != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PlayerEsCoin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeLogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PayMoney != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PayMoney))
	}
	if m.CoinNum != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CoinNum))
	}
	if m.GiveNum != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GiveNum))
	}
	if m.GiveType != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.GiveType))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RechargeLogsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RechargeLogsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RechargeLogs) > 0 {
		for _, msg := range m.RechargeLogs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActPool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.BoxNum != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.BoxNum))
	}
	if m.CreateTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.CreateTime))
	}
	if len(m.BoxIds) > 0 {
		for _, num := range m.BoxIds {
			dAtA[i] = 0x40
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActPoolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActPoolResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActPoolList) > 0 {
		for _, msg := range m.ActPoolList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActPoolRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActPoolRuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActPoolId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.ActPoolId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WishActPoolRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WishActPoolRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishActPoolId))
	}
	if m.Key != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Key))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.WishItemId != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishItemId))
	}
	if m.AwardType != nil {
		dAtA[i] = 0x70
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.AwardType))
	}
	if m.Type != nil {
		dAtA[i] = 0x78
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActPoolRuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActPoolRuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WishActPoolRuleList) > 0 {
		for _, msg := range m.WishActPoolRuleList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintH5Wish(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActNameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActNameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActOpenStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActOpenStatusResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0x8
		i++
		if *m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageDareToolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageDareToolReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.PoolId))
	}
	if m.Count != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Count))
	}
	if m.Diamond != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Diamond))
	}
	if m.UserId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.UserId))
	}
	if m.WishBoxId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.WishBoxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageDareToolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageDareToolResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.DareCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.DareCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BackstageClearToolDataResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackstageClearToolDataResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintH5Wish(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintH5Wish(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WishNoticeAssistantReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.WishPlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishPlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishNoticeAssistantResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryBoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxProductName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxProductNameResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BoxProductNames) > 0 {
		for _, e := range m.BoxProductNames {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishItemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.IsRecommend != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchFoundResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WishItemTypes) > 0 {
		for _, e := range m.WishItemTypes {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XId != nil {
		n += 1 + sovH5Wish(uint64(*m.XId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.TotalNum != nil {
		n += 1 + sovH5Wish(uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		n += 1 + sovH5Wish(uint64(*m.RareNum))
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.WishBoxItemId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishBoxItemId))
	}
	if m.WishBoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishBoxId))
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.IsPreSale != nil {
		n += 2
	}
	if m.Match != nil {
		n += 1 + sovH5Wish(uint64(*m.Match))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.WishFishCount != nil {
		n += 1 + sovH5Wish(uint64(*m.WishFishCount))
	}
	if m.Label != nil {
		n += 1 + sovH5Wish(uint64(*m.Label))
	}
	if m.ProductType != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductType))
	}
	if m.ProductStatus != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductStatus))
	}
	if m.ArrivalTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ArrivalTime))
	}
	if m.BoxType != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxType))
	}
	if m.Protector != nil {
		l = len(*m.Protector)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorHeadUrl != nil {
		l = len(*m.ProtectorHeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorTime))
	}
	if m.GetCoin != nil {
		n += 2 + sovH5Wish(uint64(*m.GetCoin))
	}
	if m.TotalNum != nil {
		n += 2 + sovH5Wish(uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		n += 2 + sovH5Wish(uint64(*m.RareNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryBoxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Boxes) > 0 {
		for _, e := range m.Boxes {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyWishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyWishResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Boxes) > 0 {
		for _, e := range m.Boxes {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.ProductType != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductType))
	}
	if m.Icon != nil {
		l = len(*m.Icon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.PreHaveTime != nil {
		n += 1 + sovH5Wish(uint64(*m.PreHaveTime))
	}
	if m.IsPreSale != nil {
		n += 2
	}
	if m.BoxName != nil {
		l = len(*m.BoxName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PlayerWishItemId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerWishItemId))
	}
	if m.IsWish != nil {
		n += 2
	}
	if m.ExpireTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ExpireTime))
	}
	if m.IsSaleOut != nil {
		n += 2
	}
	if m.Match != nil {
		n += 2 + sovH5Wish(uint64(*m.Match))
	}
	if m.RecyclePrice != nil {
		n += 2 + sovH5Wish(uint64(*m.RecyclePrice))
	}
	if m.CtrlStatus != nil {
		n += 2 + sovH5Wish(uint64(*m.CtrlStatus))
	}
	if m.Diamond != nil {
		n += 2 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.RecycleType != nil {
		n += 2 + sovH5Wish(uint64(*m.RecycleType))
	}
	if m.GiveType != nil {
		n += 2 + sovH5Wish(uint64(*m.GiveType))
	}
	if m.IsMakeWish != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductShowResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxShow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.WishFishCount != nil {
		n += 1 + sovH5Wish(uint64(*m.WishFishCount))
	}
	if m.Label != nil {
		n += 1 + sovH5Wish(uint64(*m.Label))
	}
	if m.ProductType != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductType))
	}
	if m.ProductStatus != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductStatus))
	}
	if m.TotalNum != nil {
		n += 2 + sovH5Wish(uint64(*m.TotalNum))
	}
	if m.RareNum != nil {
		n += 2 + sovH5Wish(uint64(*m.RareNum))
	}
	if m.OccupiedTime != nil {
		n += 2 + sovH5Wish(uint64(*m.OccupiedTime))
	}
	if m.CoinNum != nil {
		n += 2 + sovH5Wish(uint64(*m.CoinNum))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 2 + l + sovH5Wish(uint64(l))
	}
	if m.GuardianPlayerId != nil {
		n += 2 + sovH5Wish(uint64(*m.GuardianPlayerId))
	}
	if m.HaveIsWin != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoinResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GetCoins) > 0 {
		for _, e := range m.GetCoins {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Sex != nil {
		n += 1 + sovH5Wish(uint64(*m.Sex))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.IsTryOne != nil {
		n += 2
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.IsFirst != nil {
		n += 2
	}
	if m.Types != nil {
		n += 2 + sovH5Wish(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.SourceType != nil {
		n += 1 + sovH5Wish(uint64(*m.SourceType))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddCoinResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGoldReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.SourceType != nil {
		n += 1 + sovH5Wish(uint64(*m.SourceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddGoldResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProduct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.PlayerName != nil {
		l = len(*m.PlayerName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HomeMessageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DareMessages) > 0 {
		for _, e := range m.DareMessages {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if len(m.GetProducts) > 0 {
		for _, e := range m.GetProducts {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RandProductResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GetProducts) > 0 {
		for _, e := range m.GetProducts {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareMessageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DareMessages) > 0 {
		for _, e := range m.DareMessages {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Protector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.PlayerName != nil {
		l = len(*m.PlayerName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if len(m.BoxIds) > 0 {
		for _, e := range m.BoxIds {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.ProtectorTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorTime))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtectorResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Protectors) > 0 {
		for _, e := range m.Protectors {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtectorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProtectorDataResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Protectors) > 0 {
		for _, e := range m.Protectors {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Menu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Menus) > 0 {
		for _, e := range m.Menus {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.IsHot != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductBrandListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductBrandList) > 0 {
		for _, e := range m.ProductBrandList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchBoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Complex != nil {
		n += 1 + sovH5Wish(uint64(*m.Complex))
	}
	if m.Condition != nil {
		n += 1 + sovH5Wish(uint64(*m.Condition))
	}
	if m.ProductStatus != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductStatus))
	}
	if m.MinPrice != nil {
		n += 1 + sovH5Wish(uint64(*m.MinPrice))
	}
	if m.MaxPrice != nil {
		n += 1 + sovH5Wish(uint64(*m.MaxPrice))
	}
	if len(m.WishBrandId) > 0 {
		for _, e := range m.WishBrandId {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if len(m.WishItemTypeId) > 0 {
		for _, e := range m.WishItemTypeId {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.Label != nil {
		n += 1 + sovH5Wish(uint64(*m.Label))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchBoxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BoxShowList) > 0 {
		for _, e := range m.BoxShowList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BrandList != nil {
		l = len(*m.BrandList)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TypeListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeList != nil {
		l = len(*m.TypeList)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareRecommendResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Protectors) > 0 {
		for _, e := range m.Protectors {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ranking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorCount != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorCount))
	}
	if m.CoinCount != nil {
		n += 1 + sovH5Wish(uint64(*m.CoinCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankingResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DareCount != nil {
		n += 1 + sovH5Wish(uint64(*m.DareCount))
	}
	if m.TotalCoinCount != nil {
		n += 1 + sovH5Wish(uint64(*m.TotalCoinCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyDare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorTime))
	}
	if m.CoinCount != nil {
		n += 1 + sovH5Wish(uint64(*m.CoinCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyDareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyDareResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dares) > 0 {
		for _, e := range m.Dares {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.ProtectorId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorId))
	}
	if m.Protector != nil {
		l = len(*m.Protector)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorHeadUrl != nil {
		l = len(*m.ProtectorHeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorTime))
	}
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.IsCollection != nil {
		n += 2
	}
	if m.BoxPrice != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxPrice))
	}
	if m.BoxIcon != nil {
		l = len(*m.BoxIcon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductStatus != nil {
		n += 2 + sovH5Wish(uint64(*m.ProductStatus))
	}
	if m.CreateTime != nil {
		n += 2 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WhoDare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.IsSuccess != nil {
		n += 2
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProtectorTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ProtectorTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dares) > 0 {
		for _, e := range m.Dares {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishBoxId))
	}
	if m.DareId != nil {
		n += 1 + sovH5Wish(uint64(*m.DareId))
	}
	if m.DareName != nil {
		l = len(*m.DareName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.BeDareId != nil {
		n += 1 + sovH5Wish(uint64(*m.BeDareId))
	}
	if m.BeDareName != nil {
		l = len(*m.BeDareName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.Result != nil {
		n += 2
	}
	if m.ChallengeItemId != nil {
		n += 1 + sovH5Wish(uint64(*m.ChallengeItemId))
	}
	if m.DareHeadIcon != nil {
		l = len(*m.DareHeadIcon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.DefendTime != nil {
		n += 1 + sovH5Wish(uint64(*m.DefendTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishOccupied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.WishBoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishBoxId))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.EndTime != nil {
		n += 1 + sovH5Wish(uint64(*m.EndTime))
	}
	if m.OccupiedTime != nil {
		n += 1 + sovH5Wish(uint64(*m.OccupiedTime))
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.CoinNum != nil {
		n += 1 + sovH5Wish(uint64(*m.CoinNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefenderMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.OccupiedTime != nil {
		n += 1 + sovH5Wish(uint64(*m.OccupiedTime))
	}
	if m.CoinNum != nil {
		n += 1 + sovH5Wish(uint64(*m.CoinNum))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefenderMsgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, e := range m.Msg {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GotWishPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductIcon != nil {
		l = len(*m.ProductIcon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GotWishPlayerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msg) > 0 {
		for _, e := range m.Msg {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DareRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WishLogList) > 0 {
		for _, e := range m.WishLogList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if len(m.WishOccupiedList) > 0 {
		for _, e := range m.WishOccupiedList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.WishLogCount != nil {
		n += 1 + sovH5Wish(uint64(*m.WishLogCount))
	}
	if m.WishOccupiedCount != nil {
		n += 1 + sovH5Wish(uint64(*m.WishOccupiedCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductType != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductType))
	}
	if m.Desc != nil {
		l = len(*m.Desc)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Material != nil {
		l = len(*m.Material)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Long != nil {
		n += 1 + sovH5Wish(uint64(*m.Long))
	}
	if m.Width != nil {
		n += 1 + sovH5Wish(uint64(*m.Width))
	}
	if m.High != nil {
		n += 1 + sovH5Wish(uint64(*m.High))
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxProductResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.OpType != nil {
		n += 1 + sovH5Wish(uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Postage1 != nil {
		n += 1 + sovH5Wish(uint64(*m.Postage1))
	}
	if m.Postage2 != nil {
		n += 1 + sovH5Wish(uint64(*m.Postage2))
	}
	if m.Postage3 != nil {
		n += 1 + sovH5Wish(uint64(*m.Postage3))
	}
	if len(m.RemoteAreaList) > 0 {
		for _, s := range m.RemoteAreaList {
			l = len(s)
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.FreeNumber != nil {
		n += 1 + sovH5Wish(uint64(*m.FreeNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoDareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DareType != nil {
		n += 1 + sovH5Wish(uint64(*m.DareType))
	}
	if m.WishBoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishBoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoDareResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.ProductName != nil {
		l = len(*m.ProductName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Image != nil {
		l = len(*m.Image)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductType != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductType))
	}
	if m.IsLucky != nil {
		n += 2
	}
	if m.IsOnce != nil {
		n += 2
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.ForecastTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ForecastTime))
	}
	if m.PlayerWishItemId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerWishItemId))
	}
	if m.ProductPrice != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductPrice))
	}
	if m.ProductDiamond != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductDiamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoxListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BoxList) > 0 {
		for _, e := range m.BoxList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.ReqType != nil {
		n += 1 + sovH5Wish(uint64(*m.ReqType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Box != nil {
		l = m.Box.Size()
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.CollectionTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CollectionTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MyCollectedBoxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Boxes) > 0 {
		for _, e := range m.Boxes {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.OnSaleCount != nil {
		n += 1 + sovH5Wish(uint64(*m.OnSaleCount))
	}
	if m.SaleOutCount != nil {
		n += 1 + sovH5Wish(uint64(*m.SaleOutCount))
	}
	if m.ToExchangeCount != nil {
		n += 1 + sovH5Wish(uint64(*m.ToExchangeCount))
	}
	if m.ExchangedCount != nil {
		n += 1 + sovH5Wish(uint64(*m.ExchangedCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovH5Wish(uint64(*m.RecycleCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DealBoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, e := range m.IdList {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.OpType != nil {
		n += 1 + sovH5Wish(uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefaultResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProductResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.ToExchangeCount != nil {
		n += 1 + sovH5Wish(uint64(*m.ToExchangeCount))
	}
	if m.ExchangedCount != nil {
		n += 1 + sovH5Wish(uint64(*m.ExchangedCount))
	}
	if m.RecycleCount != nil {
		n += 1 + sovH5Wish(uint64(*m.RecycleCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecycleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, e := range m.IdList {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.CardId != nil {
		l = len(*m.CardId)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishBoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, e := range m.IdList {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.BankCardId != nil {
		l = len(*m.BankCardId)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.RecycleNote != nil {
		n += 1 + sovH5Wish(uint64(*m.RecycleNote))
	}
	if m.AddressId != nil {
		n += 1 + sovH5Wish(uint64(*m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionBoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdList) > 0 {
		for _, e := range m.IdList {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.OpType != nil {
		n += 1 + sovH5Wish(uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Phone != nil {
		l = len(*m.Phone)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Detail != nil {
		l = len(*m.Detail)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.IfDefault != nil {
		n += 2
	}
	if m.AddressId != nil {
		n += 1 + sovH5Wish(uint64(*m.AddressId))
	}
	if m.Province != nil {
		l = len(*m.Province)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.City != nil {
		l = len(*m.City)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Area != nil {
		l = len(*m.Area)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveAddressReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressId != nil {
		n += 1 + sovH5Wish(uint64(*m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddressListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PresaleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.ArrivalTime != nil {
		n += 1 + sovH5Wish(uint64(*m.ArrivalTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetExpressInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayId))
	}
	if m.ExpressNum != nil {
		l = len(*m.ExpressNum)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.ReceiveId != nil {
		n += 1 + sovH5Wish(uint64(*m.ReceiveId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExpressInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayId))
	}
	if m.ProductId != nil {
		n += 1 + sovH5Wish(uint64(*m.ProductId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExpressInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpressNum != nil {
		l = len(*m.ExpressNum)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Channel != nil {
		n += 1 + sovH5Wish(uint64(*m.Channel))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Types != nil {
		n += 2 + sovH5Wish(uint64(*m.Types))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HallSid != nil {
		n += 1 + sovH5Wish(uint64(*m.HallSid))
	}
	if m.NotOneWish != nil {
		n += 2
	}
	if m.IsTryOne != nil {
		n += 2
	}
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 2 + l + sovH5Wish(uint64(l))
	}
	if m.UserRole != nil {
		n += 2 + sovH5Wish(uint64(*m.UserRole))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JustNumberResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinToDiamondReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinToDiamondResq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.DiamondCount != nil {
		n += 1 + sovH5Wish(uint64(*m.DiamondCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankCardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BankId != nil {
		l = len(*m.BankId)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.BankCode != nil {
		l = len(*m.BankCode)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.BankName != nil {
		l = len(*m.BankName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.IsSupport != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BankCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecycleToHall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.BankCardId != nil {
		l = len(*m.BankCardId)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Price != nil {
		n += 1 + sovH5Wish(uint64(*m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.CoinPrice != nil {
		n += 1 + sovH5Wish(uint64(*m.CoinPrice))
	}
	if m.MonthFirst != nil {
		n += 1 + sovH5Wish(uint64(*m.MonthFirst))
	}
	if m.Rebate != nil {
		n += 1 + sovH5Wish(uint64(*m.Rebate))
	}
	if m.StartTime != nil {
		n += 1 + sovH5Wish(uint64(*m.StartTime))
	}
	if m.EndTime != nil {
		n += 1 + sovH5Wish(uint64(*m.EndTime))
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.Sort != nil {
		n += 1 + sovH5Wish(uint64(*m.Sort))
	}
	if m.DisPrice != nil {
		n += 1 + sovH5Wish(uint64(*m.DisPrice))
	}
	if m.GiveDiamond != nil {
		n += 1 + sovH5Wish(uint64(*m.GiveDiamond))
	}
	if m.IsMonthFirst != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondRechargeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DiamondRechargeList) > 0 {
		for _, e := range m.DiamondRechargeList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondChangeLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondChangeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovH5Wish(uint64(*m.LogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.ChangeDiamond != nil {
		n += 1 + sovH5Wish(uint64(*m.ChangeDiamond))
	}
	if m.SourceType != nil {
		n += 1 + sovH5Wish(uint64(*m.SourceType))
	}
	if m.PayType != nil {
		n += 1 + sovH5Wish(uint64(*m.PayType))
	}
	if m.CurDiamond != nil {
		n += 1 + sovH5Wish(uint64(*m.CurDiamond))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.Note != nil {
		l = len(*m.Note)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiamondChangeLogResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DiamondChangeLogList) > 0 {
		for _, e := range m.DiamondChangeLogList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriceSection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OneMin != nil {
		n += 1 + sovH5Wish(uint64(*m.OneMin))
	}
	if m.OneMax != nil {
		n += 1 + sovH5Wish(uint64(*m.OneMax))
	}
	if m.TwoMin != nil {
		n += 1 + sovH5Wish(uint64(*m.TwoMin))
	}
	if m.TwoMax != nil {
		n += 1 + sovH5Wish(uint64(*m.TwoMax))
	}
	if m.ThreeMin != nil {
		n += 1 + sovH5Wish(uint64(*m.ThreeMin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PriceSectionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriceSection != nil {
		l = m.PriceSection.Size()
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCurrencyConversionCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Money != nil {
		n += 1 + sovH5Wish(uint64(*m.Money))
	}
	if m.Coin != nil {
		n += 1 + sovH5Wish(uint64(*m.Coin))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Postage != nil {
		l = m.Postage.Size()
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.RecycleRatio != nil {
		n += 1 + sovH5Wish(uint64(*m.RecycleRatio))
	}
	if len(m.RecycleReason) > 0 {
		for _, e := range m.RecycleReason {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.Conversion != nil {
		l = m.Conversion.Size()
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if len(m.ErrKey) > 0 {
		for _, s := range m.ErrKey {
			l = len(s)
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.PlayerRecycleMoneyTime != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerRecycleMoneyTime))
	}
	if m.PlayerRecycleMoneySum != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerRecycleMoneySum))
	}
	if m.PlayerRecycleDiamondTime != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerRecycleDiamondTime))
	}
	if m.PlayerRecycleDiamondSum != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerRecycleDiamondSum))
	}
	if m.DayRecycleMoneyTime != nil {
		n += 1 + sovH5Wish(uint64(*m.DayRecycleMoneyTime))
	}
	if m.DayRecycleMoneySum != nil {
		n += 1 + sovH5Wish(uint64(*m.DayRecycleMoneySum))
	}
	if m.DayRecycleDiamondTime != nil {
		n += 1 + sovH5Wish(uint64(*m.DayRecycleDiamondTime))
	}
	if m.DayRecycleDiamondSum != nil {
		n += 1 + sovH5Wish(uint64(*m.DayRecycleDiamondSum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != nil {
		n += 1 + sovH5Wish(uint64(*m.Uid))
	}
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchDareResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackStageAddDiamondReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Channel != nil {
		n += 1 + sovH5Wish(uint64(*m.Channel))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackStageUpdateDiamondReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Channel != nil {
		n += 1 + sovH5Wish(uint64(*m.Channel))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.Reason != nil {
		l = len(*m.Reason)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.SourceType != nil {
		n += 1 + sovH5Wish(uint64(*m.SourceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackStageAddDiamondResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageSetGuardianReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Channel != nil {
		n += 1 + sovH5Wish(uint64(*m.Channel))
	}
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadUrl != nil {
		l = len(*m.HeadUrl)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.BoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxId))
	}
	if m.OpType != nil {
		n += 1 + sovH5Wish(uint64(*m.OpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageSetGuardianResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayCfgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DayDiamondTop != nil {
		n += 1 + sovH5Wish(uint64(*m.DayDiamondTop))
	}
	if m.DayLimit != nil {
		n += 1 + sovH5Wish(uint64(*m.DayLimit))
	}
	if m.OnceDiamondRebate != nil {
		n += 1 + sovH5Wish(uint64(*m.OnceDiamondRebate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderMsgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != nil {
		l = len(*m.OrderId)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SumReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActPoolId != nil {
		n += 1 + sovH5Wish(uint64(*m.ActPoolId))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActivityPrizeLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.ActType != nil {
		n += 1 + sovH5Wish(uint64(*m.ActType))
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.WishActPoolRuleId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishActPoolRuleId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SumNumResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignNum != nil {
		n += 1 + sovH5Wish(uint64(*m.SignNum))
	}
	if len(m.WishActivityPrizeLogList) > 0 {
		for _, e := range m.WishActivityPrizeLogList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.LastDayTime != nil {
		n += 1 + sovH5Wish(uint64(*m.LastDayTime))
	}
	if len(m.DayTimeList) > 0 {
		for _, e := range m.DayTimeList {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SumMoneyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != nil {
		n += 1 + sovH5Wish(uint64(*m.DataType))
	}
	if m.Page != nil {
		n += 1 + sovH5Wish(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovH5Wish(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SumMoneyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NickName != nil {
		l = len(*m.NickName)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.HeadIcon != nil {
		l = len(*m.HeadIcon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ProductIcon != nil {
		l = len(*m.ProductIcon)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.ConSumDiamondNum != nil {
		n += 1 + sovH5Wish(uint64(*m.ConSumDiamondNum))
	}
	if m.GiveDiamondNum != nil {
		n += 1 + sovH5Wish(uint64(*m.GiveDiamondNum))
	}
	if m.ProductId != nil {
		l = len(*m.ProductId)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.PrizeLogId != nil {
		n += 1 + sovH5Wish(uint64(*m.PrizeLogId))
	}
	if m.PlayerId != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerId))
	}
	if m.AwardType != nil {
		n += 1 + sovH5Wish(uint64(*m.AwardType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SumMoneyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SumMoneyDataList) > 0 {
		for _, e := range m.SumMoneyDataList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.TotalCount != nil {
		n += 1 + sovH5Wish(uint64(*m.TotalCount))
	}
	if m.TopNum != nil {
		n += 1 + sovH5Wish(uint64(*m.TopNum))
	}
	if m.DiamondNum != nil {
		n += 1 + sovH5Wish(uint64(*m.DiamondNum))
	}
	if m.Status != nil {
		n += 1 + sovH5Wish(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrizeLogId != nil {
		n += 1 + sovH5Wish(uint64(*m.PrizeLogId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GiveResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishCoinRechargeActivityCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Amount != nil {
		n += 1 + sovH5Wish(uint64(*m.Amount))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.EsCoin != nil {
		n += 1 + sovH5Wish(uint64(*m.EsCoin))
	}
	if m.Ratio != nil {
		n += 1 + sovH5Wish(uint64(*m.Ratio))
	}
	if m.IsRecharge != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeActResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RechargeLevels) > 0 {
		for _, e := range m.RechargeLevels {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.PlayerCoin != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerCoin))
	}
	if m.PlayerDiamond != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerDiamond))
	}
	if m.PlayerEsCoin != nil {
		n += 1 + sovH5Wish(uint64(*m.PlayerEsCoin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayMoney != nil {
		n += 1 + sovH5Wish(uint64(*m.PayMoney))
	}
	if m.CoinNum != nil {
		n += 1 + sovH5Wish(uint64(*m.CoinNum))
	}
	if m.GiveNum != nil {
		n += 1 + sovH5Wish(uint64(*m.GiveNum))
	}
	if m.GiveType != nil {
		n += 1 + sovH5Wish(uint64(*m.GiveType))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RechargeLogsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RechargeLogs) > 0 {
		for _, e := range m.RechargeLogs {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.BoxNum != nil {
		n += 1 + sovH5Wish(uint64(*m.BoxNum))
	}
	if m.CreateTime != nil {
		n += 1 + sovH5Wish(uint64(*m.CreateTime))
	}
	if len(m.BoxIds) > 0 {
		for _, e := range m.BoxIds {
			n += 1 + sovH5Wish(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActPoolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActPoolList) > 0 {
		for _, e := range m.ActPoolList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActPoolRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActPoolId != nil {
		n += 1 + sovH5Wish(uint64(*m.ActPoolId))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WishActPoolRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovH5Wish(uint64(*m.Id))
	}
	if m.WishActPoolId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishActPoolId))
	}
	if m.Key != nil {
		n += 1 + sovH5Wish(uint64(*m.Key))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.WishItemId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishItemId))
	}
	if m.AwardType != nil {
		n += 1 + sovH5Wish(uint64(*m.AwardType))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActPoolRuleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WishActPoolRuleList) > 0 {
		for _, e := range m.WishActPoolRuleList {
			l = e.Size()
			n += 1 + l + sovH5Wish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActNameResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovH5Wish(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovH5Wish(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActOpenStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageDareToolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != nil {
		n += 1 + sovH5Wish(uint64(*m.PoolId))
	}
	if m.Count != nil {
		n += 1 + sovH5Wish(uint64(*m.Count))
	}
	if m.Diamond != nil {
		n += 1 + sovH5Wish(uint64(*m.Diamond))
	}
	if m.UserId != nil {
		n += 1 + sovH5Wish(uint64(*m.UserId))
	}
	if m.WishBoxId != nil {
		n += 1 + sovH5Wish(uint64(*m.WishBoxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageDareToolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.DareCount != nil {
		n += 1 + sovH5Wish(uint64(*m.DareCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BackstageClearToolDataResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovH5Wish(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovH5Wish(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozH5Wish(x uint64) (n int) {
	return sovH5Wish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WishNoticeAssistantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishNoticeAssistantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishNoticeAssistantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishPlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishNoticeAssistantResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishNoticeAssistantResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishNoticeAssistantResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxProductName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxProductName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxProductName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxProductNameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxProductNameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxProductNameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxProductNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxProductNames = append(m.BoxProductNames, &BoxProductName{})
			if err := m.BoxProductNames[len(m.BoxProductNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishItemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishItemType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishItemType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecommend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecommend = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchFoundResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchFoundResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchFoundResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WishItemTypes = append(m.WishItemTypes, &WishItemType{})
			if err := m.WishItemTypes[len(m.WishItemTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RareNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RareNum = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxItemId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPreSale = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Items = append(m.Items, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Items) == 0 {
					m.Items = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Items = append(m.Items, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishFishCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishFishCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Label = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductStatus = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivalTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArrivalTime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxType = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Protector = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorHeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProtectorHeadUrl = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorTime = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetCoin = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RareNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RareNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBoxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBoxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBoxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Boxes = append(m.Boxes, &QueryBox{})
			if err := m.Boxes[len(m.Boxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyWishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyWishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyWishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyWishResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyWishResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyWishResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Boxes = append(m.Boxes, &QueryBox{})
			if err := m.Boxes[len(m.Boxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductType = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHaveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreHaveTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPreSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPreSale = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxName = &s
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerWishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerWishItemId = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsWish = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireTime = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSaleOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSaleOut = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecyclePrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecyclePrice = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CtrlStatus = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleType = &v
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMakeWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMakeWish = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductShowResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductShowResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductShowResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &Product{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxShow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxShow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxShow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishFishCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishFishCount = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Label = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductStatus = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNum = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RareNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RareNum = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupiedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OccupiedTime = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianPlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuardianPlayerId = &v
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveIsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HaveIsWin = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetCoins = append(m.GetCoins, &GetCoin{})
			if err := m.GetCoins[len(m.GetCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sex = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTryOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTryOne = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFirst = &b
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGoldReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGoldReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGoldReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddGoldResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGoldResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGoldResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProduct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProduct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProduct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HomeMessageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HomeMessageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HomeMessageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DareMessages = append(m.DareMessages, &DareMessage{})
			if err := m.DareMessages[len(m.DareMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetProducts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetProducts = append(m.GetProducts, &GetProduct{})
			if err := m.GetProducts[len(m.GetProducts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandProductResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandProductResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandProductResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetProducts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetProducts = append(m.GetProducts, &GetProduct{})
			if err := m.GetProducts[len(m.GetProducts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareMessageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareMessageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareMessageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DareMessages = append(m.DareMessages, &DareMessage{})
			if err := m.DareMessages[len(m.DareMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Protector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PlayerName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoxIds = append(m.BoxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BoxIds) == 0 {
					m.BoxIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoxIds = append(m.BoxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtectorResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtectorResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtectorResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protectors = append(m.Protectors, &Protector{})
			if err := m.Protectors[len(m.Protectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtectorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtectorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtectorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtectorDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtectorDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtectorDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protectors = append(m.Protectors, &ProtectorData{})
			if err := m.Protectors[len(m.Protectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Menu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Menu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Menu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Menus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Menus = append(m.Menus, &Menu{})
			if err := m.Menus[len(m.Menus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductBrand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductBrand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductBrand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHot = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductBrandListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductBrandListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductBrandListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductBrandList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductBrandList = append(m.ProductBrandList, &ProductBrand{})
			if err := m.ProductBrandList[len(m.ProductBrandList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchBoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchBoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchBoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complex = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Condition = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductStatus = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinPrice = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxPrice = &v
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WishBrandId = append(m.WishBrandId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WishBrandId) == 0 {
					m.WishBrandId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WishBrandId = append(m.WishBrandId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBrandId", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WishItemTypeId = append(m.WishItemTypeId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WishItemTypeId) == 0 {
					m.WishItemTypeId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WishItemTypeId = append(m.WishItemTypeId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemTypeId", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Label = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchBoxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchBoxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchBoxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxShowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxShowList = append(m.BoxShowList, &BoxShow{})
			if err := m.BoxShowList[len(m.BoxShowList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BrandList = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TypeList = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareRecommendResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareRecommendResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareRecommendResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protectors = append(m.Protectors, &Protector{})
			if err := m.Protectors[len(m.Protectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ranking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ranking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ranking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankingResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankingResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankingResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &Ranking{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCoinCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCoinCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyDare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyDare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyDare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyDareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyDareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyDareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyDareResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyDareResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyDareResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dares = append(m.Dares, &MyDare{})
			if err := m.Dares[len(m.Dares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Protector = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorHeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProtectorHeadUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &Product{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCollection = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxPrice = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BoxIcon = &s
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductStatus = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhoDare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhoDare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhoDare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSuccess = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectorTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectorTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dares = append(m.Dares, &WhoDare{})
			if err := m.Dares[len(m.Dares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DareName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeDareId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BeDareId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeDareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BeDareName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Result = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeItemId = &v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareHeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DareHeadIcon = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefendTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishOccupied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishOccupied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishOccupied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupiedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OccupiedTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefenderMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefenderMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefenderMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccupiedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OccupiedTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefenderMsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefenderMsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefenderMsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, &DefenderMsg{})
			if err := m.Msg[len(m.Msg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GotWishPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotWishPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotWishPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductIcon = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GotWishPlayerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotWishPlayerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotWishPlayerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg, &GotWishPlayer{})
			if err := m.Msg[len(m.Msg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DareRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DareRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DareRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishLogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WishLogList = append(m.WishLogList, &WishLog{})
			if err := m.WishLogList[len(m.WishLogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishOccupiedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WishOccupiedList = append(m.WishOccupiedList, &WishOccupied{})
			if err := m.WishOccupiedList[len(m.WishOccupiedList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishLogCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishLogCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishOccupiedCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishOccupiedCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductType = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Desc = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Material", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Material = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Long = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Width = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.High = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxProductResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxProductResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxProductResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &ProductDetail{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage1 = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage2", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage2 = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Postage3 = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAreaList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAreaList = append(m.RemoteAreaList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeNumber", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeNumber = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoDareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoDareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoDareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoDareResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoDareResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoDareResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Image = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLucky", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsLucky = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOnce = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForecastTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerWishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerWishItemId = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductPrice = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductDiamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoxListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoxListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoxListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxList = append(m.BoxList, &QueryBox{})
			if err := m.BoxList[len(m.BoxList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Box == nil {
				m.Box = &QueryBox{}
			}
			if err := m.Box.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CollectionTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyCollectedBoxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyCollectedBoxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyCollectedBoxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Boxes = append(m.Boxes, &CollectBox{})
			if err := m.Boxes[len(m.Boxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnSaleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnSaleCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleOutCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaleOutCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToExchangeCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToExchangeCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExchangedCount = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DealBoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DealBoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DealBoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &Product{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToExchangeCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToExchangeCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExchangedCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecycleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecycleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecycleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CardId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishBoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishBoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishBoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCardId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleNote", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleNote = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddressId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionBoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionBoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionBoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Phone = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Detail = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IfDefault = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddressId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Province = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.City = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Area = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddressId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &WishAddress{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PresaleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PresaleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PresaleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivalTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArrivalTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetExpressInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetExpressInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetExpressInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressNum = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiveId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpressInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpressInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpressInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProductId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpressInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpressInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpressInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpressNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExpressNum = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Types = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallSid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HallSid = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotOneWish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NotOneWish = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTryOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTryOne = &b
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRole", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserRole = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JustNumberResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JustNumberResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JustNumberResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinToDiamondReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinToDiamondReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinToDiamondReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinToDiamondResq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinToDiamondResq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinToDiamondResq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiamondCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankCardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankCardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankCardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCode = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSupport = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BankCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BankCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BankCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &BankCardInfo{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecycleToHall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecycleToHall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecycleToHall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankCardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BankCardId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Price = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinPrice = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthFirst", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MonthFirst = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebate", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rebate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sort = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisPrice", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisPrice = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveDiamond = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMonthFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsMonthFirst = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondRechargeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondRechargeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondRechargeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondRechargeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiamondRechargeList = append(m.DiamondRechargeList, &DiamondRecharge{})
			if err := m.DiamondRechargeList[len(m.DiamondRechargeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondChangeLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondChangeLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondChangeLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondChangeLog) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondChangeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondChangeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeDiamond = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayType = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurDiamond = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Note = &s
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("LogId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiamondChangeLogResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondChangeLogResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondChangeLogResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondChangeLogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiamondChangeLogList = append(m.DiamondChangeLogList, &DiamondChangeLog{})
			if err := m.DiamondChangeLogList[len(m.DiamondChangeLogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneMin = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneMax = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoMin = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoMax", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoMax = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreeMin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreeMin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceSectionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSectionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSectionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriceSection == nil {
				m.PriceSection = &PriceSection{}
			}
			if err := m.PriceSection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCurrencyConversionCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCurrencyConversionCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCurrencyConversionCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Postage == nil {
				m.Postage = &PostageResp{}
			}
			if err := m.Postage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleRatio", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecycleRatio = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecycleReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecycleReason = append(m.RecycleReason, &Menu{})
			if err := m.RecycleReason[len(m.RecycleReason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversion == nil {
				m.Conversion = &WishCurrencyConversionCfg{}
			}
			if err := m.Conversion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrKey = append(m.ErrKey, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleMoneyTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleMoneyTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleMoneySum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleMoneySum = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleDiamondTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleDiamondTime = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRecycleDiamondSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerRecycleDiamondSum = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRecycleMoneyTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayRecycleMoneyTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRecycleMoneySum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayRecycleMoneySum = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRecycleDiamondTime", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayRecycleDiamondTime = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRecycleDiamondSum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayRecycleDiamondSum = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uid = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDareResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDareResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDareResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackStageAddDiamondReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackStageAddDiamondReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackStageAddDiamondReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackStageUpdateDiamondReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackStageUpdateDiamondReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackStageUpdateDiamondReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Reason = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackStageAddDiamondResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackStageAddDiamondResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackStageAddDiamondResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageSetGuardianReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageSetGuardianReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageSetGuardianReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadUrl = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageSetGuardianResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageSetGuardianResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageSetGuardianResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayCfgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayCfgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayCfgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayDiamondTop", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayDiamondTop = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayLimit = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnceDiamondRebate", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnceDiamondRebate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderMsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderMsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderMsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OrderId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActPoolId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActivityPrizeLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActivityPrizeLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActivityPrizeLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolRuleId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolRuleId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumNumResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumNumResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumNumResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignNum = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActivityPrizeLogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WishActivityPrizeLogList = append(m.WishActivityPrizeLogList, &WishActivityPrizeLog{})
			if err := m.WishActivityPrizeLogList[len(m.WishActivityPrizeLogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDayTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastDayTime = &v
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DayTimeList = append(m.DayTimeList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DayTimeList) == 0 {
					m.DayTimeList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DayTimeList = append(m.DayTimeList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DayTimeList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumMoneyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumMoneyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumMoneyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumMoneyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumMoneyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumMoneyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NickName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HeadIcon = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductIcon = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConSumDiamondNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConSumDiamondNum = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveDiamondNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveDiamondNum = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProductId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeLogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrizeLogId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumMoneyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumMoneyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumMoneyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumMoneyDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SumMoneyDataList = append(m.SumMoneyDataList, &SumMoneyData{})
			if err := m.SumMoneyDataList[len(m.SumMoneyDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopNum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiamondNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiamondNum = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeLogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrizeLogId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishCoinRechargeActivityCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishCoinRechargeActivityCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishCoinRechargeActivityCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EsCoin = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ratio = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecharge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRecharge = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeActResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeActResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeActResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RechargeLevels = append(m.RechargeLevels, &WishCoinRechargeActivityCfg{})
			if err := m.RechargeLevels[len(m.RechargeLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerCoin = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDiamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerDiamond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerEsCoin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerEsCoin = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayMoney", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayMoney = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinNum = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveNum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveNum = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RechargeLogsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeLogsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeLogsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RechargeLogs = append(m.RechargeLogs, &RechargeLogs{})
			if err := m.RechargeLogs[len(m.RechargeLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoxNum = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateTime = &v
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoxIds = append(m.BoxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthH5Wish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthH5Wish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BoxIds) == 0 {
					m.BoxIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowH5Wish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoxIds = append(m.BoxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActPoolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActPoolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActPoolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActPoolList = append(m.ActPoolList, &ActPool{})
			if err := m.ActPoolList[len(m.ActPoolList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActPoolRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActPoolRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActPoolRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActPoolId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WishActPoolRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WishActPoolRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WishActPoolRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishActPoolId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Key = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishItemId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishItemId = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AwardType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActPoolRuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActPoolRuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActPoolRuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishActPoolRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WishActPoolRuleList = append(m.WishActPoolRuleList, &WishActPoolRule{})
			if err := m.WishActPoolRuleList[len(m.WishActPoolRuleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActNameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActNameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActNameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthH5Wish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthH5Wish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActOpenStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActOpenStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActOpenStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Status = &b
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageDareToolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageDareToolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageDareToolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PoolId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diamond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WishBoxId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WishBoxId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageDareToolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageDareToolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageDareToolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DareCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackstageClearToolDataResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackstageClearToolDataResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackstageClearToolDataResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipH5Wish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthH5Wish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipH5Wish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowH5Wish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowH5Wish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthH5Wish
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthH5Wish
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowH5Wish
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipH5Wish(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthH5Wish
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthH5Wish = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowH5Wish   = fmt.Errorf("proto: integer overflow")
)
