// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: square.proto

package client_square

import (
	fmt "fmt"
	share_message "game_server/pb/share_message"
	github_com_akqp2019_protobuf_proto "github.com/akqp2019/protobuf/proto"
	proto "github.com/akqp2019/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoginMsg struct {
	Account              *string  `protobuf:"bytes,1,req,name=Account" json:"Account,omitempty" bson:"Account,omitempty"`
	PlayerId             *int64   `protobuf:"varint,3,opt,name=PlayerId" json:"PlayerId,omitempty" bson:"PlayerId,omitempty"`
	Token                *string  `protobuf:"bytes,2,opt,name=Token" json:"Token,omitempty" bson:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *LoginMsg) Reset()         { *m = LoginMsg{} }
func (m *LoginMsg) String() string { return proto.CompactTextString(m) }
func (*LoginMsg) ProtoMessage()    {}
func (*LoginMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{0}
}
func (m *LoginMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginMsg.Merge(m, src)
}
func (m *LoginMsg) XXX_Size() int {
	return m.Size()
}
func (m *LoginMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LoginMsg proto.InternalMessageInfo

func (m *LoginMsg) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *LoginMsg) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LoginMsg) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type AllInfo struct {
	SquareInfo            []*share_message.DynamicData `protobuf:"bytes,1,rep,name=SquareInfo" json:"SquareInfo,omitempty" bson:"SquareInfo,omitempty"`
	FirstAddSquareDynamic *bool                        `protobuf:"varint,2,opt,name=FirstAddSquareDynamic" json:"FirstAddSquareDynamic,omitempty" bson:"FirstAddSquareDynamic,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized      []byte                       `json:"-" bson:"-"`
	XXX_sizecache         int32                        `json:"-" bson:"-"`
}

func (m *AllInfo) Reset()         { *m = AllInfo{} }
func (m *AllInfo) String() string { return proto.CompactTextString(m) }
func (*AllInfo) ProtoMessage()    {}
func (*AllInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{1}
}
func (m *AllInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllInfo.Merge(m, src)
}
func (m *AllInfo) XXX_Size() int {
	return m.Size()
}
func (m *AllInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllInfo proto.InternalMessageInfo

func (m *AllInfo) GetSquareInfo() []*share_message.DynamicData {
	if m != nil {
		return m.SquareInfo
	}
	return nil
}

func (m *AllInfo) GetFirstAddSquareDynamic() bool {
	if m != nil && m.FirstAddSquareDynamic != nil {
		return *m.FirstAddSquareDynamic
	}
	return false
}

type NewVersionAllInfo struct {
	SquareInfo            *share_message.DynamicDataListPage `protobuf:"bytes,1,opt,name=SquareInfo" json:"SquareInfo,omitempty" bson:"SquareInfo,omitempty"`
	FirstAddSquareDynamic *bool                              `protobuf:"varint,2,opt,name=FirstAddSquareDynamic" json:"FirstAddSquareDynamic,omitempty" bson:"FirstAddSquareDynamic,omitempty"`
	Type                  *int32                             `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                           `json:"-" bson:"-"`
	XXX_unrecognized      []byte                             `json:"-" bson:"-"`
	XXX_sizecache         int32                              `json:"-" bson:"-"`
}

func (m *NewVersionAllInfo) Reset()         { *m = NewVersionAllInfo{} }
func (m *NewVersionAllInfo) String() string { return proto.CompactTextString(m) }
func (*NewVersionAllInfo) ProtoMessage()    {}
func (*NewVersionAllInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{2}
}
func (m *NewVersionAllInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewVersionAllInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewVersionAllInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewVersionAllInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewVersionAllInfo.Merge(m, src)
}
func (m *NewVersionAllInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewVersionAllInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewVersionAllInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewVersionAllInfo proto.InternalMessageInfo

func (m *NewVersionAllInfo) GetSquareInfo() *share_message.DynamicDataListPage {
	if m != nil {
		return m.SquareInfo
	}
	return nil
}

func (m *NewVersionAllInfo) GetFirstAddSquareDynamic() bool {
	if m != nil && m.FirstAddSquareDynamic != nil {
		return *m.FirstAddSquareDynamic
	}
	return false
}

func (m *NewVersionAllInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type FlushInfo struct {
	LogId                *int64   `protobuf:"varint,1,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	Type                 *int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	FlushType            *int32   `protobuf:"varint,3,opt,name=FlushType" json:"FlushType,omitempty" bson:"FlushType,omitempty"`
	AdvId                *int64   `protobuf:"varint,4,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FlushInfo) Reset()         { *m = FlushInfo{} }
func (m *FlushInfo) String() string { return proto.CompactTextString(m) }
func (*FlushInfo) ProtoMessage()    {}
func (*FlushInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{3}
}
func (m *FlushInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlushInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushInfo.Merge(m, src)
}
func (m *FlushInfo) XXX_Size() int {
	return m.Size()
}
func (m *FlushInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlushInfo proto.InternalMessageInfo

func (m *FlushInfo) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

func (m *FlushInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *FlushInfo) GetFlushType() int32 {
	if m != nil && m.FlushType != nil {
		return *m.FlushType
	}
	return 0
}

func (m *FlushInfo) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

// 新版本的刷新信息
type NewVersionFlushInfo struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	AdvId                *int64   `protobuf:"varint,2,opt,name=AdvId" json:"AdvId,omitempty" bson:"AdvId,omitempty"`
	Page                 *int32   `protobuf:"varint,3,opt,name=page" json:"page,omitempty" bson:"page,omitempty"`
	PageSize             *int32   `protobuf:"varint,4,opt,name=pageSize" json:"pageSize,omitempty" bson:"pageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NewVersionFlushInfo) Reset()         { *m = NewVersionFlushInfo{} }
func (m *NewVersionFlushInfo) String() string { return proto.CompactTextString(m) }
func (*NewVersionFlushInfo) ProtoMessage()    {}
func (*NewVersionFlushInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{4}
}
func (m *NewVersionFlushInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewVersionFlushInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewVersionFlushInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewVersionFlushInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewVersionFlushInfo.Merge(m, src)
}
func (m *NewVersionFlushInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewVersionFlushInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewVersionFlushInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewVersionFlushInfo proto.InternalMessageInfo

func (m *NewVersionFlushInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *NewVersionFlushInfo) GetAdvId() int64 {
	if m != nil && m.AdvId != nil {
		return *m.AdvId
	}
	return 0
}

func (m *NewVersionFlushInfo) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *NewVersionFlushInfo) GetPageSize() int32 {
	if m != nil && m.PageSize != nil {
		return *m.PageSize
	}
	return 0
}

type MessageMainInfo struct {
	CommentData          []*share_message.CommentData `protobuf:"bytes,1,rep,name=CommentData" json:"CommentData,omitempty" bson:"CommentData,omitempty"`
	DynamicData          []*share_message.DynamicData `protobuf:"bytes,2,rep,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	UnreadComment        *int32                       `protobuf:"varint,3,opt,name=UnreadComment" json:"UnreadComment,omitempty" bson:"UnreadComment,omitempty"`
	UnreadZan            *int32                       `protobuf:"varint,4,opt,name=UnreadZan" json:"UnreadZan,omitempty" bson:"UnreadZan,omitempty"`
	UnreadAttention      *int32                       `protobuf:"varint,5,opt,name=UnreadAttention" json:"UnreadAttention,omitempty" bson:"UnreadAttention,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *MessageMainInfo) Reset()         { *m = MessageMainInfo{} }
func (m *MessageMainInfo) String() string { return proto.CompactTextString(m) }
func (*MessageMainInfo) ProtoMessage()    {}
func (*MessageMainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{5}
}
func (m *MessageMainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageMainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageMainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageMainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageMainInfo.Merge(m, src)
}
func (m *MessageMainInfo) XXX_Size() int {
	return m.Size()
}
func (m *MessageMainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageMainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MessageMainInfo proto.InternalMessageInfo

func (m *MessageMainInfo) GetCommentData() []*share_message.CommentData {
	if m != nil {
		return m.CommentData
	}
	return nil
}

func (m *MessageMainInfo) GetDynamicData() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

func (m *MessageMainInfo) GetUnreadComment() int32 {
	if m != nil && m.UnreadComment != nil {
		return *m.UnreadComment
	}
	return 0
}

func (m *MessageMainInfo) GetUnreadZan() int32 {
	if m != nil && m.UnreadZan != nil {
		return *m.UnreadZan
	}
	return 0
}

func (m *MessageMainInfo) GetUnreadAttention() int32 {
	if m != nil && m.UnreadAttention != nil {
		return *m.UnreadAttention
	}
	return 0
}

type ZanList struct {
	ZanData              []*share_message.ZanData     `protobuf:"bytes,1,rep,name=ZanData" json:"ZanData,omitempty" bson:"ZanData,omitempty"`
	DynamicData          []*share_message.DynamicData `protobuf:"bytes,2,rep,name=DynamicData" json:"DynamicData,omitempty" bson:"DynamicData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-" bson:"-"`
	XXX_unrecognized     []byte                       `json:"-" bson:"-"`
	XXX_sizecache        int32                        `json:"-" bson:"-"`
}

func (m *ZanList) Reset()         { *m = ZanList{} }
func (m *ZanList) String() string { return proto.CompactTextString(m) }
func (*ZanList) ProtoMessage()    {}
func (*ZanList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{6}
}
func (m *ZanList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZanList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZanList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZanList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZanList.Merge(m, src)
}
func (m *ZanList) XXX_Size() int {
	return m.Size()
}
func (m *ZanList) XXX_DiscardUnknown() {
	xxx_messageInfo_ZanList.DiscardUnknown(m)
}

var xxx_messageInfo_ZanList proto.InternalMessageInfo

func (m *ZanList) GetZanData() []*share_message.ZanData {
	if m != nil {
		return m.ZanData
	}
	return nil
}

func (m *ZanList) GetDynamicData() []*share_message.DynamicData {
	if m != nil {
		return m.DynamicData
	}
	return nil
}

type AttentionList struct {
	AttentionData        []*share_message.AttentionData `protobuf:"bytes,1,rep,name=AttentionData" json:"AttentionData,omitempty" bson:"AttentionData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-" bson:"-"`
	XXX_unrecognized     []byte                         `json:"-" bson:"-"`
	XXX_sizecache        int32                          `json:"-" bson:"-"`
}

func (m *AttentionList) Reset()         { *m = AttentionList{} }
func (m *AttentionList) String() string { return proto.CompactTextString(m) }
func (*AttentionList) ProtoMessage()    {}
func (*AttentionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{7}
}
func (m *AttentionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttentionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttentionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttentionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttentionList.Merge(m, src)
}
func (m *AttentionList) XXX_Size() int {
	return m.Size()
}
func (m *AttentionList) XXX_DiscardUnknown() {
	xxx_messageInfo_AttentionList.DiscardUnknown(m)
}

var xxx_messageInfo_AttentionList proto.InternalMessageInfo

func (m *AttentionList) GetAttentionData() []*share_message.AttentionData {
	if m != nil {
		return m.AttentionData
	}
	return nil
}

type UnReadInfo struct {
	Type                 *int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty" bson:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *UnReadInfo) Reset()         { *m = UnReadInfo{} }
func (m *UnReadInfo) String() string { return proto.CompactTextString(m) }
func (*UnReadInfo) ProtoMessage()    {}
func (*UnReadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{8}
}
func (m *UnReadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnReadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnReadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnReadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnReadInfo.Merge(m, src)
}
func (m *UnReadInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnReadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnReadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnReadInfo proto.InternalMessageInfo

func (m *UnReadInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type NewUnReadMessageResp struct {
	UnreadComment        *int32   `protobuf:"varint,1,opt,name=UnreadComment" json:"UnreadComment,omitempty" bson:"UnreadComment,omitempty"`
	UnreadZan            *int32   `protobuf:"varint,2,opt,name=UnreadZan" json:"UnreadZan,omitempty" bson:"UnreadZan,omitempty"`
	UnreadAttention      *int32   `protobuf:"varint,3,opt,name=UnreadAttention" json:"UnreadAttention,omitempty" bson:"UnreadAttention,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *NewUnReadMessageResp) Reset()         { *m = NewUnReadMessageResp{} }
func (m *NewUnReadMessageResp) String() string { return proto.CompactTextString(m) }
func (*NewUnReadMessageResp) ProtoMessage()    {}
func (*NewUnReadMessageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{9}
}
func (m *NewUnReadMessageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewUnReadMessageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewUnReadMessageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewUnReadMessageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewUnReadMessageResp.Merge(m, src)
}
func (m *NewUnReadMessageResp) XXX_Size() int {
	return m.Size()
}
func (m *NewUnReadMessageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewUnReadMessageResp.DiscardUnknown(m)
}

var xxx_messageInfo_NewUnReadMessageResp proto.InternalMessageInfo

func (m *NewUnReadMessageResp) GetUnreadComment() int32 {
	if m != nil && m.UnreadComment != nil {
		return *m.UnreadComment
	}
	return 0
}

func (m *NewUnReadMessageResp) GetUnreadZan() int32 {
	if m != nil && m.UnreadZan != nil {
		return *m.UnreadZan
	}
	return 0
}

func (m *NewUnReadMessageResp) GetUnreadAttention() int32 {
	if m != nil && m.UnreadAttention != nil {
		return *m.UnreadAttention
	}
	return 0
}

type DynamicTopReq struct {
	Coin                 *int64   `protobuf:"varint,1,opt,name=Coin" json:"Coin,omitempty" bson:"Coin,omitempty"`
	LogId                *int64   `protobuf:"varint,2,opt,name=LogId" json:"LogId,omitempty" bson:"LogId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DynamicTopReq) Reset()         { *m = DynamicTopReq{} }
func (m *DynamicTopReq) String() string { return proto.CompactTextString(m) }
func (*DynamicTopReq) ProtoMessage()    {}
func (*DynamicTopReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{10}
}
func (m *DynamicTopReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicTopReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicTopReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicTopReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicTopReq.Merge(m, src)
}
func (m *DynamicTopReq) XXX_Size() int {
	return m.Size()
}
func (m *DynamicTopReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicTopReq.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicTopReq proto.InternalMessageInfo

func (m *DynamicTopReq) GetCoin() int64 {
	if m != nil && m.Coin != nil {
		return *m.Coin
	}
	return 0
}

func (m *DynamicTopReq) GetLogId() int64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

// 用户首次浏览社交广场，触发条件后弹出发布动态互动提示弹窗
type FirstLoginSquareReply struct {
	ZanCount             *int64   `protobuf:"varint,1,opt,name=ZanCount" json:"ZanCount,omitempty" bson:"ZanCount,omitempty"`
	CommentCount         *int64   `protobuf:"varint,2,opt,name=CommentCount" json:"CommentCount,omitempty" bson:"CommentCount,omitempty"`
	IsBrowse2Square      *bool    `protobuf:"varint,3,opt,name=IsBrowse2Square" json:"IsBrowse2Square,omitempty" bson:"IsBrowse2Square,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FirstLoginSquareReply) Reset()         { *m = FirstLoginSquareReply{} }
func (m *FirstLoginSquareReply) String() string { return proto.CompactTextString(m) }
func (*FirstLoginSquareReply) ProtoMessage()    {}
func (*FirstLoginSquareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{11}
}
func (m *FirstLoginSquareReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstLoginSquareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstLoginSquareReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstLoginSquareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstLoginSquareReply.Merge(m, src)
}
func (m *FirstLoginSquareReply) XXX_Size() int {
	return m.Size()
}
func (m *FirstLoginSquareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstLoginSquareReply.DiscardUnknown(m)
}

var xxx_messageInfo_FirstLoginSquareReply proto.InternalMessageInfo

func (m *FirstLoginSquareReply) GetZanCount() int64 {
	if m != nil && m.ZanCount != nil {
		return *m.ZanCount
	}
	return 0
}

func (m *FirstLoginSquareReply) GetCommentCount() int64 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *FirstLoginSquareReply) GetIsBrowse2Square() bool {
	if m != nil && m.IsBrowse2Square != nil {
		return *m.IsBrowse2Square
	}
	return false
}

// 用户首次浏览社交广场，触发条件后弹出发布动态互动提示弹窗
type FirstLoginSquareReq struct {
	IsBrowse2Square      *bool    `protobuf:"varint,1,opt,name=IsBrowse2Square" json:"IsBrowse2Square,omitempty" bson:"IsBrowse2Square,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *FirstLoginSquareReq) Reset()         { *m = FirstLoginSquareReq{} }
func (m *FirstLoginSquareReq) String() string { return proto.CompactTextString(m) }
func (*FirstLoginSquareReq) ProtoMessage()    {}
func (*FirstLoginSquareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{12}
}
func (m *FirstLoginSquareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstLoginSquareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstLoginSquareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstLoginSquareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstLoginSquareReq.Merge(m, src)
}
func (m *FirstLoginSquareReq) XXX_Size() int {
	return m.Size()
}
func (m *FirstLoginSquareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstLoginSquareReq.DiscardUnknown(m)
}

var xxx_messageInfo_FirstLoginSquareReq proto.InternalMessageInfo

func (m *FirstLoginSquareReq) GetIsBrowse2Square() bool {
	if m != nil && m.IsBrowse2Square != nil {
		return *m.IsBrowse2Square
	}
	return false
}

type AdvDetailReply struct {
	AdvSetting           *share_message.AdvSetting `protobuf:"bytes,1,opt,name=AdvSetting" json:"AdvSetting,omitempty" bson:"AdvSetting,omitempty"`
	DataType             *int32                    `protobuf:"varint,2,opt,name=DataType" json:"DataType,omitempty" bson:"DataType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" bson:"-"`
	XXX_unrecognized     []byte                    `json:"-" bson:"-"`
	XXX_sizecache        int32                     `json:"-" bson:"-"`
}

func (m *AdvDetailReply) Reset()         { *m = AdvDetailReply{} }
func (m *AdvDetailReply) String() string { return proto.CompactTextString(m) }
func (*AdvDetailReply) ProtoMessage()    {}
func (*AdvDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f3c81857d39439, []int{13}
}
func (m *AdvDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvDetailReply.Merge(m, src)
}
func (m *AdvDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *AdvDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_AdvDetailReply proto.InternalMessageInfo

func (m *AdvDetailReply) GetAdvSetting() *share_message.AdvSetting {
	if m != nil {
		return m.AdvSetting
	}
	return nil
}

func (m *AdvDetailReply) GetDataType() int32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return 0
}

func init() {
	proto.RegisterType((*LoginMsg)(nil), "client_square.LoginMsg")
	proto.RegisterType((*AllInfo)(nil), "client_square.AllInfo")
	proto.RegisterType((*NewVersionAllInfo)(nil), "client_square.NewVersionAllInfo")
	proto.RegisterType((*FlushInfo)(nil), "client_square.FlushInfo")
	proto.RegisterType((*NewVersionFlushInfo)(nil), "client_square.NewVersionFlushInfo")
	proto.RegisterType((*MessageMainInfo)(nil), "client_square.MessageMainInfo")
	proto.RegisterType((*ZanList)(nil), "client_square.ZanList")
	proto.RegisterType((*AttentionList)(nil), "client_square.AttentionList")
	proto.RegisterType((*UnReadInfo)(nil), "client_square.UnReadInfo")
	proto.RegisterType((*NewUnReadMessageResp)(nil), "client_square.NewUnReadMessageResp")
	proto.RegisterType((*DynamicTopReq)(nil), "client_square.DynamicTopReq")
	proto.RegisterType((*FirstLoginSquareReply)(nil), "client_square.FirstLoginSquareReply")
	proto.RegisterType((*FirstLoginSquareReq)(nil), "client_square.FirstLoginSquareReq")
	proto.RegisterType((*AdvDetailReply)(nil), "client_square.AdvDetailReply")
}

func init() { proto.RegisterFile("square.proto", fileDescriptor_32f3c81857d39439) }

var fileDescriptor_32f3c81857d39439 = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x80, 0x47, 0x4e, 0x3d, 0x71, 0x4e, 0xec, 0xa6, 0xd9, 0xfc, 0x39, 0xa2, 0x09, 0x1e, 0x01,
	0x43, 0x2e, 0xc0, 0x61, 0xcc, 0xc0, 0x45, 0x81, 0x0e, 0x6a, 0x4c, 0x8a, 0x19, 0x27, 0x4d, 0x95,
	0x84, 0x29, 0xb9, 0xc9, 0x6c, 0xa5, 0xc5, 0xd5, 0x20, 0xaf, 0x14, 0x69, 0x9d, 0x60, 0x5e, 0x84,
	0x37, 0xe1, 0x19, 0xb8, 0xe0, 0x82, 0x47, 0x60, 0xf2, 0x24, 0xcc, 0xfe, 0xd8, 0xd6, 0xae, 0x22,
	0x87, 0x96, 0x3b, 0x7b, 0xf7, 0x9c, 0xef, 0xfc, 0xec, 0xf9, 0x11, 0xd4, 0xb3, 0xab, 0x11, 0x4e,
	0x49, 0x3b, 0x49, 0x63, 0x16, 0xa3, 0x86, 0x1f, 0x85, 0x84, 0xb2, 0x4b, 0x79, 0x68, 0xc3, 0x6b,
	0x9c, 0xa9, 0x2b, 0xbb, 0xee, 0xc7, 0xc3, 0x61, 0x4c, 0xd5, 0xbf, 0xfd, 0x01, 0x1e, 0x92, 0xcb,
	0x8c, 0xa4, 0xd7, 0x24, 0xdd, 0x17, 0x47, 0xfb, 0xd9, 0x1b, 0x9c, 0x92, 0xcb, 0x21, 0xc9, 0x32,
	0x3c, 0x20, 0xfb, 0x38, 0x8a, 0x34, 0x85, 0xce, 0x7d, 0x0a, 0x0c, 0xbf, 0x8e, 0xc8, 0x65, 0xc6,
	0xd2, 0x91, 0xcf, 0xa4, 0x8e, 0xf3, 0x35, 0xd4, 0xfa, 0xf1, 0x20, 0xa4, 0x47, 0xd9, 0x00, 0xad,
	0xc0, 0xa2, 0xeb, 0xfb, 0xf1, 0x88, 0xb2, 0xa6, 0xd5, 0xaa, 0xec, 0x2d, 0xa1, 0x47, 0x50, 0x3b,
	0x89, 0xf0, 0x98, 0xa4, 0xbd, 0xa0, 0xb9, 0xd0, 0xb2, 0xf6, 0x16, 0x50, 0x03, 0xaa, 0x67, 0xf1,
	0x2f, 0x84, 0x36, 0x2b, 0x2d, 0x6b, 0x6f, 0xc9, 0x79, 0x05, 0x8b, 0x6e, 0x14, 0xf5, 0xe8, 0xcf,
	0x31, 0x6a, 0x03, 0x9c, 0x8a, 0x88, 0xf8, 0xbf, 0xa6, 0xd5, 0x5a, 0xd8, 0x5b, 0xee, 0xd8, 0x6d,
	0xcd, 0x7e, 0xbb, 0x3b, 0xa6, 0x78, 0x18, 0xfa, 0x5d, 0xcc, 0x30, 0xda, 0x81, 0x8d, 0xc3, 0x30,
	0xcd, 0x98, 0x1b, 0x04, 0x52, 0x4f, 0x5d, 0x0a, 0x72, 0xcd, 0xf9, 0x15, 0x56, 0x8f, 0xc9, 0xcd,
	0x8f, 0x24, 0xcd, 0xc2, 0x98, 0x4e, 0x6c, 0x7c, 0x69, 0xd8, 0xb0, 0xf6, 0x96, 0x3b, 0x4e, 0xb9,
	0x8d, 0x7e, 0x98, 0xb1, 0x13, 0x3c, 0x20, 0xf7, 0xd8, 0x42, 0x75, 0x78, 0x70, 0x36, 0x4e, 0x88,
	0x08, 0xb1, 0xea, 0xfc, 0x00, 0x4b, 0x87, 0xd1, 0x28, 0x7b, 0x23, 0x2c, 0x36, 0xa0, 0xda, 0x8f,
	0x07, 0xbd, 0x40, 0x18, 0x5b, 0x98, 0x4a, 0x72, 0xbd, 0x2a, 0x5a, 0x55, 0x92, 0x33, 0x65, 0x2e,
	0xef, 0x06, 0xd7, 0xbd, 0xa0, 0xf9, 0x80, 0xcb, 0x3b, 0x1e, 0xac, 0xcd, 0xa2, 0x98, 0x51, 0x27,
	0x18, 0x4b, 0xd7, 0xa9, 0x4c, 0x6c, 0x24, 0x78, 0x30, 0x01, 0x3e, 0x82, 0x1a, 0xff, 0x77, 0x1a,
	0xfe, 0x46, 0x04, 0xb3, 0xea, 0xfc, 0x61, 0xc1, 0xca, 0x91, 0x0c, 0xf6, 0x08, 0x87, 0x54, 0x00,
	0xf7, 0x61, 0xf9, 0x20, 0x1e, 0x0e, 0x09, 0x65, 0x3c, 0xee, 0x92, 0xec, 0xe7, 0x24, 0xb8, 0x42,
	0x2e, 0x51, 0xcd, 0xca, 0xbd, 0xcf, 0xb5, 0x01, 0x8d, 0x73, 0x9a, 0x12, 0x1c, 0x28, 0x8a, 0x72,
	0x6f, 0x15, 0x96, 0xe4, 0xf1, 0x05, 0xa6, 0xd2, 0x3f, 0xb4, 0x05, 0x2b, 0xf2, 0xc8, 0x65, 0x8c,
	0x50, 0x16, 0xc6, 0xb4, 0x59, 0x15, 0x8e, 0xfb, 0xb0, 0x78, 0x81, 0x29, 0x7f, 0x14, 0xf4, 0xb1,
	0xf8, 0x99, 0xf3, 0x75, 0xd3, 0x30, 0xad, 0x6e, 0xdf, 0xda, 0x4f, 0xa7, 0x0b, 0x8d, 0xa9, 0x5d,
	0x61, 0xea, 0xf3, 0xdc, 0x41, 0xce, 0xe0, 0x63, 0x83, 0xa1, 0xc9, 0x38, 0x36, 0xc0, 0x39, 0xf5,
	0x08, 0x0e, 0x8a, 0xcf, 0xe5, 0xfc, 0x04, 0xeb, 0xc7, 0xe4, 0x46, 0x5e, 0xab, 0x77, 0xf0, 0x48,
	0x96, 0x14, 0x33, 0x64, 0x15, 0x33, 0x54, 0x29, 0xcb, 0x90, 0x2c, 0xbd, 0x4f, 0xa0, 0xa1, 0x62,
	0x39, 0x8b, 0x13, 0x8f, 0x5c, 0x71, 0xcb, 0x07, 0x71, 0x48, 0x55, 0xf5, 0x4d, 0x8b, 0x51, 0x14,
	0x8a, 0xf3, 0x4a, 0x55, 0xb5, 0xe8, 0x5f, 0x59, 0xd7, 0x1e, 0x49, 0xa2, 0x31, 0xaf, 0x99, 0x0b,
	0x4c, 0x0f, 0x54, 0x23, 0x73, 0xcd, 0x75, 0xa8, 0x2b, 0xaf, 0xe4, 0xa9, 0xac, 0xb4, 0x2d, 0x58,
	0xe9, 0x65, 0xcf, 0xd2, 0xf8, 0x26, 0x23, 0x1d, 0xa9, 0x2f, 0xfc, 0xa8, 0x39, 0x6d, 0x58, 0x2b,
	0x92, 0xaf, 0xee, 0x92, 0xb7, 0x84, 0xfc, 0x4b, 0x78, 0xe8, 0x06, 0xd7, 0x5d, 0xc2, 0x70, 0x18,
	0x49, 0x17, 0x3e, 0x05, 0x70, 0x83, 0xeb, 0x53, 0xc2, 0x58, 0x48, 0x07, 0xaa, 0x53, 0xb7, 0xcd,
	0x94, 0x4f, 0x05, 0xb8, 0xc7, 0x3c, 0xef, 0xb3, 0xde, 0xea, 0xfc, 0xd5, 0x80, 0xc6, 0x81, 0x18,
	0x94, 0xca, 0x14, 0xfa, 0x0c, 0x6a, 0x5e, 0xe2, 0x0b, 0x97, 0xd0, 0x56, 0x5b, 0x1b, 0xa2, 0xed,
	0xc9, 0x08, 0xb3, 0x97, 0xdb, 0x62, 0x9c, 0x7e, 0x37, 0x4c, 0xd8, 0x18, 0x3d, 0x85, 0x0d, 0x2f,
	0xf1, 0x45, 0xdb, 0x69, 0x6d, 0x8f, 0x9a, 0x86, 0xfa, 0xb4, 0x33, 0x75, 0x7d, 0x0f, 0xde, 0xf7,
	0x12, 0xdf, 0x68, 0x60, 0x9d, 0xe4, 0x18, 0xa4, 0x3b, 0xba, 0x5d, 0x67, 0x1e, 0xc1, 0x9a, 0x97,
	0xf8, 0xe6, 0x20, 0x42, 0x73, 0x4a, 0xda, 0xb6, 0xa7, 0x36, 0xc4, 0x64, 0x6f, 0x7b, 0xe4, 0x6a,
	0x44, 0x32, 0x26, 0x4a, 0xf3, 0xa9, 0xc0, 0x75, 0x49, 0x64, 0xe2, 0x4a, 0x55, 0x74, 0x77, 0x5c,
	0xb0, 0xbd, 0xc4, 0xbf, 0xc0, 0xf4, 0x45, 0x42, 0x52, 0xcc, 0x88, 0x8e, 0xd9, 0x34, 0x30, 0x17,
	0x98, 0x16, 0x11, 0x67, 0x02, 0xe1, 0x06, 0x93, 0xba, 0x9f, 0x1f, 0x58, 0x6e, 0x08, 0xd9, 0xf3,
	0x06, 0xd4, 0xb7, 0x82, 0xda, 0x25, 0xd1, 0x9d, 0xd4, 0x0d, 0xc3, 0xb1, 0x5e, 0x50, 0xf4, 0xeb,
	0x09, 0xac, 0x72, 0xbf, 0x54, 0x8b, 0xc9, 0x3d, 0x96, 0x7b, 0x79, 0xa9, 0x28, 0xae, 0x8b, 0xba,
	0x87, 0x42, 0xf7, 0x39, 0x61, 0xca, 0xa0, 0xc8, 0x75, 0x89, 0xd1, 0x79, 0x53, 0xf3, 0x08, 0x9a,
	0x1a, 0x87, 0x0f, 0x6c, 0x15, 0xd0, 0x7f, 0xc5, 0x29, 0x71, 0x31, 0xcb, 0x3c, 0xd8, 0xd1, 0x70,
	0xa7, 0xc4, 0x8f, 0x69, 0x80, 0xd3, 0xf1, 0xff, 0x60, 0xf6, 0x60, 0xbd, 0x10, 0xea, 0x31, 0xb9,
	0x79, 0x97, 0x68, 0x4f, 0xe0, 0xbd, 0xb2, 0x68, 0xdf, 0x82, 0x98, 0x77, 0xee, 0x1c, 0x5a, 0x73,
	0x03, 0x7e, 0x47, 0x6c, 0x5f, 0x74, 0xcd, 0x73, 0xa2, 0xaa, 0x4a, 0x4d, 0xf1, 0x32, 0xd2, 0xae,
	0xd1, 0xe3, 0xe6, 0xf2, 0xed, 0x4d, 0x68, 0xb2, 0xc6, 0x54, 0x93, 0xcc, 0xed, 0xc1, 0x4d, 0x03,
	0x39, 0xd9, 0x8b, 0xe7, 0xb0, 0x9d, 0x47, 0x4d, 0xf7, 0xc3, 0xbd, 0xc0, 0xc7, 0x06, 0x50, 0xdf,
	0x81, 0x4f, 0xa0, 0xc1, 0x9b, 0x69, 0xba, 0x5a, 0x90, 0x29, 0xae, 0x6d, 0x1d, 0xbd, 0x15, 0xbe,
	0x12, 0xad, 0xc0, 0x97, 0x9d, 0xfa, 0x14, 0xe4, 0xae, 0x6c, 0x1b, 0xfa, 0xb3, 0x65, 0xa9, 0x2b,
	0x7f, 0x04, 0x4b, 0x72, 0x66, 0xbf, 0x18, 0x31, 0x94, 0xbf, 0xd1, 0xc5, 0x2e, 0x45, 0x06, 0xcd,
	0x95, 0x53, 0x18, 0xae, 0x77, 0xec, 0x24, 0xfb, 0xc3, 0x7b, 0x65, 0xf8, 0x3a, 0xfa, 0x1e, 0xea,
	0x62, 0x46, 0xa9, 0x1d, 0x85, 0xca, 0x57, 0x91, 0xbd, 0x63, 0x66, 0x52, 0x5f, 0x6c, 0x5f, 0x28,
	0x52, 0xe0, 0x06, 0xd7, 0xfd, 0x78, 0x80, 0x9a, 0x45, 0x52, 0x3f, 0x1e, 0x98, 0x59, 0xec, 0xfc,
	0x5e, 0x81, 0x86, 0x74, 0xa8, 0x23, 0xb7, 0x1a, 0xfa, 0x46, 0xc4, 0x2c, 0xcf, 0xdc, 0x28, 0x2a,
	0x8e, 0x5c, 0x65, 0x5e, 0x7e, 0xfa, 0xda, 0x0f, 0x25, 0xed, 0x38, 0xf6, 0x08, 0x1b, 0xa5, 0x14,
	0x75, 0xc5, 0x93, 0x1e, 0x93, 0x9b, 0x49, 0xf1, 0x7e, 0x50, 0xdc, 0x44, 0x85, 0x6f, 0x94, 0x02,
	0xa5, 0x0d, 0x2b, 0x9c, 0x12, 0xe7, 0x38, 0xda, 0x2b, 0x99, 0xf2, 0x2f, 0xc5, 0x00, 0x9a, 0x2d,
	0xb9, 0x82, 0xfb, 0xad, 0xd2, 0x7d, 0x58, 0x12, 0xc8, 0xb3, 0xfa, 0x9f, 0xb7, 0xbb, 0xd6, 0xdf,
	0xb7, 0xbb, 0xd6, 0x3f, 0xb7, 0xbb, 0xd6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x7a, 0x11,
	0x16, 0x2b, 0x0d, 0x00, 0x00,
}

func (m *LoginMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account == nil {
		return 0, github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Account")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Account)))
		i += copy(dAtA[i:], *m.Account)
	}
	if m.Token != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSquare(dAtA, i, uint64(len(*m.Token)))
		i += copy(dAtA[i:], *m.Token)
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SquareInfo) > 0 {
		for _, msg := range m.SquareInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FirstAddSquareDynamic != nil {
		dAtA[i] = 0x10
		i++
		if *m.FirstAddSquareDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewVersionAllInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewVersionAllInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SquareInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.SquareInfo.Size()))
		n1, err := m.SquareInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FirstAddSquareDynamic != nil {
		dAtA[i] = 0x10
		i++
		if *m.FirstAddSquareDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.Type != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.FlushType != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.FlushType))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewVersionFlushInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewVersionFlushInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.AdvId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.AdvId))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Page))
	}
	if m.PageSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageMainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageMainInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommentData) > 0 {
		for _, msg := range m.CommentData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DynamicData) > 0 {
		for _, msg := range m.DynamicData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UnreadComment != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ZanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZanList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ZanData) > 0 {
		for _, msg := range m.ZanData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DynamicData) > 0 {
		for _, msg := range m.DynamicData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AttentionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttentionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttentionData) > 0 {
		for _, msg := range m.AttentionData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSquare(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UnReadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnReadInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewUnReadMessageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewUnReadMessageResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnreadComment != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DynamicTopReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicTopReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.Coin))
	}
	if m.LogId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirstLoginSquareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstLoginSquareReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ZanCount != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.ZanCount))
	}
	if m.CommentCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.CommentCount))
	}
	if m.IsBrowse2Square != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsBrowse2Square {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FirstLoginSquareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstLoginSquareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsBrowse2Square != nil {
		dAtA[i] = 0x8
		i++
		if *m.IsBrowse2Square {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdvDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvDetailReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdvSetting != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSquare(dAtA, i, uint64(m.AdvSetting.Size()))
		n2, err := m.AdvSetting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DataType != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSquare(dAtA, i, uint64(*m.DataType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSquare(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoginMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = len(*m.Account)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.Token != nil {
		l = len(*m.Token)
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.PlayerId != nil {
		n += 1 + sovSquare(uint64(*m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SquareInfo) > 0 {
		for _, e := range m.SquareInfo {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.FirstAddSquareDynamic != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewVersionAllInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SquareInfo != nil {
		l = m.SquareInfo.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.FirstAddSquareDynamic != nil {
		n += 2
	}
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.FlushType != nil {
		n += 1 + sovSquare(uint64(*m.FlushType))
	}
	if m.AdvId != nil {
		n += 1 + sovSquare(uint64(*m.AdvId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewVersionFlushInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.AdvId != nil {
		n += 1 + sovSquare(uint64(*m.AdvId))
	}
	if m.Page != nil {
		n += 1 + sovSquare(uint64(*m.Page))
	}
	if m.PageSize != nil {
		n += 1 + sovSquare(uint64(*m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageMainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommentData) > 0 {
		for _, e := range m.CommentData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.DynamicData) > 0 {
		for _, e := range m.DynamicData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.UnreadComment != nil {
		n += 1 + sovSquare(uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		n += 1 + sovSquare(uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		n += 1 + sovSquare(uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZanList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ZanData) > 0 {
		for _, e := range m.ZanData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if len(m.DynamicData) > 0 {
		for _, e := range m.DynamicData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttentionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AttentionData) > 0 {
		for _, e := range m.AttentionData {
			l = e.Size()
			n += 1 + l + sovSquare(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnReadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovSquare(uint64(*m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewUnReadMessageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnreadComment != nil {
		n += 1 + sovSquare(uint64(*m.UnreadComment))
	}
	if m.UnreadZan != nil {
		n += 1 + sovSquare(uint64(*m.UnreadZan))
	}
	if m.UnreadAttention != nil {
		n += 1 + sovSquare(uint64(*m.UnreadAttention))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicTopReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != nil {
		n += 1 + sovSquare(uint64(*m.Coin))
	}
	if m.LogId != nil {
		n += 1 + sovSquare(uint64(*m.LogId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirstLoginSquareReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZanCount != nil {
		n += 1 + sovSquare(uint64(*m.ZanCount))
	}
	if m.CommentCount != nil {
		n += 1 + sovSquare(uint64(*m.CommentCount))
	}
	if m.IsBrowse2Square != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirstLoginSquareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBrowse2Square != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdvDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvSetting != nil {
		l = m.AdvSetting.Size()
		n += 1 + l + sovSquare(uint64(l))
	}
	if m.DataType != nil {
		n += 1 + sovSquare(uint64(*m.DataType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSquare(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSquare(x uint64) (n int) {
	return sovSquare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Account = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Token = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlayerId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_akqp2019_protobuf_proto.NewRequiredNotSetError("Account")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SquareInfo = append(m.SquareInfo, &share_message.DynamicData{})
			if err := m.SquareInfo[len(m.SquareInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAddSquareDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstAddSquareDynamic = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewVersionAllInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewVersionAllInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewVersionAllInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SquareInfo == nil {
				m.SquareInfo = &share_message.DynamicDataListPage{}
			}
			if err := m.SquareInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAddSquareDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FirstAddSquareDynamic = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewVersionFlushInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewVersionFlushInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewVersionFlushInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PageSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageMainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageMainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageMainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentData = append(m.CommentData, &share_message.CommentData{})
			if err := m.CommentData[len(m.CommentData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicData = append(m.DynamicData, &share_message.DynamicData{})
			if err := m.DynamicData[len(m.DynamicData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadComment", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadComment = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadZan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadZan = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadAttention", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadAttention = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZanList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZanList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZanData = append(m.ZanData, &share_message.ZanData{})
			if err := m.ZanData[len(m.ZanData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicData = append(m.DynamicData, &share_message.DynamicData{})
			if err := m.DynamicData[len(m.DynamicData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttentionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttentionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttentionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttentionData = append(m.AttentionData, &share_message.AttentionData{})
			if err := m.AttentionData[len(m.AttentionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnReadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnReadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnReadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewUnReadMessageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewUnReadMessageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewUnReadMessageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadComment", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadComment = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadZan", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadZan = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadAttention", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadAttention = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicTopReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicTopReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicTopReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Coin = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstLoginSquareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstLoginSquareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstLoginSquareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZanCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZanCount = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBrowse2Square", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBrowse2Square = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstLoginSquareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstLoginSquareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstLoginSquareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBrowse2Square", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsBrowse2Square = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSquare
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSquare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvSetting == nil {
				m.AdvSetting = &share_message.AdvSetting{}
			}
			if err := m.AdvSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSquare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSquare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSquare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSquare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSquare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSquare
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSquare
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSquare
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSquare(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSquare
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSquare = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSquare   = fmt.Errorf("proto: integer overflow")
)
